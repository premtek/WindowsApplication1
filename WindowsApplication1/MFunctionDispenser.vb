Imports ProjectCore
Imports ProjectIO
Imports ProjectRecipe
Imports ProjectMotion
Imports ProjectAOI
Imports ProjectConveyor
Imports ProjectFeedback
Imports ProjectTriggerBoard
Imports ProjectValveController
Imports System.Math
Imports WetcoConveyor
Imports System.IO

Public Module MFunctionDispenser

#Region "全域變數"
    ' ''' <summary>[座標資料格式]</summary>
    ' ''' <remarks></remarks>
    'Public Structure Premtek.sPos
    '    ''' <summary>[座標X]</summary>
    '    ''' <remarks></remarks>
    '    Friend PosX As Decimal
    '    ''' <summary>[座標Y]</summary>
    '    ''' <remarks></remarks>
    '    Friend PosY As Decimal
    '    ''' <summary>[座標Z]</summary>
    '    ''' <remarks></remarks>
    '    Friend PosZ As Decimal
    '    ''' <summary>[座標B]</summary>
    '    ''' <remarks></remarks>
    '    Friend PosB As Decimal
    '    ''' <summary>[座標C]</summary>
    '    ''' <remarks></remarks>
    '    Friend PosC As Decimal
    'End Structure

    ''' <summary>[紀錄目前位置與目標位置]</summary>
    ''' <remarks></remarks>
    Public Structure sProtectData
        Friend NowPos As Premtek.sPos
        Friend TargetPos As Premtek.sPos
    End Structure

    Dim ItemCount As Integer

#End Region

#Region "Enum、Structure"

    ''' <summary>[前後二組路徑的樣式]</summary>
    ''' <remarks></remarks>
    Private Enum eTwoPathModel
        ''' <summary>[Dots Dots]</summary>
        ''' <remarks></remarks>
        DotsDots = 0
        ''' <summary>[Dots Line]</summary>
        ''' <remarks></remarks>
        DotsLine = 1
        ''' <summary>[DotsArc]</summary>
        ''' <remarks></remarks>
        DotsArc = 2
        ''' <summary>[Line Dots]</summary>
        ''' <remarks></remarks>
        LineDots = 3
        ''' <summary>[Line Line]</summary>
        ''' <remarks></remarks>
        LineLine = 4
        ''' <summary>[Line Arc]</summary>
        ''' <remarks></remarks>
        LineArc = 5
        ''' <summary>[Arc Dots]</summary>
        ''' <remarks></remarks>
        ArcDots = 6
        ''' <summary>[Arc Line]</summary>
        ''' <remarks></remarks>
        ArcLine = 7
        ''' <summary>[Arc Arc]</summary>
        ''' <remarks></remarks>
        ArcArc = 8
        ''' <summary>[非預期樣式]</summary>
        ''' <remarks></remarks>
        None = 9
    End Enum

    Private Enum eMotionOrWaitPath
        ''' <summary>[Dot、Line、Arc]</summary>
        ''' <remarks></remarks>
        MotionPath = 0
        ''' <summary>[Wait]</summary>
        ''' <remarks></remarks>
        WaitPath = 1
    End Enum

    ''' <summary>[助跑資訊]</summary>
    ''' <remarks></remarks>
    Private Structure sExtendParam
        ''' <summary>[速度(mm/s)]</summary>
        ''' <remarks></remarks>
        Friend Velocity As Decimal
        ''' <summary>[助跑時間(加速時間)(s)]</summary>
        ''' <remarks></remarks>
        Friend Time As Decimal
        ''' <summary>[助跑距離(加速距離)(mm)]</summary>
        ''' <remarks></remarks>
        Friend Distance As Decimal
        ''' <summary>[X方向的助跑距離(加速距離)(mm)]</summary>
        ''' <remarks></remarks>
        Friend DistancePosX As Decimal
        ''' <summary>[Y方向的助跑距離(加速距離)(mm)]</summary>
        ''' <remarks></remarks>
        Friend DistancePosY As Decimal
    End Structure

    Private Structure sSingleDieParam
        ''' <summary>[從哪個StepNo開始]</summary>
        ''' <remarks></remarks>
        Friend StartStep As Integer
        ''' <summary>[做到哪個StepNo結束]</summary>
        ''' <remarks></remarks>
        Friend EndStep As Integer
        ''' <summary>[哪個Die]</summary>
        ''' <remarks></remarks>
        Friend DieIndex As Integer
    End Structure

    Private Structure sMulitDieParam
        ''' <summary>[從哪個Die開始]</summary>
        ''' <remarks></remarks>
        Friend Start As Integer
        ''' <summary>[做到哪個Die結束]</summary>
        ''' <remarks></remarks>
        Friend Ending As Integer
    End Structure

    ''' <summary>[點膠參數]</summary>
    ''' <remarks></remarks>
    Private Structure sDispParam
        ''' <summary>[Recipe]</summary>
        ''' <remarks></remarks>
        Friend Recipe As CRecipe
        ''' <summary>[StageNo]</summary>
        ''' <remarks></remarks>
        Friend StageNo As enmStage
        ''' <summary>[節點名稱]</summary>
        ''' <remarks></remarks>
        Friend NodeName As String
        ''' <summary>[該組Stage內選用的第幾個Valve]</summary>
        ''' <remarks></remarks>
        Friend SelectValve As eValveWorkMode
        ''' <summary>[Tilt角度]</summary>
        ''' <remarks></remarks>
        Friend PosB As Decimal
        ''' <summary>[第一組閥對應的編號]</summary>
        ''' <remarks></remarks>
        Friend ValveNo1 As enmValve
        ''' <summary>[第二組閥對應的編號]</summary>
        ''' <remarks></remarks>
        Friend ValveNo2 As enmValve
        ''' <summary>[點膠順序列表]</summary>
        ''' <remarks></remarks>
        Friend DispList As List(Of sDispArrayIndex)
        ''' <summary>[列表內的起始點]</summary>
        ''' <remarks></remarks>
        Friend StartIndex As Integer
        ''' <summary>[列表內的終點]</summary>
        ''' <remarks></remarks>
        Friend EdnIndex As Integer
        ''' <summary>[對應的Pattern]</summary>
        ''' <remarks></remarks>
        Friend Pattern As CRecipePattern
        ''' <summary>[第幾個Round]</summary>
        ''' <remarks></remarks>
        Friend RoundNo As Integer
        ''' <summary>[點膠方式(一次一顆或一次多顆)]</summary>
        ''' <remarks></remarks>
        Friend DispDieType As enmDispMultiDie
        ''' <summary>[紀錄從哪個StepNo做到哪個Step]</summary>
        ''' <remarks></remarks>
        Friend SingleDieParam As sSingleDieParam
        ''' <summary>[紀錄從列表內哪個Die做到哪個Die]</summary>
        ''' <remarks></remarks>
        Friend MulitDieParam As sMulitDieParam
        ''' <summary>[群組加速度]</summary>
        ''' <remarks></remarks>
        Friend Acc As Decimal
        ''' <summary>[群組減速度]</summary>
        ''' <remarks></remarks>
        Friend Dec As Decimal
        ''' <summary>[群組最大速度(用來卡上限用的)]</summary>
        ''' <remarks></remarks>
        Friend VelHigh As Decimal
        ''' <summary>[點膠時間控制模式]</summary>
        ''' <remarks></remarks>
        Friend ProcessTimeType As eProcessTimeType
    End Structure

    ''' <summary>[動作基本參數]</summary>
    ''' <remarks></remarks>
    Private Class sDispSysParam
        ''' <summary>[系統執行步驟]</summary>
        ''' <remarks></remarks>
        Friend SysNum As Integer
        ''' <summary>[命令執行狀態]</summary>
        ''' <remarks></remarks>
        Friend RunStatus As enmRunStatus
        ''' <summary>[起始步驟]</summary>
        ''' <remarks></remarks>
        Friend Const SysLoopStart As Integer = 1000
        ''' <summary>[搭配平台索引]</summary>
        ''' <remarks></remarks>
        Friend StageNo As enmStage
        ''' <summary>[搭配天平索引]</summary>
        ''' <remarks></remarks>
        Friend BalanceNo As enmBalance
        ''' <summary>[搭配CCD索引]</summary>
        ''' <remarks></remarks>
        Friend CCDNo As Integer
        ''' <summary>[搭配測高索引]</summary>
        ''' <remarks></remarks>
        Friend PinNo As Integer
        ''' <summary>[搭配FMCS索引]</summary>
        ''' <remarks></remarks>
        Friend FMCSNo As Integer
        ''' <summary>[搭配清膠機構索引]</summary>
        ''' <remarks></remarks>
        Friend ClearNo As Integer
        ''' <summary>[搭配測高機構索引]</summary>
        ''' <remarks></remarks>
        Friend LaserNo As Integer
        ''' <summary>[搭配Conveyor索引]</summary>
        ''' <remarks></remarks>
        Friend ConveyorNo As Integer
        ''' <summary>[第一組閥件索引]</summary>
        ''' <remarks></remarks>
        Friend ValveNo1 As enmValve
        ''' <summary>[第二組閥件索引]</summary>
        ''' <remarks></remarks>
        Friend ValveNo2 As enmValve
        ''' <summary>[選用的閥(該Stage內的第幾支閥)]</summary>
        ''' <remarks></remarks>
        Friend SelectValve As eValveWorkMode
        ''' <summary>[等效X軸]</summary>
        ''' <remarks></remarks> 
        Friend AxisX As Integer
        ''' <summary>[等效Y軸]</summary>
        ''' <remarks></remarks>
        Friend AxisY As Integer
        ''' <summary>[等效Z軸]</summary>
        ''' <remarks></remarks>
        Friend AxisZ As Integer
        ''' <summary>[等效A軸]</summary>
        ''' <remarks></remarks>
        Friend AxisA As Integer
        ''' <summary>[等效B軸]</summary>
        ''' <remarks></remarks>
        Friend AxisB As Integer
        ''' <summary>[等效C軸]</summary>
        ''' <remarks></remarks>
        Friend AxisC As Integer
        ''' <summary>[未定義暫存用標記]</summary>
        ''' <remarks></remarks>
        Friend Tag As Object
        ''' <summary>[時間紀錄]</summary>
        ''' <remarks></remarks>
        Friend Timer As New Stopwatch
        ''' <summary>[上一次點膠的開始時間]</summary>
        ''' <remarks></remarks>
        Friend LastStartTime As Long
        ''' <summary>[點膠參數]</summary>
        ''' <remarks></remarks>
        Friend DispParam As sDispParam
        ''' <summary>[排列出點膠順序(Path)]</summary>
        ''' <remarks></remarks>
        Friend DispPathRegister As List(Of sPatternPath)
        ''' <summary>[點膠型態]</summary>
        ''' <remarks></remarks>
        Friend DispHistoryModel As eDispHistoryModel
        ''' <summary>[是否需要重新執行空跑(針對History Model)]</summary>
        ''' <remarks></remarks>
        Friend IsNeedDummyRun As Boolean
        ''' <summary>[由流程決定外部是否可暫停]</summary>
        ''' <remarks></remarks>
        Friend IsCanPause As Boolean
        ''' <summary>[於點膠時是否強制要求下點膠參數]</summary>
        ''' <remarks></remarks>
        Friend IsNeedSendCmd As Boolean
        ''' <summary>[多閥同動點膠]</summary>
        ''' <remarks></remarks>
        Friend IsMultiDispense As Boolean
    End Class

    ''' <summary>[點膠方式(一次一顆或一次多顆)]</summary>
    ''' <remarks></remarks>
    Private Enum enmDispMultiDie
        ''' <summary>[單顆單顆點]</summary>
        ''' <remarks></remarks>
        SingleDie = 0
        ''' <summary>[一次點多顆]</summary>
        ''' <remarks></remarks>
        MultiDie = 1
    End Enum

    ''' <summary>[紀錄對應的Array Index]</summary>
    ''' <remarks></remarks>
    Private Structure sDispArrayIndex
        ''' <summary>[陣列(X)]</summary>
        ''' <remarks></remarks>
        Friend IndexX As Integer
        ''' <summary>[陣列(Y)]</summary>
        ''' <remarks></remarks>
        Friend IndexY As Integer
        ''' <summary>[該 Row or Column的最後一個]</summary>
        ''' <remarks></remarks>
        Friend IsLastRowColumn As Boolean
        ' ''' <summary>[NodeName]</summary>
        ' ''' <remarks></remarks>
        'Friend NodeName As String
        ' ''' <summary>[PatternName]</summary>
        ' ''' <remarks></remarks>
        'Friend PatternName As String
    End Structure

    ''' <summary>[二條線的關係]</summary>
    ''' <remarks></remarks>
    Private Enum TwoPathRelationship
        ''' <summary>[非平行線關係]</summary>
        ''' <remarks></remarks>
        None = 0
        ''' <summary>[同一直線且同一方向]</summary>
        ''' <remarks></remarks>
        LineAndDirectionIsTheSame = 1
        ''' <summary>[同一直線但不同方向]</summary>
        ''' <remarks></remarks>
        LineIsTheSameButDirectionIsNot = 2
        ''' <summary>[只是平行但不在同一條直上且方向相同]</summary>
        ''' <remarks></remarks>
        ParallelAndDirectionIsSame = 3
        ''' <summary>[只是平行但不在同一條直上且方向不同]</summary>
        ''' <remarks></remarks>
        ParallelAndDirectionIsNonSame = 4
    End Enum

    ''' <summary>[弧與上個路徑銜接的狀況]</summary>
    ''' <remarks></remarks>
    Private Enum AreConnectRelationship
        ''' <summary>[與上個路徑銜接在一起]</summary>
        ''' <remarks></remarks>
        ConnectWithLastPath = 0
        ''' <summary>[沒有與上個路徑銜接]</summary>
        ''' <remarks></remarks>
        DisconnectWithLastPath = 1
    End Enum

    ''' <summary>[紀錄做到哪個]</summary>
    ''' <remarks></remarks>
    Private Structure sIndex
        ''' <summary>[從哪個開始]</summary>
        ''' <remarks></remarks>
        Friend Start As Integer
        ''' <summary>[做到哪個結束]</summary>
        ''' <remarks></remarks>
        Friend Ending As Integer
        ''' <summary>[已經完成到哪個]</summary>
        ''' <remarks></remarks>
        Friend Done As Decimal
    End Structure

    ''' <summary>[紀錄哪一顆哪個Round的點膠]</summary>
    ''' <remarks></remarks>
    Private Structure sDispensingDie
        ''' <summary>[Round No]</summary>
        ''' <remarks></remarks>
        Friend RoundNo As Integer
        ''' <summary>[IndexX]</summary>
        ''' <remarks></remarks>
        Friend IndexX As Integer
        ''' <summary>[IndexY]</summary>
        ''' <remarks></remarks>
        Friend IndexY As Integer
        ''' <summary>[NodeName]</summary>
        ''' <remarks></remarks>
        Friend NodeName As String
    End Structure

    ''' <summary>[紀錄執行各個Round估測的時間數值跟實際的差值]</summary>
    ''' <remarks></remarks>
    Private Structure sDispenseTimeForRound
        ''' <summary>[進入下一輪時所需的運算時間(ms)]</summary>
        ''' <remarks></remarks>
        Friend NextRoundComputeTime As Decimal
        ''' <summary>[理論值(ms)]</summary>
        ''' <remarks></remarks>
        Friend EstimateValue As Decimal
        ''' <summary>[實測值(ms)]</summary>
        ''' <remarks></remarks>
        Friend RealValue As Decimal
        Friend DieCount As Integer
        Friend ReadOnly Property AverageDiff As Decimal
            Get
                Dim mValue As Decimal
                If DieCount = 0 Then
                    mValue = 0
                Else
                    mValue = (RealValue - EstimateValue) / DieCount
                End If
                Return mValue
            End Get
        End Property
    End Structure



    ''' <summary>[紀錄各個Round運算+通訊時所需的時間]</summary>
    ''' <remarks></remarks>
    Private Structure sDispCompensation
        ''' <summary>[運算時間(ms)]</summary>
        ''' <remarks></remarks>
        Friend Computation As Decimal
        ''' <summary>[實際路徑與估測路徑的時間差補償]</summary>
        ''' <remarks></remarks>
        Friend MotionCompensation As Integer
    End Structure


#End Region

#Region "區域變數"
    ''' <summary>
    ''' 點膠運動路徑
    ''' </summary>
    ''' <remarks></remarks>
    Private mMotionDispPathRegister(enmStage.Max) As List(Of sPatternPath)
    ''' <summary>
    ''' 觸發運動路徑
    ''' </summary>
    ''' <remarks></remarks>
    Private mTriggerDispPathRegister(enmStage.Max) As List(Of sPatternPath)
    Private mTriggerGCmdParameter(enmStage.Max) As sTriggerGCmdParam
    Private mTriggerDispPathIndex(enmStage.Max) As sIndex                               '[紀錄執行到哪一個]
    Private mIsTransmissionResuming(enmStage.Max) As Boolean
    Private mDispType(enmStage.Max) As enmTriggerDispType
    Private mTriggerCmdFailCount(enmStage.Max) As Integer                               '[紀錄資料傳輸異常次數]
    Private m1stPath(enmStage.Max) As sDot3DPath                                        '[紀錄起始點座標]
    Private mlastPath(enmStage.Max) As sDot3DPath                                       '[紀錄終點座標]
    Private mMaxExtendDistance(enmStage.Max) As Decimal                                 '[記錄最長的延伸距離]
    Private mMaxBlendTime(enmStage.Max) As Decimal                                      '[記錄最長的BlendTime 單位:s]
    Private mDispProtect(enmStage.Max) As sProtectData                                  '[紀錄各自的相關座標]
    Private mStageState(enmStage.Max) As Boolean                                        '[藉此來判斷是否要檢查安全位置]
    Private mValveRespose(enmStage.Max) As sPicoValveCommandResponseData                '[Valve Controller之命令接收狀態]
    Private mValveCmdFailCount(enmStage.Max) As Integer                                 '[紀錄資料傳輸異常次數]
    Private mOpenTime(enmStage.Max) As Decimal                                          '[OpenTime in us]
    Private mValveOnTime(enmStage.Max) As Decimal                                       '[ValveOnTime in ms]
    Private mCloseTime(enmStage.Max) As Decimal                                         '[CloseTime in us]
    Private mValveOffTime(enmStage.Max) As Decimal                                      '[ValveOffTime in ms]
    Private mDispensingHistoryModel(enmStage.Max) As eDispHistoryModel                  '[內部判斷走哪一類型點膠]
    Private mDispensingList(enmStage.Max) As List(Of sDispensingDie)                    '[紀錄目前點膠是做哪個Round的哪幾顆]
    Private mDispPatternMemoryList(enmStage.Max) As List(Of SRecipePattern)              '[暫存目前TriggerBoard使用的Pattern(跨節點資料串接專用)]
    Private mDispPatternMemory(enmStage.Max) As SRecipePattern                           '[暫存目前TriggerBoard使用的Pattern]
    Private mDispTimeForRoundList(enmStage.Max) As List(Of sDispenseTimeForRound)        '[紀錄實際執行Round所花的時間與估測的時間]
    Private mDispTimeList(enmStage.Max) As List(Of List(Of sDispenseTimeForRound))       '[紀錄最近這筆Round的實際時與理論值]
    Private mDispTimeCompensation(enmStage.Max) As List(Of sDispCompensation)            '[紀錄Round需要補償的數值(ms)]
    Private mDispTimePatternMemory(enmStage.Max) As SRecipePattern                       '[暫存目前使用的Pattern(紀錄實際執行Round所花的時間與估測的時間)]
    Private mMotionPathCountList(enmStage.Max) As List(Of Integer)                       '[從第二個Round開始記錄，這是給路徑估測用的(估測到下一輪之前的運算量)]
    Private mTriggerPathCountList(enmStage.Max) As List(Of Integer)                      '[從第二個Round開始記錄，這是給路徑估測用的(估測到下一輪之前的運算量)]
    Private mTriggerPathMenory(enmStage.Max) As sPatternPath                             '[紀錄Trigger Path(給Dot用的)]

#End Region

    Public Sub ReDimStageState()
        '[Note]:先判斷機型 然後再根據機況來決定要Pass哪一側
        Select Case gSSystemParameter.MachineType
            Case enmMachineType.DCSW_800AQ
                mStageState(enmStage.No1) = True
                mStageState(enmStage.No2) = True
                mStageState(enmStage.No3) = True
                mStageState(enmStage.No4) = True

            Case enmMachineType.eDTS_2S2V, enmMachineType.DCS_500AD
                mStageState(enmStage.No1) = True
                mStageState(enmStage.No2) = True
                mStageState(enmStage.No3) = False
                mStageState(enmStage.No4) = False

            Case Else
                mStageState(enmStage.No1) = True
                mStageState(enmStage.No2) = False
                mStageState(enmStage.No3) = False
                mStageState(enmStage.No4) = False

        End Select

    End Sub

    ''' <summary>[判定點膠方式(一次點一顆或一次點多顆)]</summary>
    ''' <param name="Pattern"></param>
    ''' <param name="Mode"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function DetermineDispenseMultiDieMode(ByVal pattern As CRecipePattern, ByRef mode As enmDispMultiDie) As Boolean

        Dim mI As Integer
        Dim mJ As Integer
        Dim mMode As enmDispMultiDie

        mMode = enmDispMultiDie.MultiDie
        For mI = 0 To pattern.Round.Count - 1
            For mJ = 0 To pattern.Round(mI).CStep.Count - 1
                Select Case pattern.Round(mI).CStep(mJ).StepType
                    Case eStepFunctionType.ContiEnd
                        mMode = enmDispMultiDie.SingleDie

                End Select
            Next
        Next

        mode = mMode
        Return True

    End Function
    ''' <summary>[判定點膠方式(一次點一顆或一次點多顆)  根據目前round]</summary>
    ''' <param name="Pattern"></param>
    ''' <param name="Mode"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function DetermineDispenseMultiDieMode(ByVal pattern As CRecipePattern, ByRef mode As enmDispMultiDie, ByVal round As Integer) As Boolean

        Dim mJ As Integer
        Dim mMode As enmDispMultiDie

        mMode = enmDispMultiDie.MultiDie

        For mJ = 0 To pattern.Round(round + 1).CStep.Count - 1
            Select Case pattern.Round(round + 1).CStep(mJ).StepType
                '若 step有dot 或contiEnd 則跑singleDie Mode
                Case eStepFunctionType.ContiEnd, eStepFunctionType.Dots3D
                    mMode = enmDispMultiDie.SingleDie

            End Select
        Next

        mode = mMode
        Return True

    End Function

    ''' <summary>[判斷是否需要執行點膠程序]</summary>
    ''' <param name="sysParam"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function IsNeedDispeningProcess(ByVal sysParam As sSysParam) As Boolean

        Dim mI(enmStage.Max) As Integer
        Dim mJ(enmStage.Max) As Integer
        Dim mListCount(enmStage.Max) As Integer
        Dim mRoundCount(enmStage.Max) As Integer
        Dim mNode(enmStage.Max) As String
        Dim mPattern(enmStage.Max) As String

        For mListCount(sysParam.StageNo) = 0 To DispenseRelationshipList(sysParam.StageNo).Count - 1
            mNode(sysParam.StageNo) = DispenseRelationshipList(sysParam.StageNo)(mListCount(sysParam.StageNo)).NodeName
            mPattern(sysParam.StageNo) = DispenseRelationshipList(sysParam.StageNo)(mListCount(sysParam.StageNo)).PatternName

            For mRoundCount(sysParam.StageNo) = 0 To gCRecipe.Pattern(mPattern(sysParam.StageNo)).Round.Count - 1
                Select Case gCRecipe.SearchType
                    Case enmSearchType.Y_ZigZag
                        For mI(sysParam.StageNo) = 0 To UBound(gStageMap(sysParam.StageNo).Node(mNode(sysParam.StageNo)).SRecipePos, 1)
                            '[正向]
                            For mJ(sysParam.StageNo) = 0 To UBound(gStageMap(sysParam.StageNo).Node(mNode(sysParam.StageNo)).SRecipePos, 2)
                                '[說明]:需要點膠
                                If gStageMap(sysParam.StageNo).Node(mNode(sysParam.StageNo)).SRecipePos(mI(sysParam.StageNo), mJ(sysParam.StageNo)).IsByPassDispensingAction = False Then
                                    Return True
                                End If
                            Next mJ(sysParam.StageNo)
                        Next mI(sysParam.StageNo)

                    Case enmSearchType.Y_Snake
                        For mI(sysParam.StageNo) = 0 To UBound(gStageMap(sysParam.StageNo).Node(mNode(sysParam.StageNo)).SRecipePos, 1)
                            If mI(sysParam.StageNo) Mod 2 = 0 Then
                                '[正向]
                                For mJ(sysParam.StageNo) = 0 To UBound(gStageMap(sysParam.StageNo).Node(mNode(sysParam.StageNo)).SRecipePos, 2)
                                    '[說明]:需要點膠
                                    If gStageMap(sysParam.StageNo).Node(mNode(sysParam.StageNo)).SRecipePos(mI(sysParam.StageNo), mJ(sysParam.StageNo)).IsByPassDispensingAction = False Then
                                        Return True
                                    End If
                                Next mJ(sysParam.StageNo)
                            Else
                                '[逆向]
                                For mJ(sysParam.StageNo) = UBound(gStageMap(sysParam.StageNo).Node(mNode(sysParam.StageNo)).SRecipePos, 2) To 0 Step -1
                                    '[說明]:需要點膠
                                    If gStageMap(sysParam.StageNo).Node(mNode(sysParam.StageNo)).SRecipePos(mI(sysParam.StageNo), mJ(sysParam.StageNo)).IsByPassDispensingAction = False Then
                                        Return True
                                    End If
                                Next mJ(sysParam.StageNo)
                            End If
                        Next mI(sysParam.StageNo)

                    Case enmSearchType.X_Snake
                        For mJ(sysParam.StageNo) = 0 To UBound(gStageMap(sysParam.StageNo).Node(mNode(sysParam.StageNo)).SRecipePos, 2)
                            If mJ(sysParam.StageNo) Mod 2 = 0 Then
                                '[正向]
                                For mI(sysParam.StageNo) = 0 To UBound(gStageMap(sysParam.StageNo).Node(mNode(sysParam.StageNo)).SRecipePos, 1)
                                    '[說明]:需要點膠
                                    If gStageMap(sysParam.StageNo).Node(mNode(sysParam.StageNo)).SRecipePos(mI(sysParam.StageNo), mJ(sysParam.StageNo)).IsByPassDispensingAction = False Then
                                        Return True
                                    End If
                                Next
                            Else
                                '[逆向]
                                For mI(sysParam.StageNo) = UBound(gStageMap(sysParam.StageNo).Node(mNode(sysParam.StageNo)).SRecipePos, 1) To 0 Step -1
                                    '[說明]:需要點膠
                                    If gStageMap(sysParam.StageNo).Node(mNode(sysParam.StageNo)).SRecipePos(mI(sysParam.StageNo), mJ(sysParam.StageNo)).IsByPassDispensingAction = False Then
                                        Return True
                                    End If
                                Next
                            End If
                        Next

                    Case enmSearchType.X_ZigZag
                        For mJ(sysParam.StageNo) = 0 To UBound(gStageMap(sysParam.StageNo).Node(mNode(sysParam.StageNo)).SRecipePos, 2)
                            '[正向]
                            For mI(sysParam.StageNo) = 0 To UBound(gStageMap(sysParam.StageNo).Node(mNode(sysParam.StageNo)).SRecipePos, 1)
                                '[說明]:需要點膠
                                If gStageMap(sysParam.StageNo).Node(mNode(sysParam.StageNo)).SRecipePos(mI(sysParam.StageNo), mJ(sysParam.StageNo)).IsByPassDispensingAction = False Then
                                    Return True
                                End If
                            Next
                        Next

                End Select
            Next
        Next
        Return False
    End Function

    ''' <summary>[列出點膠順序]</summary>
    ''' <param name="recipe"></param>
    ''' <param name="stageNo"></param>
    ''' <param name="nodeName"></param>
    ''' <param name="patternName"></param>
    ''' <param name="dispList"></param>
    ''' <param name="IsClearDsipList"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function DispenseSortList(ByVal recipe As CRecipe, ByVal stageNo As enmStage, ByVal nodeName As String, ByVal patternName As String, ByRef dispList(,) As List(Of sDispArrayIndex), Optional ByVal isClearDsipList As Boolean = True) As Boolean

        Dim mI As Integer
        Dim mJ As Integer
        Dim mK As Integer
        Dim mIndex As sDispArrayIndex
        Dim mExchangeIndex As sDispArrayIndex
        Dim mIsNeedCheck As Boolean

        For mK = 0 To recipe.Pattern(patternName).Round.Count - 1
            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item
            If isClearDsipList = True Then
                dispList(stageNo, mK).Clear()
            End If

            Select Case recipe.SearchType
                Case enmSearchType.Y_ZigZag
                    mIsNeedCheck = False
                    For mI = 0 To UBound(gStageMap(stageNo).Node(nodeName).SRecipePos, 1)
                        '[正向]
                        For mJ = 0 To UBound(gStageMap(stageNo).Node(nodeName).SRecipePos, 2)
                            '[說明]:需要點膠
                            If gStageMap(stageNo).Node(nodeName).SRecipePos(mI, mJ).IsByPassDispensingAction = False And gStageMap(stageNo).Node(nodeName).Round(mK).DispensingStatus(mI, mJ) = eDispensingStatus.None Then
                                mIsNeedCheck = True
                                mIndex.IndexX = mI
                                mIndex.IndexY = mJ
                                'mIndex.NodeName = nodeName
                                'mIndex.PatternName = patternName
                                mIndex.IsLastRowColumn = False
                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                dispList(stageNo, mK).Capacity = dispList(stageNo, mK).Count + 1
                                dispList(stageNo, mK).Add(mIndex)
                                'Debug.Print("DispList(" & stageNo & "," & mK & "," & mI & "," & mJ & ")")
                            End If
                        Next mJ
                        If mIsNeedCheck = True Then
                            '[說明]:取出最後一筆資料，並更改IsLastRowColumn
                            mExchangeIndex = dispList(stageNo, mK).Item(dispList(stageNo, mK).Count - 1)
                            mExchangeIndex.IsLastRowColumn = True
                            '[說明]:刪除該筆資料，在加更改完的資料回去
                            dispList(stageNo, mK).RemoveAt(dispList(stageNo, mK).Count - 1)
                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                            dispList(stageNo, mK).Capacity = dispList(stageNo, mK).Count + 1
                            dispList(stageNo, mK).Add(mExchangeIndex)
                        End If
                    Next mI

                Case enmSearchType.Y_Snake
                    For mI = 0 To UBound(gStageMap(stageNo).Node(nodeName).SRecipePos, 1)
                        mIsNeedCheck = False
                        If mI Mod 2 = 0 Then
                            '[正向]
                            For mJ = 0 To UBound(gStageMap(stageNo).Node(nodeName).SRecipePos, 2)
                                '[說明]:需要點膠
                                If gStageMap(stageNo).Node(nodeName).SRecipePos(mI, mJ).IsByPassDispensingAction = False And gStageMap(stageNo).Node(nodeName).Round(mK).DispensingStatus(mI, mJ) = eDispensingStatus.None Then
                                    mIsNeedCheck = True
                                    mIndex.IndexX = mI
                                    mIndex.IndexY = mJ
                                    'mIndex.NodeName = nodeName
                                    'mIndex.PatternName = patternName
                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                    dispList(stageNo, mK).Capacity = dispList(stageNo, mK).Count + 1
                                    dispList(stageNo, mK).Add(mIndex)
                                    'Debug.Print("DispList(" & stageNo & "," & mK & "," & mI & "," & mJ & ")")
                                End If
                            Next mJ
                            If mIsNeedCheck = True Then
                                '[說明]:取出最後一筆資料，並更改IsLastRowColumn
                                mExchangeIndex = dispList(stageNo, mK).Item(dispList(stageNo, mK).Count - 1)
                                mExchangeIndex.IsLastRowColumn = True
                                '[說明]:刪除該筆資料，在加更改完的資料回去
                                dispList(stageNo, mK).RemoveAt(dispList(stageNo, mK).Count - 1)
                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                dispList(stageNo, mK).Capacity = dispList(stageNo, mK).Count + 1
                                dispList(stageNo, mK).Add(mExchangeIndex)
                            End If
                        Else
                            '[逆向]
                            For mJ = UBound(gStageMap(stageNo).Node(nodeName).SRecipePos, 2) To 0 Step -1
                                '[說明]:需要點膠
                                If gStageMap(stageNo).Node(nodeName).SRecipePos(mI, mJ).IsByPassDispensingAction = False And gStageMap(stageNo).Node(nodeName).Round(mK).DispensingStatus(mI, mJ) = eDispensingStatus.None Then
                                    mIsNeedCheck = True
                                    mIndex.IndexX = mI
                                    mIndex.IndexY = mJ
                                    'mIndex.NodeName = nodeName
                                    'mIndex.PatternName = patternName
                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                    dispList(stageNo, mK).Capacity = dispList(stageNo, mK).Count + 1
                                    dispList(stageNo, mK).Add(mIndex)
                                    'Debug.Print("DispList(" & stageNo & "," & mK & "," & mI & "," & mJ & ")")
                                End If
                            Next mJ
                            If mIsNeedCheck = True Then
                                '[說明]:取出最後一筆資料，並更改IsLastRowColumn
                                mExchangeIndex = dispList(stageNo, mK).Item(dispList(stageNo, mK).Count - 1)
                                mExchangeIndex.IsLastRowColumn = True
                                '[說明]:刪除該筆資料，在加更改完的資料回去
                                dispList(stageNo, mK).RemoveAt(dispList(stageNo, mK).Count - 1)
                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                dispList(stageNo, mK).Capacity = dispList(stageNo, mK).Count + 1
                                dispList(stageNo, mK).Add(mExchangeIndex)
                            End If
                        End If
                    Next mI

                Case enmSearchType.X_Snake
                    For mJ = 0 To UBound(gStageMap(stageNo).Node(nodeName).SRecipePos, 2)
                        mIsNeedCheck = False
                        If mJ Mod 2 = 0 Then
                            '[正向]
                            For mI = 0 To UBound(gStageMap(stageNo).Node(nodeName).SRecipePos, 1)
                                '[說明]:需要點膠
                                If gStageMap(stageNo).Node(nodeName).SRecipePos(mI, mJ).IsByPassDispensingAction = False And gStageMap(stageNo).Node(nodeName).Round(mK).DispensingStatus(mI, mJ) = eDispensingStatus.None Then
                                    mIsNeedCheck = True
                                    mIndex.IndexX = mI
                                    mIndex.IndexY = mJ
                                    'mIndex.NodeName = nodeName
                                    'mIndex.PatternName = patternName
                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                    dispList(stageNo, mK).Capacity = dispList(stageNo, mK).Count + 1
                                    dispList(stageNo, mK).Add(mIndex)
                                    'Debug.Print("DispList(" & stageNo & "," & mK & "," & mI & "," & mJ & ")")
                                End If
                            Next
                            If mIsNeedCheck = True Then
                                '[說明]:取出最後一筆資料，並更改IsLastRowColumn
                                mExchangeIndex = dispList(stageNo, mK).Item(dispList(stageNo, mK).Count - 1)
                                mExchangeIndex.IsLastRowColumn = True
                                '[說明]:刪除該筆資料，在加更改完的資料回去
                                dispList(stageNo, mK).RemoveAt(dispList(stageNo, mK).Count - 1)
                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                dispList(stageNo, mK).Capacity = dispList(stageNo, mK).Count + 1
                                dispList(stageNo, mK).Add(mExchangeIndex)
                            End If
                        Else
                            '[逆向]
                            For mI = UBound(gStageMap(stageNo).Node(nodeName).SRecipePos, 1) To 0 Step -1
                                '[說明]:需要點膠
                                If gStageMap(stageNo).Node(nodeName).SRecipePos(mI, mJ).IsByPassDispensingAction = False And gStageMap(stageNo).Node(nodeName).Round(mK).DispensingStatus(mI, mJ) = eDispensingStatus.None Then
                                    mIsNeedCheck = True
                                    mIndex.IndexX = mI
                                    mIndex.IndexY = mJ
                                    'mIndex.NodeName = nodeName
                                    'mIndex.PatternName = patternName
                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                    dispList(stageNo, mK).Capacity = dispList(stageNo, mK).Count + 1
                                    dispList(stageNo, mK).Add(mIndex)
                                    'Debug.Print("DispList(" & stageNo & "," & mK & "," & mI & "," & mJ & ")")
                                End If
                            Next
                            If mIsNeedCheck = True Then
                                '[說明]:取出最後一筆資料，並更改IsLastRowColumn
                                mExchangeIndex = dispList(stageNo, mK).Item(dispList(stageNo, mK).Count - 1)
                                mExchangeIndex.IsLastRowColumn = True
                                '[說明]:刪除該筆資料，在加更改完的資料回去
                                dispList(stageNo, mK).RemoveAt(dispList(stageNo, mK).Count - 1)
                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                dispList(stageNo, mK).Capacity = dispList(stageNo, mK).Count + 1
                                dispList(stageNo, mK).Add(mExchangeIndex)
                            End If
                        End If
                    Next

                Case enmSearchType.X_ZigZag
                    For mJ = 0 To UBound(gStageMap(stageNo).Node(nodeName).SRecipePos, 2)
                        mIsNeedCheck = False
                        '[正向]
                        For mI = 0 To UBound(gStageMap(stageNo).Node(nodeName).SRecipePos, 1)
                            '[說明]:需要點膠
                            If gStageMap(stageNo).Node(nodeName).SRecipePos(mI, mJ).IsByPassDispensingAction = False And gStageMap(stageNo).Node(nodeName).Round(mK).DispensingStatus(mI, mJ) = eDispensingStatus.None Then
                                mIsNeedCheck = True
                                mIndex.IndexX = mI
                                mIndex.IndexY = mJ
                                'mIndex.NodeName = nodeName
                                'mIndex.PatternName = patternName
                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                dispList(stageNo, mK).Capacity = dispList(stageNo, mK).Count + 1
                                dispList(stageNo, mK).Add(mIndex)
                                'Debug.Print("DispList(" & stageNo & "," & mK & "," & mI & "," & mJ & ")")
                            End If
                        Next
                        If mIsNeedCheck = True Then
                            '[說明]:取出最後一筆資料，並更改IsLastRowColumn
                            mExchangeIndex = dispList(stageNo, mK).Item(dispList(stageNo, mK).Count - 1)
                            mExchangeIndex.IsLastRowColumn = True
                            '[Note]:刪除該筆資料，在加更改完的資料回去
                            dispList(stageNo, mK).RemoveAt(dispList(stageNo, mK).Count - 1)
                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                            dispList(stageNo, mK).Capacity = dispList(stageNo, mK).Count + 1
                            dispList(stageNo, mK).Add(mExchangeIndex)
                        End If
                    Next

            End Select
        Next
        Return True
    End Function

    Private Function EstimatePathTime(ByVal dispParam As sDispParam, ByVal dispList As List(Of sMotionPathRegister), ByVal m1stPos As sDot3DPath, ByRef time As Decimal) As Boolean
        Dim mI As Integer
        Dim mDistance As Decimal
        Dim mTime As Decimal
        Dim mTotalTime As Decimal
        Dim mLastPos As Premtek.sPos
        Dim mPath As sMotionPathRegister
        Dim mDisDx As Decimal
        Dim mDisDy As Decimal
        mTotalTime = 0

        mLastPos.PosX = m1stPos.PosX
        mLastPos.PosY = m1stPos.PosY

        For mI = 0 To dispList.Count - 1
            mPath = dispList(mI)
            Select Case mPath.PathType
                Case ePathRegisterType.Arc2D
                    '[Note]:計算弧長
                    mDisDx = mPath.Arc2D.CenterPosX - mPath.Arc2D.EndPosX
                    mDisDy = mPath.Arc2D.CenterPosY - mPath.Arc2D.EndPosY
                    '[Note]:弧長=2*PI*R/360
                    '    -->    =PI*R/180
                    mDistance = CDec(Math.Sqrt((mDisDx * mDisDx) + (mDisDy * mDisDy)) * Math.PI * mPath.Arc2D.Angle / 180)
                    Call EstimateMovingTime(dispParam.Acc, dispParam.Dec, mDistance, mPath.Arc2D.Velocity, mTime)
                    mTotalTime = mTotalTime + mTime

                    mLastPos.PosX = mPath.Arc2D.EndPosX
                    mLastPos.PosY = mPath.Arc2D.EndPosY

                Case ePathRegisterType.Dot3D
                    mDisDx = mPath.Dot3D.PosX - mLastPos.PosX
                    mDisDy = mPath.Dot3D.PosY - mLastPos.PosY
                    mDistance = Math.Sqrt((mDisDx * mDisDx) + (mDisDy * mDisDy))
                    Call EstimateMovingTime(dispParam.Acc, dispParam.Dec, mDistance, mPath.Dot3D.Velocity, mTime)
                    mTotalTime = mTotalTime + mTime

                    mLastPos.PosX = mPath.Dot3D.PosX
                    mLastPos.PosY = mPath.Dot3D.PosY

                Case ePathRegisterType.Wait
                    mTotalTime = mTotalTime + mPath.Wait.DwellTimeInMs

            End Select
        Next
        time = mTotalTime
        Return True

    End Function

    ''' <summary>[將Pattern轉成Path(給路徑估測用)]</summary>
    ''' <param name="pattern"></param>
    ''' <param name="dispPathRegister"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function PatternConverToPathRegister(ByVal stageNo As enmStage, ByVal recipe As CRecipe, ByVal pattern As CRecipePattern, ByVal roundNo As Integer, ByRef dispPathRegister As List(Of sPatternPath)) As Boolean

        Dim mI(enmStage.Max) As Integer
        Dim mJ(enmStage.Max) As Integer
        Dim mIsExtendOn(enmStage.Max) As Boolean
        Dim mPath(enmStage.Max) As sPatternPath
        Dim mdispPathRegister(enmStage.Max) As List(Of sPatternPath)
        Dim mIsFristPathInDie(enmStage.Max) As Boolean

        mdispPathRegister(stageNo) = New List(Of sPatternPath)
        mdispPathRegister(stageNo).Clear()
        mIsFristPathInDie(stageNo) = True

        For mI(stageNo) = 0 To pattern.Round(roundNo).StepCount - 1
            Select Case pattern.Round(roundNo).CStep(mI(stageNo)).StepType
                Case eStepFunctionType.ContiStart, eStepFunctionType.ContiEnd
                    mIsExtendOn(stageNo) = True

                Case eStepFunctionType.ExtendOn
                    mIsExtendOn(stageNo) = True

                Case eStepFunctionType.ExtendOff
                    mIsExtendOn(stageNo) = False

                Case eStepFunctionType.Wait
                    mPath(stageNo).PathType = ePathType.Wait
                    mPath(stageNo).Wait.DwellTimeInMs = pattern.Round(roundNo).CStep(mI(stageNo)).Wait.DwellTimeInMs
                    mPath(stageNo).Wait.IsDispense = False
                    mPath(stageNo).Wait.IsExtendOn = mIsExtendOn(stageNo)
                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                    mdispPathRegister(stageNo).Capacity = mdispPathRegister(stageNo).Count + 1
                    mdispPathRegister(stageNo).Add(mPath(stageNo))

                Case eStepFunctionType.Arc2D
                    mPath(stageNo).PathType = ePathType.Arc2D
                    With pattern.Round(roundNo).CStep(mI(stageNo)).Arc2D
                        mPath(stageNo).Arc2D.ArcDirection = .Direction
                        mPath(stageNo).Arc2D.Angle = .Angle
                        mPath(stageNo).Arc2D.StartPosX = .StartPosX
                        mPath(stageNo).Arc2D.StartPosY = .StartPosY
                        mPath(stageNo).Arc2D.StartPosZ = 0
                        mPath(stageNo).Arc2D.CenterPosX = .CenterPosX
                        mPath(stageNo).Arc2D.CenterPosY = .CenterPosY
                        mPath(stageNo).Arc2D.CenterPosZ = 0
                        mPath(stageNo).Arc2D.EndPosX = .EndPosX
                        mPath(stageNo).Arc2D.EndPosY = .EndPosY
                        mPath(stageNo).Arc2D.EndPosZ = 0
                        mPath(stageNo).Arc2D.WeightControl = .WeightControl

                    End With
                    mPath(stageNo).Arc2D.IsDispense = True
                    mPath(stageNo).Arc2D.Velocity = 0
                    mPath(stageNo).Arc2D.IsExtendOn = mIsExtendOn(stageNo)
                    mPath(stageNo).Arc2D.IsFristPathInDie = mIsFristPathInDie(stageNo)

                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                    mdispPathRegister(stageNo).Capacity = mdispPathRegister(stageNo).Count + 1
                    mdispPathRegister(stageNo).Add(mPath(stageNo))
                    If mIsFristPathInDie(stageNo) = True Then
                        mIsFristPathInDie(stageNo) = False
                    End If

                Case eStepFunctionType.Circle2D
                    mPath(stageNo).PathType = ePathType.Arc2D
                    With pattern.Round(roundNo).CStep(mI(stageNo)).Circle2D
                        mPath(stageNo).Arc2D.ArcDirection = eArcDirection.CW
                        mPath(stageNo).Arc2D.Angle = 360
                        mPath(stageNo).Arc2D.CenterPosX = .CenterPosX
                        mPath(stageNo).Arc2D.CenterPosY = .CenterPosY
                        mPath(stageNo).Arc2D.CenterPosZ = 0
                        mPath(stageNo).Arc2D.EndPosX = .EndPosX
                        mPath(stageNo).Arc2D.EndPosY = .EndPosY
                        mPath(stageNo).Arc2D.EndPosZ = 0
                        mPath(stageNo).Arc2D.StartPosX = .StartPosX
                        mPath(stageNo).Arc2D.StartPosY = .StartPosY
                        mPath(stageNo).Arc2D.StartPosZ = 0
                        mPath(stageNo).Arc2D.WeightControl = .WeightControl
                    End With
                    mPath(stageNo).Arc2D.IsDispense = True
                    mPath(stageNo).Arc2D.Velocity = 0
                    mPath(stageNo).Arc2D.IsFristPathInDie = mIsFristPathInDie(stageNo)
                    mPath(stageNo).Arc2D.IsExtendOn = mIsExtendOn(stageNo)
                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                    mdispPathRegister(stageNo).Capacity = mdispPathRegister(stageNo).Count + 1
                    mdispPathRegister(stageNo).Add(mPath(stageNo))
                    If mIsFristPathInDie(stageNo) = True Then
                        mIsFristPathInDie(stageNo) = False
                    End If

                Case eStepFunctionType.Dots3D
                    mPath(stageNo).PathType = ePathType.Dot3D
                    With pattern.Round(roundNo).CStep(mI(stageNo)).Dots3D
                        mPath(stageNo).Dot3D.PosX = .PosX
                        mPath(stageNo).Dot3D.PosY = .PosY
                        mPath(stageNo).Dot3D.PosZ = .PosZ
                        mPath(stageNo).Dot3D.WeightControl = .WeightControl
                    End With
                    mPath(stageNo).Dot3D.IsDispense = True
                    mPath(stageNo).Dot3D.Velocity = 0
                    mPath(stageNo).Dot3D.IsFristPathInDie = mIsFristPathInDie(stageNo)
                    mPath(stageNo).Dot3D.IsExtendOn = mIsExtendOn(stageNo)
                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                    mdispPathRegister(stageNo).Capacity = mdispPathRegister(stageNo).Count + 1
                    mdispPathRegister(stageNo).Add(mPath(stageNo))
                    If mIsFristPathInDie(stageNo) = True Then
                        mIsFristPathInDie(stageNo) = False
                    End If

                Case eStepFunctionType.Line3D
                    mPath(stageNo).PathType = ePathType.Line3D
                    With pattern.Round(roundNo).CStep(mI(stageNo)).Line3D
                        mPath(stageNo).Line3D.StartPosX = .StartPosX
                        mPath(stageNo).Line3D.StartPosY = .StartPosY
                        mPath(stageNo).Line3D.StartPosZ = .StartPosZ
                        mPath(stageNo).Line3D.EndPosX = .EndPosX
                        mPath(stageNo).Line3D.EndPosY = .EndPosY
                        mPath(stageNo).Line3D.EndPosZ = .EndPosZ
                        mPath(stageNo).Line3D.WeightControl = .WeightControl
                    End With
                    mPath(stageNo).Line3D.IsDispense = True
                    mPath(stageNo).Line3D.Velocity = 0
                    mPath(stageNo).Line3D.IsFristPathInDie = mIsFristPathInDie(stageNo)
                    mPath(stageNo).Line3D.IsExtendOn = mIsExtendOn(stageNo)
                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                    mdispPathRegister(stageNo).Capacity = mdispPathRegister(stageNo).Count + 1
                    mdispPathRegister(stageNo).Add(mPath(stageNo))
                    If mIsFristPathInDie(stageNo) = True Then
                        mIsFristPathInDie(stageNo) = False
                    End If

                Case eStepFunctionType.Arc3D
                    mPath(stageNo).PathType = ePathType.Arc2D
                    With pattern.Round(roundNo).CStep(mI(stageNo)).Arc3D
                        mPath(stageNo).Arc2D.ArcDirection = .Direction
                        mPath(stageNo).Arc2D.Angle = .Angle
                        mPath(stageNo).Arc2D.CenterPosX = .CenterPosX
                        mPath(stageNo).Arc2D.CenterPosY = .CenterPosY
                        mPath(stageNo).Arc2D.CenterPosZ = .CenterPosZ
                        mPath(stageNo).Arc2D.EndPosX = .EndPosX
                        mPath(stageNo).Arc2D.EndPosY = .EndPosY
                        mPath(stageNo).Arc2D.EndPosZ = .EndPosZ
                        mPath(stageNo).Arc2D.WeightControl = .WeightControl
                    End With
                    mPath(stageNo).Arc2D.IsDispense = True
                    mPath(stageNo).Arc2D.Velocity = 0
                    mPath(stageNo).Arc2D.IsFristPathInDie = mIsFristPathInDie(stageNo)
                    mPath(stageNo).Arc2D.IsExtendOn = mIsExtendOn(stageNo)
                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                    mdispPathRegister(stageNo).Capacity = mdispPathRegister(stageNo).Count + 1
                    mdispPathRegister(stageNo).Add(mPath(stageNo))
                    If mIsFristPathInDie(stageNo) = True Then
                        mIsFristPathInDie(stageNo) = False
                    End If

                Case eStepFunctionType.Circle3D
                    mPath(stageNo).PathType = ePathType.Arc2D
                    With pattern.Round(roundNo).CStep(mI(stageNo)).Circle3D
                        mPath(stageNo).Arc2D.ArcDirection = eArcDirection.CW
                        mPath(stageNo).Arc2D.Angle = 360
                        mPath(stageNo).Arc2D.CenterPosX = .CenterPosX
                        mPath(stageNo).Arc2D.CenterPosY = .CenterPosY
                        mPath(stageNo).Arc2D.CenterPosZ = .CenterPosZ
                        mPath(stageNo).Arc2D.EndPosX = .EndPosX
                        mPath(stageNo).Arc2D.EndPosY = .EndPosY
                        mPath(stageNo).Arc2D.EndPosZ = .EndPosZ
                        mPath(stageNo).Arc2D.StartPosX = .StartPosX
                        mPath(stageNo).Arc2D.StartPosY = .StartPosY
                        mPath(stageNo).Arc2D.StartPosZ = .StartPosZ
                        mPath(stageNo).Arc2D.WeightControl = .WeightControl
                    End With
                    mPath(stageNo).Arc2D.IsDispense = True
                    mPath(stageNo).Arc2D.Velocity = 0
                    mPath(stageNo).Arc2D.IsFristPathInDie = mIsFristPathInDie(stageNo)
                    mPath(stageNo).Arc2D.IsExtendOn = mIsExtendOn(stageNo)
                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                    mdispPathRegister(stageNo).Capacity = mdispPathRegister(stageNo).Count + 1
                    mdispPathRegister(stageNo).Add(mPath(stageNo))
                    If mIsFristPathInDie(stageNo) = True Then
                        mIsFristPathInDie(stageNo) = False
                    End If

                Case eStepFunctionType.Move3D
                    mPath(stageNo).PathType = ePathType.Line3D
                    With pattern.Round(roundNo).CStep(mI(stageNo)).Move3D
                        mPath(stageNo).Dot3D.PosX = .EndPosX
                        mPath(stageNo).Dot3D.PosY = .EndPosY
                        mPath(stageNo).Dot3D.PosZ = .EndPosZ
                    End With
                    mPath(stageNo).Dot3D.IsDispense = False
                    mPath(stageNo).Dot3D.Velocity = 0
                    mPath(stageNo).Dot3D.IsFristPathInDie = mIsFristPathInDie(stageNo)
                    mPath(stageNo).Dot3D.IsExtendOn = False
                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                    mdispPathRegister(stageNo).Capacity = mdispPathRegister(stageNo).Count + 1
                    mdispPathRegister(stageNo).Add(mPath(stageNo))
                    If mIsFristPathInDie(stageNo) = True Then
                        mIsFristPathInDie(stageNo) = False
                    End If

                Case Else
                    '[Note]:暫不處理
            End Select
        Next

        dispPathRegister = mdispPathRegister(stageNo)
        Return True
    End Function

    ''' <summary>[推估走到哪一顆就要回頭-->從所有Round中找出最小公約數(限用於時間型估測)]</summary>
    ''' <param name="recipe"></param>
    ''' <param name="stageNo"></param>
    ''' <param name="nodeName"></param>
    ''' <param name="dispList"></param>
    ''' <param name="startIndex"></param>
    ''' <param name="pattern"></param>
    ''' <param name="endIndex"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function OptimalPath(ByVal dispParam As sDispParam, ByVal recipe As CRecipe, ByVal stageNo As enmStage, ByVal nodeName As String, ByVal dispList As List(Of sDispArrayIndex), ByVal startIndex As Integer, ByVal pattern As CRecipePattern, ByRef endIndex As Integer, ByRef maxExtendDistance As Decimal) As Boolean

        Dim mI As Integer
        Dim mMinCount As Integer = Integer.MaxValue 'Soni / 2017.08.25 要給預設值, 不然都是0.
        Dim mMaxCount As Integer
        Dim mValue As Integer
        Dim mDieCount As Integer
        Dim mEstimateTime() As List(Of Decimal)
        Dim mDispTimeForRound As New sDispenseTimeForRound
        Dim mDispCompensation As New sDispCompensation
        Dim mProcessTime As Decimal                             '[紀錄該Round可用多少時間]
        Dim mTime As New List(Of Decimal)
        Dim mRound(enmStage.Max) As Integer
        Dim mK(enmStage.Max) As Integer
        Dim mMaxExtendDistance(enmStage.Max) As Decimal

        If IsNothing(mDispTimeCompensation(stageNo)) = True Then
            mDispTimeCompensation(stageNo) = New List(Of sDispCompensation)
        End If


        '[Note]:-1是指最後那一Round不計
        mRound(stageNo) = pattern.Round.Count - 1
        '[Note]:更新
        If mDispTimeCompensation(stageNo).Count > mRound(stageNo) Then
            For mK(stageNo) = 0 To mDispTimeCompensation(stageNo).Count - mRound(stageNo) - 1
                mDispTimeCompensation(stageNo).RemoveAt(mDispTimeCompensation(stageNo).Count - 1)
            Next
        Else
            For mK(stageNo) = 0 To mRound(stageNo) - mDispTimeCompensation(stageNo).Count - 1
                '[Note]:一開始估測時，寧願等久一點也不要有任何逾時之現象(時間到了卻還沒回去點下一Round)
                '       運算時間估測抓500ms、路徑時間補償抓100ms
                mDispCompensation.Computation = 500
                mDispCompensation.MotionCompensation = 100
                mDispTimeCompensation(stageNo).Add(mDispCompensation)
            Next
        End If

        mDispTimeForRoundList(stageNo) = Nothing
        mDispTimeForRoundList(stageNo) = New List(Of sDispenseTimeForRound)
        mDispTimeForRoundList(stageNo).Clear()
        mMinCount = 65536
        mMaxCount = 0
        mProcessTime = 0

        If IsNothing(mMotionPathCountList(stageNo)) = True Then
            mMotionPathCountList(stageNo) = New List(Of Integer)
        Else
            mMotionPathCountList(stageNo).Clear()
        End If

        If IsNothing(mTriggerPathCountList(stageNo)) = True Then
            mTriggerPathCountList(stageNo) = New List(Of Integer)
        Else
            mTriggerPathCountList(stageNo).Clear()
        End If

        If pattern.Round.Count = 1 Then
            '[Note]:只有一道流程，就是全部串起來一次做啦，根本沒有回頭的這件事情
            mProcessTime = 0
            Call EstimatePath(dispParam, recipe, stageNo, nodeName, dispList, startIndex, pattern, mI, enmDispMultiDie.MultiDie, mProcessTime, mValue, , mMaxExtendDistance(stageNo))
            If mValue < mMinCount Then
                mMinCount = mValue
            End If
            maxExtendDistance = mMaxExtendDistance(stageNo)
            endIndex = mMinCount
            Return True
        Else
            '[Note]:估算時間只需要算前幾道回頭的時間，最後一道都做完了沒有回頭的需求，所以最後一道時間的估算就可省略
            ReDim mEstimateTime(pattern.Round.Count - 2)

            Select Case recipe.DispTimeModel
                Case eDispTimeModel.Max
                    For mI = 0 To pattern.Round.Count - 2
                        If pattern.Round(mI).ProcessTime > mProcessTime Then
                            mProcessTime = pattern.Round(mI).ProcessTime
                        End If
                    Next
                    '[Note]:先算最多要做幾顆
                    For mI = 0 To pattern.Round.Count - 2
                        Call EstimatePath(dispParam, recipe, stageNo, nodeName, dispList, startIndex, pattern, mI, enmDispMultiDie.MultiDie, mProcessTime, mValue, mTime, mMaxExtendDistance(stageNo))
                        If mValue > mMaxCount Then
                            mMaxCount = mValue
                        End If
                    Next
                    '[Note]:根據算出來的顆數，推算要花多少時間
                    For mI = 0 To pattern.Round.Count - 2
                        Call EstimateTotalPath(dispParam, recipe, stageNo, nodeName, dispList, startIndex, mMaxCount, pattern, mI, enmDispMultiDie.MultiDie, mProcessTime, mTime)
                        mEstimateTime(mI) = mTime
                    Next
                    mDieCount = mMaxCount - startIndex + 1

                    '[Note]:先產生出估測時間，在與實際時間做
                    For mI = 0 To pattern.Round.Count - 2
                        mDispTimeForRoundList(stageNo).Capacity = mDispTimeForRoundList(stageNo).Count + 1
                        '[Note]:sec-->ms
                        '[Note]:先加保護，但要查源頭是什麼原因
                        If mEstimateTime(mI).Count < mDieCount Then
                            mDispTimeForRound.EstimateValue = mEstimateTime(mI).Item(mEstimateTime(mI).Count - 1) * 1000
                        Else
                            mDispTimeForRound.EstimateValue = mEstimateTime(mI).Item(mDieCount - 1) * 1000
                        End If

                        mDispTimeForRound.DieCount = mDieCount
                        mDispTimeForRoundList(stageNo).Add(mDispTimeForRound)
                    Next
                    endIndex = mMaxCount
                    Return True

                Case eDispTimeModel.Min
                    '先算最少要做幾顆 Soni / 2017.08.24
                    For mI = 0 To pattern.Round.Count - 2
                        Call EstimatePath(dispParam, recipe, stageNo, nodeName, dispList, startIndex, pattern, mI, enmDispMultiDie.MultiDie, pattern.Round(mI).ProcessTime, mValue, mTime, mMaxExtendDistance(stageNo))
                        mEstimateTime(mI) = mTime
                        If mValue < mMinCount Then
                            mMinCount = mValue
                        End If
                    Next

                    mDieCount = mMinCount - startIndex + 1

                    '[Note]:先產生出估測時間，在與實際時間做
                    For mI = 0 To pattern.Round.Count - 2
                        mDispTimeForRoundList(stageNo).Capacity = mDispTimeForRoundList(stageNo).Count + 1
                        '[Note]:sec-->ms
                        '[Note]:先加保護，但要查源頭是什麼原因
                        If mEstimateTime(mI).Count < mDieCount Then
                            mDispTimeForRound.EstimateValue = mEstimateTime(mI).Item(mEstimateTime(mI).Count - 1) * 1000
                        Else
                            mDispTimeForRound.EstimateValue = mEstimateTime(mI).Item(mDieCount - 1) * 1000
                        End If

                        mDispTimeForRound.DieCount = mDieCount
                        mDispTimeForRoundList(stageNo).Add(mDispTimeForRound)
                    Next
                    endIndex = mMinCount
                    Return True

            End Select
        End If

        Return False
    End Function

    Private Function GetFristPosForRound(ByVal stageNo As enmStage, ByVal dispParam As sDispParam, ByVal recipe As CRecipe, ByVal pattern As CRecipePattern, ByVal roundNo As Integer, ByRef pos As Premtek.sPos, ByRef velocity As Decimal) As Boolean

        Dim mI(enmStage.Max) As Integer
        Dim mJ(enmStage.Max) As Integer
        Dim mPath(enmStage.Max) As sPatternPath
        Dim mCycleTimes As Decimal
        Dim mDotWeight As Decimal
        Dim mdx As Decimal
        Dim mdy As Decimal
        Dim mr As Decimal
        Dim mRunUp As sExtendParam
        Dim mArcExtendOffsetCutIn As Premtek.sPos
        Dim mArcExtendOffsetCutOut As Premtek.sPos
        Dim m1stPos As Premtek.sPos
        Dim mExtendOffset As Premtek.sPos
        Dim mVelocity As Decimal

        'Step1:取出CycleTime
        If gJetValveDB.ContainsKey(recipe.StageParts(stageNo).ValveName(dispParam.SelectValve)) = True Then
            Select Case gJetValveDB(recipe.StageParts(stageNo).ValveName(dispParam.SelectValve)).ValveModel
                Case eValveModel.PicoPulse
                    mCycleTimes = gJetValveDB(recipe.StageParts(stageNo).ValveName(dispParam.SelectValve)).PicoTouch.CycleTime
                Case eValveModel.Advanjet
                    mCycleTimes = gJetValveDB(recipe.StageParts(stageNo).ValveName(dispParam.SelectValve)).Advanjet.CycleTime
            End Select
        Else
            Return False
        End If

        '[Note]:取出單點Dot重量
        mDotWeight = gCRecipe.StageParts(stageNo).AverageWeightPerDot(dispParam.SelectValve)

        '[Note]:起始路徑都會強制做延伸，所以不用判斷是否有延伸
        For mI(stageNo) = 0 To pattern.Round(roundNo).StepCount - 1
            Select Case pattern.Round(roundNo).CStep(mI(stageNo)).StepType
                Case eStepFunctionType.Arc2D
                    With pattern.Round(roundNo).CStep(mI(stageNo)).Arc2D
                        mPath(stageNo).PathType = ePathType.Arc2D
                        mPath(stageNo).Arc2D.ArcDirection = .Direction
                        mPath(stageNo).Arc2D.Angle = .Angle
                        mPath(stageNo).Arc2D.StartPosX = .StartPosX
                        mPath(stageNo).Arc2D.StartPosY = .StartPosY
                        mPath(stageNo).Arc2D.StartPosZ = 0
                        mPath(stageNo).Arc2D.CenterPosX = .CenterPosX
                        mPath(stageNo).Arc2D.CenterPosY = .CenterPosY
                        mPath(stageNo).Arc2D.CenterPosZ = 0
                        mPath(stageNo).Arc2D.EndPosX = .EndPosX
                        mPath(stageNo).Arc2D.EndPosY = .EndPosY
                        mPath(stageNo).Arc2D.EndPosZ = 0
                        mPath(stageNo).Arc2D.WeightControl = .WeightControl
                    End With
                    Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes, mDotWeight, mPath(stageNo), mRunUp)
                    Call EstimateArcExtendPath(mPath(stageNo), mRunUp.Distance, mArcExtendOffsetCutIn, mArcExtendOffsetCutOut)
                    m1stPos.PosX = mPath(stageNo).Arc2D.StartPosX - mArcExtendOffsetCutIn.PosX
                    m1stPos.PosY = mPath(stageNo).Arc2D.StartPosY - mArcExtendOffsetCutIn.PosY
                    mVelocity = mRunUp.Velocity
                    Exit For

                Case eStepFunctionType.Circle2D
                    With pattern.Round(roundNo).CStep(mI(stageNo)).Circle2D
                        mPath(stageNo).PathType = ePathType.Arc2D
                        mPath(stageNo).Arc2D.ArcDirection = eArcDirection.CW
                        mPath(stageNo).Arc2D.Angle = 360
                        mPath(stageNo).Arc2D.CenterPosX = .CenterPosX
                        mPath(stageNo).Arc2D.CenterPosY = .CenterPosY
                        mPath(stageNo).Arc2D.CenterPosZ = 0
                        mPath(stageNo).Arc2D.EndPosX = .EndPosX
                        mPath(stageNo).Arc2D.EndPosY = .EndPosY
                        mPath(stageNo).Arc2D.EndPosZ = 0
                        mPath(stageNo).Arc2D.StartPosX = .StartPosX
                        mPath(stageNo).Arc2D.StartPosY = .StartPosY
                        mPath(stageNo).Arc2D.StartPosZ = 0
                        mPath(stageNo).Arc2D.WeightControl = .WeightControl
                    End With
                    Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes, mDotWeight, mPath(stageNo), mRunUp)
                    Call EstimateArcExtendPath(mPath(stageNo), mRunUp.Distance, mArcExtendOffsetCutIn, mArcExtendOffsetCutOut)
                    m1stPos.PosX = mPath(stageNo).Arc2D.StartPosX - mArcExtendOffsetCutIn.PosX
                    m1stPos.PosY = mPath(stageNo).Arc2D.StartPosY - mArcExtendOffsetCutIn.PosY
                    mVelocity = mRunUp.Velocity
                    Exit For

                Case eStepFunctionType.Dots3D
                    With pattern.Round(roundNo).CStep(mI(stageNo)).Dots3D
                        mPath(stageNo).PathType = ePathType.Dot3D
                        mPath(stageNo).Dot3D.PosX = .PosX
                        mPath(stageNo).Dot3D.PosY = .PosY
                        mPath(stageNo).Dot3D.PosZ = .PosZ
                        mPath(stageNo).Dot3D.WeightControl = .WeightControl
                    End With
                    Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes, mDotWeight, mPath(stageNo), mRunUp)
                    m1stPos.PosX = mPath(stageNo).Dot3D.PosX - mRunUp.Distance
                    m1stPos.PosY = mPath(stageNo).Dot3D.PosY
                    mVelocity = mRunUp.Velocity
                    Exit For

                Case eStepFunctionType.Line3D
                    With pattern.Round(roundNo).CStep(mI(stageNo)).Line3D
                        mPath(stageNo).PathType = ePathType.Line3D
                        mPath(stageNo).Line3D.StartPosX = .StartPosX
                        mPath(stageNo).Line3D.StartPosY = .StartPosY
                        mPath(stageNo).Line3D.StartPosZ = .StartPosZ
                        mPath(stageNo).Line3D.EndPosX = .EndPosX
                        mPath(stageNo).Line3D.EndPosY = .EndPosY
                        mPath(stageNo).Line3D.EndPosZ = .EndPosZ
                        mPath(stageNo).Line3D.WeightControl = .WeightControl
                    End With
                    Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes, mDotWeight, mPath(stageNo), mRunUp)
                    With mPath(stageNo).Line3D
                        mdx = .EndPosX - .StartPosX
                        mdy = .EndPosY - .StartPosY
                        mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                        If mr = 0 Then
                            mExtendOffset.PosX = 0
                            mExtendOffset.PosY = 0
                        Else
                            mExtendOffset.PosX = mRunUp.Distance * mdx / mr
                            mExtendOffset.PosY = mRunUp.Distance * mdy / mr
                        End If
                    End With
                    m1stPos.PosX = mPath(stageNo).Line3D.StartPosX - mExtendOffset.PosX
                    m1stPos.PosY = mPath(stageNo).Line3D.StartPosY - mExtendOffset.PosY
                    mVelocity = mRunUp.Velocity
                    Exit For

                Case eStepFunctionType.Arc3D
                    With pattern.Round(roundNo).CStep(mI(stageNo)).Arc3D
                        mPath(stageNo).PathType = ePathType.Arc2D
                        mPath(stageNo).Arc2D.ArcDirection = .Direction
                        mPath(stageNo).Arc2D.Angle = .Angle
                        mPath(stageNo).Arc2D.CenterPosX = .CenterPosX
                        mPath(stageNo).Arc2D.CenterPosY = .CenterPosY
                        mPath(stageNo).Arc2D.CenterPosZ = .CenterPosZ
                        mPath(stageNo).Arc2D.EndPosX = .EndPosX
                        mPath(stageNo).Arc2D.EndPosY = .EndPosY
                        mPath(stageNo).Arc2D.EndPosZ = .EndPosZ
                        mPath(stageNo).Arc2D.WeightControl = .WeightControl
                    End With
                    Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes, mDotWeight, mPath(stageNo), mRunUp)
                    Call EstimateArcExtendPath(mPath(stageNo), mRunUp.Distance, mArcExtendOffsetCutIn, mArcExtendOffsetCutOut)
                    m1stPos.PosX = mPath(stageNo).Arc2D.StartPosX - mArcExtendOffsetCutIn.PosX
                    m1stPos.PosY = mPath(stageNo).Arc2D.StartPosY - mArcExtendOffsetCutIn.PosY
                    mVelocity = mRunUp.Velocity
                    Exit For

                Case eStepFunctionType.Circle3D
                    With pattern.Round(roundNo).CStep(mI(stageNo)).Circle3D
                        mPath(stageNo).PathType = ePathType.Arc2D
                        mPath(stageNo).Arc2D.ArcDirection = eArcDirection.CW
                        mPath(stageNo).Arc2D.Angle = 360
                        mPath(stageNo).Arc2D.CenterPosX = .CenterPosX
                        mPath(stageNo).Arc2D.CenterPosY = .CenterPosY
                        mPath(stageNo).Arc2D.CenterPosZ = .CenterPosZ
                        mPath(stageNo).Arc2D.EndPosX = .EndPosX
                        mPath(stageNo).Arc2D.EndPosY = .EndPosY
                        mPath(stageNo).Arc2D.EndPosZ = .EndPosZ
                        mPath(stageNo).Arc2D.StartPosX = .StartPosX
                        mPath(stageNo).Arc2D.StartPosY = .StartPosY
                        mPath(stageNo).Arc2D.StartPosZ = .StartPosZ
                        mPath(stageNo).Arc2D.WeightControl = .WeightControl
                    End With
                    Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes, mDotWeight, mPath(stageNo), mRunUp)
                    Call EstimateArcExtendPath(mPath(stageNo), mRunUp.Distance, mArcExtendOffsetCutIn, mArcExtendOffsetCutOut)
                    m1stPos.PosX = mPath(stageNo).Arc2D.StartPosX - mArcExtendOffsetCutIn.PosX
                    m1stPos.PosY = mPath(stageNo).Arc2D.StartPosY - mArcExtendOffsetCutIn.PosY
                    mVelocity = mRunUp.Velocity
                    Exit For

                Case eStepFunctionType.Move3D
                    mPath(stageNo).PathType = ePathType.Line3D
                    With pattern.Round(roundNo).CStep(mI(stageNo)).Move3D
                        mPath(stageNo).Dot3D.PosX = .EndPosX
                        mPath(stageNo).Dot3D.PosY = .EndPosY
                        mPath(stageNo).Dot3D.PosZ = .EndPosZ
                    End With
                    m1stPos.PosX = mPath(stageNo).Dot3D.PosX
                    m1stPos.PosY = mPath(stageNo).Dot3D.PosY
                    mVelocity = 0
                    Exit For

                Case Else
                    '[Note]:暫不處理
            End Select
        Next

        velocity = mVelocity
        pos = m1stPos
        Return True
    End Function

    ''' <summary>[估算單段路徑時間]</summary>
    ''' <param name="acc"></param>
    ''' <param name="dec"></param>
    ''' <param name="distance"></param>
    ''' <param name="velocity"></param>
    ''' <param name="time"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function EstimateMovingTime(ByVal acc As Decimal, ByVal dec As Decimal, ByVal distance As Decimal, ByVal velocity As Decimal, ByRef time As Decimal) As Boolean

        Dim mAccDistance As Decimal                     '[加速段之距離]
        Dim mDecDistance As Decimal                     '[減速段之距離]
        Dim mAccTime As Decimal                         '[加速段之時間]
        Dim mDecTime As Decimal                         '[減速段之時間]
        Dim mVelocityDistance As Decimal                '[等速段之距離]
        Dim mVelocityTime As Decimal                    '[等速段之時間]


        '[Note]:根據速度、加速、減速-->推算距離夠不夠全段加減速
        'V=V0+at-->t=(V-V0)/a
        'X=V0t+0.5*at^2-->X=V0t+(V-V0)^2/2a-->
        '一半  --->X=V0t/2+(V-V0)^2/4a
        '           =V^2/4a

        '[Note]:因為在估助跑段的時候已經認為機構跟不上，故估算助跑距離為原本理論值得4倍
        '       所以在這邊也要使用相同的論點

        mAccDistance = 4 * velocity * velocity / (4 * acc)
        mDecDistance = 4 * velocity * velocity / (4 * dec)

        If mAccDistance + mDecDistance > distance Then
            '[Note]:根本到不了最大速-->先假設加減速一樣(不一樣後面再想)
            'X=V0t+0.5at^2
            '-------->t=(2X/a)^0.5
            '---------->距離一半
            mAccTime = Math.Sqrt(distance / acc)
            mDecTime = Math.Sqrt(distance / dec)
            time = mAccTime + mDecTime
        Else
            mVelocityDistance = distance - mAccDistance - mDecDistance
            mVelocityTime = mVelocityDistance / velocity
            mAccTime = Math.Sqrt(2 * mAccDistance / acc)
            mDecTime = Math.Sqrt(2 * mDecDistance / dec)
            time = mVelocityTime + mAccTime + mDecTime
        End If
        Return True
    End Function

    ''' <summary>[更新補償修正量]</summary>
    ''' <param name="stageNo"></param>
    ''' <remarks></remarks>
    Private Sub UpDateDispTimeCompenstion(ByVal stageNo As enmStage)
        Dim mAverageDiffCompensation(enmStage.Max) As Decimal
        Dim mAverageComputation(enmStage.Max) As Decimal
        Dim mI(enmStage.Max) As Integer
        Dim mJ(enmStage.Max) As Integer
        Dim mK(enmStage.Max) As Integer
        Dim mDispTimeData(enmStage.Max) As sDispenseTimeForRound
        Dim mDispCompensationData As New sDispCompensation
        Dim mTotalDiffMotionCompensation(enmStage.Max) As Decimal
        Dim mTotalComputation(enmStage.Max) As Decimal
        Dim mRound(enmStage.Max) As Integer
        Dim mCount(enmStage.Max) As Integer
        Dim mUpdateValue(enmStage.Max) As sDispCompensation
        Dim mComputation(enmStage.Max) As Decimal

        Const mMotionPathComputeTime As Decimal = 6                                      '[一筆路徑所需的運算時間(ms)]
        Const mTriggerBoardCommunicateTime As Decimal = 3                                '[丟一筆路徑資料給TriggerBoard所需的通訊時間(ms)]

        mRound(stageNo) = mDispTimeList(stageNo).Item(0).Count
        mCount(stageNo) = mDispTimeList(stageNo).Count

        If IsNothing(mDispTimeCompensation(stageNo)) = True Then
            mDispTimeCompensation(stageNo) = New List(Of sDispCompensation)
        End If

        If IsNothing(mUpdateValue(stageNo)) = True Then
            mUpdateValue(stageNo) = New sDispCompensation
        End If


        '[Note]:更新
        If mDispTimeCompensation(stageNo).Count > mRound(stageNo) Then
            For mK(stageNo) = 0 To mDispTimeCompensation(stageNo).Count - mRound(stageNo) - 1
                mDispTimeCompensation(stageNo).RemoveAt(mDispTimeCompensation(stageNo).Count - 1)
            Next
        Else
            For mK(stageNo) = 0 To mRound(stageNo) - mDispTimeCompensation(stageNo).Count - 1
                mDispCompensationData.Computation = 500
                mDispCompensationData.MotionCompensation = 100
                mDispTimeCompensation(stageNo).Add(mDispCompensationData)
            Next
        End If

        '[Note]:幾個Round
        For mJ(stageNo) = 0 To mRound(stageNo) - 1
            mTotalDiffMotionCompensation(stageNo) = 0
            mAverageDiffCompensation(stageNo) = 0
            mTotalComputation(stageNo) = 0
            mAverageComputation(stageNo) = 0

            '[Note]:共幾個
            For mI(stageNo) = 0 To mCount(stageNo) - 1
                mDispTimeData(stageNo) = mDispTimeList(stageNo).Item(mI(stageNo)).Item(mJ(stageNo))
                mTotalDiffMotionCompensation(stageNo) = mTotalDiffMotionCompensation(stageNo) + mDispTimeData(stageNo).AverageDiff
                mComputation(stageNo) = mDispTimeData(stageNo).NextRoundComputeTime - (((mMotionPathCountList(stageNo)(mJ(stageNo)) * mMotionPathComputeTime) + (mTriggerPathCountList(stageNo)(mJ(stageNo)) * mTriggerBoardCommunicateTime)) * mDispTimeData(stageNo).DieCount)
                mTotalComputation(stageNo) = mTotalComputation(stageNo) + mComputation(stageNo)
            Next
            mAverageDiffCompensation(stageNo) = mTotalDiffMotionCompensation(stageNo) / mCount(stageNo)
            mAverageComputation(stageNo) = mTotalComputation(stageNo) / mCount(stageNo)

            mUpdateValue(stageNo).MotionCompensation = mDispTimeCompensation(stageNo).Item(mJ(stageNo)).MotionCompensation
            mUpdateValue(stageNo).MotionCompensation = mUpdateValue(stageNo).MotionCompensation + mAverageDiffCompensation(stageNo)
            mUpdateValue(stageNo).Computation = mAverageComputation(stageNo)

            '[Note]:更新補償值
            mDispTimeCompensation(stageNo).RemoveAt(mJ(stageNo))
            mDispTimeCompensation(stageNo).Insert(mJ(stageNo), mUpdateValue(stageNo))
        Next

        '[Note]:清空暫存資料
        mDispTimeList(stageNo).Clear()

    End Sub

    ''' <summary>[推估從哪一顆走到哪一顆再回頭需要花多少時間(限用於時間型估測)]</summary>
    ''' <param name="dispParam"></param>
    ''' <param name="recipe"></param>
    ''' <param name="stageNo"></param>
    ''' <param name="nodeName"></param>
    ''' <param name="dispList"></param>
    ''' <param name="startIndex"></param>
    ''' <param name="endIndex"></param>
    ''' <param name="pattern"></param>
    ''' <param name="roundNo"></param>
    ''' <param name="dispMultiDie"></param>
    ''' <param name="roundProcessTime"></param>
    ''' <param name="estimateTime"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function EstimateTotalPath(ByVal dispParam As sDispParam, ByVal recipe As CRecipe, ByVal stageNo As enmStage, ByVal nodeName As String, ByVal dispList As List(Of sDispArrayIndex), ByVal startIndex As Integer, ByVal endIndex As Integer, ByVal pattern As CRecipePattern, ByVal roundNo As Integer, ByVal dispMultiDie As enmDispMultiDie, ByVal roundProcessTime As Decimal, Optional ByRef estimateTime As List(Of Decimal) = Nothing) As Boolean

        Static mSingleDieTimeCompensation(enmStage.Max) As List(Of Decimal)                  '[紀錄單顆補償時間(用在多個Round時間估測上)(ms)]
        Static mComputeTimeCompensation(enmStage.Max) As List(Of Decimal)                    '[紀錄進入下一輪點膠前運算所需的時間(用在多個Round時間估測上)(ms)]
        Static mComputaTime(enmStage.Max) As Decimal                                         '[基本的迴圈所需要的時間(sec)]
        Static mSingeDieCCTime(enmStage.Max) As Decimal                                      '[通訊+路徑運算時間(sec)]

        Const mMotionPathComputeTime As Decimal = 0.006                                      '[一筆路徑所需的運算時間(sec)]
        Const mTriggerBoardCommunicateTime As Decimal = 0.003                                '[丟一筆路徑資料給TriggerBoard所需的通訊時間(sec)]

        Dim mI As Integer
        Dim mTotalTimes As Decimal                                                              '[推估需花多久的時間(S)]
        Dim mSingleDieTime As Decimal                                                           '[單一顆路徑時間]
        Dim mGoNextDieDistance As Decimal                                                       '[移到下一顆的距離(mm)]
        Dim mGoNextDieTime As Decimal                                                           '[移到下一顆的時間(S)]
        Dim mGoBackDistance As Decimal                                                          '[移回起始位置的距離(mm)]
        Dim mGoBackTime As Decimal                                                              '[移回起始位置的時間(S)]
        Dim mLastGoBackDistance As Decimal                                                      '[移回起始位置的距離(mm)]
        Dim mLastGoBackTime As Decimal                                                          '[移回起始位置的時間(S)]
        Dim mGoBackVectorPos As Premtek.sPos                                                            '[紀錄移回起始位置之向量]
        Dim mSingleVectorPos As Premtek.sPos                                                            '[紀錄單一顆移動的向量(同一顆走的向量)]
        Dim mVectorPos As Premtek.sPos                                                                  '[紀錄向量]
        Dim mGoNextDieVelocity As Decimal
        Dim mBlendTime As Decimal
        Dim mDPR(enmStage.Max) As List(Of sPatternPath)
        Dim mMDPR(enmStage.Max) As List(Of sPatternPath)
        Dim mTDPR(enmStage.Max) As List(Of sPatternPath)
        Dim mMED(enmStage.Max) As Decimal
        Dim mMBT(enmStage.Max) As Decimal
        Dim mDW(enmStage.Max) As Decimal
        Dim mMDPList(enmStage.Max) As List(Of sMotionPathRegister)
        Dim m1stPath(enmStage.Max) As sDot3DPath
        Dim mlastPath(enmStage.Max) As sDot3DPath
        Dim mEndPos(enmStage.Max) As Premtek.sPos
        Dim mEndPosVelocity(enmStage.Max) As Decimal
        Dim mNextRound1stPos(enmStage.Max) As Premtek.sPos
        Dim mNextRound1stPosVelocity(enmStage.Max) As Decimal
        Dim mTime(enmStage.Max) As Decimal
        Dim mEstimate(enmStage.Max) As List(Of Decimal)
        Dim mCompensation(enmStage.Max) As Decimal
        Dim mComputation(enmStage.Max) As Decimal
        Dim mMotionPathCount(enmStage.Max) As Integer
        Dim mTriggerPathCount(enmStage.Max) As Integer

        mEstimate(stageNo) = New List(Of Decimal)
        If IsNothing(mDispTimeCompensation(stageNo)) = True Then
            mDispTimeCompensation(stageNo) = New List(Of sDispCompensation)
        End If

        If IsNothing(mSingleDieTimeCompensation(stageNo)) = True Then
            mSingleDieTimeCompensation(stageNo) = New List(Of Decimal)
        End If

        If IsNothing(mComputeTimeCompensation(stageNo)) = True Then
            mComputeTimeCompensation(stageNo) = New List(Of Decimal)
        End If

        '[Note]:每輪都需要可以記錄
        If mSingleDieTimeCompensation(stageNo).Count < roundNo + 1 Then
            For mI = 0 To roundNo - mSingleDieTimeCompensation(stageNo).Count
                mSingleDieTimeCompensation(stageNo).Add(0)
            Next
        End If

        '[Note]:每輪都需要可以記錄
        If mComputeTimeCompensation(stageNo).Count < roundNo + 1 Then
            For mI = 0 To roundNo - mComputeTimeCompensation(stageNo).Count
                mComputeTimeCompensation(stageNo).Add(0)
            Next
        End If

        If roundProcessTime = 0 Then
            '[Note]:表示不受時間控制-->自由決定要跑到哪一個
            '[Note]:全部都串接起來一次點完
            '[Note]:將時間估測值記錄起來
            mEstimate(stageNo).Capacity = mEstimate(stageNo).Count + 1
            mEstimate(stageNo).Add(0)
            estimateTime = mEstimate(stageNo)
            Return True
        Else
            '[Note]:須受時間控制
            Select Case dispMultiDie
                Case enmDispMultiDie.SingleDie
                    '[Note]:雖然受時間控制，但還是須點完一顆(最低要求限度)
                    '[Note]:將時間估測值記錄起來
                    mEstimate(stageNo).Capacity = mEstimate(stageNo).Count + 1
                    mEstimate(stageNo).Add(0)
                    estimateTime = mEstimate(stageNo)
                    Return True

                Case enmDispMultiDie.MultiDie
                    '[Note]:取進入下一輪所需的計算量
                    Call PatternConverToPathRegister(stageNo, recipe, pattern, roundNo + 1, mDPR(stageNo))
                    If EditMotionPath(dispParam, mDPR(stageNo), mMDPR(stageNo), mTDPR(stageNo), mMED(stageNo), mMBT(stageNo), mDW(stageNo), True) = False Then
                        Return False
                    End If
                    mMotionPathCount(stageNo) = mMDPR(stageNo).Count
                    mTriggerPathCount(stageNo) = mTDPR(stageNo).Count
                    mSingeDieCCTime(stageNo) = (mMotionPathCount(stageNo) * mMotionPathComputeTime) + (mTriggerPathCount(stageNo) * mTriggerBoardCommunicateTime)

                    mMotionPathCountList(stageNo).Add(mMotionPathCount(stageNo))
                    mTriggerPathCountList(stageNo).Add(mTriggerPathCount(stageNo))


                    '[Note]:取本輪所需的資訊
                    Call PatternConverToPathRegister(stageNo, recipe, pattern, roundNo, mDPR(stageNo))
                    If EditMotionPath(dispParam, mDPR(stageNo), mMDPR(stageNo), mTDPR(stageNo), mMED(stageNo), mMBT(stageNo), mDW(stageNo), False) = False Then
                        Return False
                    End If

                    Call MotionPathCoversion(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mMED(stageNo), mMBT(stageNo), mMDPR(stageNo), mMDPList(stageNo), m1stPath(stageNo), mlastPath(stageNo), , mEndPos(stageNo), mEndPosVelocity(stageNo))
                    Call EstimatePathTime(dispParam, mMDPList(stageNo), m1stPath(stageNo), mTime(stageNo))
                    Call GetFristPosForRound(stageNo, dispParam, recipe, pattern, roundNo + 1, mNextRound1stPos(stageNo), mNextRound1stPosVelocity(stageNo))
                    Call EstimateBlendingTime(mMBT(stageNo), mBlendTime)

                    '[Note]:計算退回起點的時間&距離
                    '[Note]:移回起點之時間，使用正常移動之速度
                    '[Note]:向量距離
                    mSingleVectorPos.PosX = mEndPos(stageNo).PosX - m1stPath(stageNo).PosX
                    mSingleVectorPos.PosY = mEndPos(stageNo).PosY - m1stPath(stageNo).PosY
                    mSingleVectorPos.PosZ = mEndPos(stageNo).PosZ - m1stPath(stageNo).PosZ
                    mGoBackVectorPos.PosX = mSingleVectorPos.PosX
                    mGoBackVectorPos.PosY = mSingleVectorPos.PosY
                    mGoBackVectorPos.PosZ = mSingleVectorPos.PosZ
                    mGoBackDistance = CDec(Math.Sqrt((mGoBackVectorPos.PosX * mGoBackVectorPos.PosX) + (mGoBackVectorPos.PosY * mGoBackVectorPos.PosY)))

                    '[Note]:移回起始點是用一般的移動速度，非點膠速度
                    Call EstimateMovingTime(dispParam.Acc, dispParam.Dec, mGoBackDistance, dispParam.VelHigh, mGoBackTime)
                    mLastGoBackDistance = mGoBackDistance
                    mLastGoBackTime = mGoBackTime

                    '[Note]:更新補償數值
                    If Not IsNothing(mDispTimeList(stageNo)) = True Then
                        If mDispTimeList(stageNo).Count = 0 Then
                            mCompensation(stageNo) = mDispTimeCompensation(stageNo).Item(roundNo).MotionCompensation
                            mSingleDieTimeCompensation(stageNo).RemoveAt(roundNo)
                            mSingleDieTimeCompensation(stageNo).Insert(roundNo, mCompensation(stageNo))

                            mComputation(stageNo) = mDispTimeCompensation(stageNo).Item(roundNo).Computation
                            mComputeTimeCompensation(stageNo).RemoveAt(roundNo)
                            mComputeTimeCompensation(stageNo).Insert(roundNo, mComputation(stageNo))
                        End If
                    Else
                        '[Note]:一開始估測時(預設都是100ms)，寧願等久一點也不要有任何逾時之現象(時間到了卻還沒回去點下一Round) 
                        mSingleDieTimeCompensation(stageNo).RemoveAt(roundNo)
                        mSingleDieTimeCompensation(stageNo).Insert(roundNo, 100)

                        mComputeTimeCompensation(stageNo).RemoveAt(roundNo)
                        mComputeTimeCompensation(stageNo).Insert(roundNo, 500)
                    End If

                    '[Note]:單位須轉成Sec
                    mSingleDieTime = mTime(stageNo) + mSingleDieTimeCompensation(stageNo).Item(roundNo) * 0.001

                    '[Note]:推算要花多少時間
                    For mI = startIndex To endIndex
                        If mI = startIndex Then
                            mTotalTimes = mSingleDieTime + mGoBackTime
                            '[Note]:將時間估測值記錄起來，不含回頭的時間
                            mEstimate(stageNo).Capacity = mEstimate(stageNo).Count + 1
                            mEstimate(stageNo).Add(mSingleDieTime)
                        Else
                            mTotalTimes = mTotalTimes - mLastGoBackTime
                            '[Note]:從上一顆移到目前這一個顆之時間、距離
                            Dim mMultiArrayAdapter = New CMultiArrayAdapter(recipe.Node(stageNo)(nodeName).Array)
                            mVectorPos.PosX = mMultiArrayAdapter.GetMemoryOffsetX(dispList(mI).IndexX, dispList(mI).IndexY, dispList(mI - 1).IndexX, dispList(mI - 1).IndexY) - mGoBackVectorPos.PosX
                            mVectorPos.PosY = mMultiArrayAdapter.GetMemoryOffsetY(dispList(mI).IndexX, dispList(mI).IndexY, dispList(mI - 1).IndexX, dispList(mI - 1).IndexY) - mGoBackVectorPos.PosY
                            mGoNextDieDistance = CDec(Math.Sqrt((mVectorPos.PosX * mVectorPos.PosX) + (mVectorPos.PosY * mVectorPos.PosY)))
                            dispParam.VelHigh = IIf(gSSystemParameter.MaxCrossDeviceVelocity > 0, gSSystemParameter.MaxCrossDeviceVelocity, 600) 'Soni + 2017.08.14 跨元件速度上限
                            'Call EstimateCrossVelocity(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mGoNextDieDistance, mBlendTime, mEndPosVelocity(stageNo), mNextRound1stPosVelocity(stageNo), mGoNextDieVelocity)
                            Premtek.CDispensingMath.GetCrossVelocity(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mGoNextDieDistance, gSSystemParameter.CrossVerticalTime, mGoNextDieVelocity) 'Soni + 2017.08.14 先不採用原算式, 因為跨元件好像沒有要上去再下來這回事.
                            Call EstimateMovingTime(dispParam.Acc, dispParam.Dec, mGoNextDieDistance, mGoNextDieVelocity, mGoNextDieTime)

                            '[Note]:回到第一顆的時間、距離
                            '[Note]:移回起始點是用一般的移動速度，非點膠速度
                            mGoBackVectorPos.PosX = mMultiArrayAdapter.GetMemoryOffsetX(dispList(mI).IndexX, dispList(mI).IndexY, dispList(startIndex).IndexX, dispList(startIndex).IndexY) + mSingleVectorPos.PosX
                            mGoBackVectorPos.PosY = mMultiArrayAdapter.GetMemoryOffsetY(dispList(mI).IndexX, dispList(mI).IndexY, dispList(startIndex).IndexX, dispList(startIndex).IndexY) + mSingleVectorPos.PosY
                            mGoBackDistance = CDec(Math.Sqrt((mGoBackVectorPos.PosX * mGoBackVectorPos.PosX) + (mGoBackVectorPos.PosY * mGoBackVectorPos.PosY)))
                            Call EstimateMovingTime(dispParam.Acc, dispParam.Dec, mGoBackDistance, dispParam.VelHigh, mGoBackTime)

                            mTotalTimes = mTotalTimes + mSingleDieTime + mGoNextDieTime + mGoBackTime
                            '[Note]:將時間估測值記錄起來
                            mEstimate(stageNo).Capacity = mEstimate(stageNo).Count + 1
                            mEstimate(stageNo).Add(mTotalTimes - mGoBackTime)
                            mLastGoBackTime = mGoBackTime
                        End If
                    Next
                    estimateTime = mEstimate(stageNo)
                    Return True

                Case Else
                    '[Note]:將時間估測值記錄起來
                    mEstimate(stageNo).Capacity = mEstimate(stageNo).Count + 1
                    mEstimate(stageNo).Add(0)
                    estimateTime = mEstimate(stageNo)
                    Return False

            End Select
        End If

    End Function

    ''' <summary>[推估走到哪一顆就要回頭(限用於時間型估測)]</summary>
    ''' <param name="dispParam"></param>
    ''' <param name="recipe"></param>
    ''' <param name="stageNo"></param>
    ''' <param name="nodeName"></param>
    ''' <param name="dispList"></param>
    ''' <param name="startIndex"></param>
    ''' <param name="pattern"></param>
    ''' <param name="roundNo"></param>
    ''' <param name="dispMultiDie"></param>
    ''' <param name="roundProcessTime"></param>
    ''' <param name="endIndex"></param>
    ''' <param name="estimateTime"></param>
    ''' <param name="maxExtendDistance"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function EstimatePath(ByVal dispParam As sDispParam, ByVal recipe As CRecipe, ByVal stageNo As enmStage, ByVal nodeName As String, ByVal dispList As List(Of sDispArrayIndex), ByVal startIndex As Integer, ByVal pattern As CRecipePattern, ByVal roundNo As Integer, ByVal dispMultiDie As enmDispMultiDie, ByVal roundProcessTime As Decimal, ByRef endIndex As Integer, Optional ByRef estimateTime As List(Of Decimal) = Nothing, Optional ByRef maxExtendDistance As Decimal = 0) As Boolean

        Static mSingleDieTimeCompensation(enmStage.Max) As List(Of Decimal)                  '[紀錄單顆補償時間(用在多個Round時間估測上)(ms)]
        Static mComputeTimeCompensation(enmStage.Max) As List(Of Decimal)                    '[紀錄進入下一輪點膠前運算所需的時間(用在多個Round時間估測上)(ms)]
        Static mComputaTime(enmStage.Max) As Decimal                                         '[基本的迴圈所需要的時間(sec)]
        Static mSingeDieCCTime(enmStage.Max) As Decimal                                      '[通訊+路徑運算時間(sec)]

        Const mMotionPathComputeTime As Decimal = 0.006                                      '[一筆路徑所需的運算時間(sec)]
        Const mTriggerBoardCommunicateTime As Decimal = 0.003                                '[丟一筆路徑資料給TriggerBoard所需的通訊時間(sec)]

        Dim mI As Integer
        Dim mTotalTimes As Decimal                                                              '[推估需花多久的時間(S)]
        Dim mSingleDieTime As Decimal                                                           '[單一顆路徑時間]
        Dim mMaxLimitTime As Double                                                             '[最大時間的限制(S)]
        Dim mGoNextDieDistance As Decimal                                                       '[移到下一顆的距離(mm)]
        Dim mGoNextDieTime As Decimal                                                           '[移到下一顆的時間(S)]
        Dim mGoBackDistance As Decimal                                                          '[移回起始位置的距離(mm)]
        Dim mGoBackTime As Decimal                                                              '[移回起始位置的時間(S)]
        Dim mLastGoBackDistance As Decimal                                                      '[移回起始位置的距離(mm)]
        Dim mLastGoBackTime As Decimal                                                          '[移回起始位置的時間(S)]
        Dim mGoBackVectorPos As Premtek.sPos                                                            '[紀錄移回起始位置之向量]
        Dim mSingleVectorPos As Premtek.sPos                                                            '[紀錄單一顆移動的向量(同一顆走的向量)]
        Dim mVectorPos As Premtek.sPos                                                                  '[紀錄向量]
        Dim mGoNextDieVelocity As Decimal
        Dim mBlendTime As Decimal
        Dim mDPR(enmStage.Max) As List(Of sPatternPath)
        Dim mMDPR(enmStage.Max) As List(Of sPatternPath)
        Dim mTDPR(enmStage.Max) As List(Of sPatternPath)
        Dim mMED(enmStage.Max) As Decimal
        Dim mMBT(enmStage.Max) As Decimal
        Dim mDW(enmStage.Max) As Decimal
        Dim mMDPList(enmStage.Max) As List(Of sMotionPathRegister)
        Dim m1stPath(enmStage.Max) As sDot3DPath
        Dim mlastPath(enmStage.Max) As sDot3DPath
        Dim mEndPos(enmStage.Max) As Premtek.sPos
        Dim mEndPosVelocity(enmStage.Max) As Decimal
        Dim mNextRound1stPos(enmStage.Max) As Premtek.sPos
        Dim mNextRound1stPosVelocity(enmStage.Max) As Decimal
        Dim mTime(enmStage.Max) As Decimal
        Dim mEstimate(enmStage.Max) As List(Of Decimal)
        Dim mEstimateTime As Decimal
        Dim mCompensation(enmStage.Max) As Decimal
        Dim mComputation(enmStage.Max) As Decimal
        Dim mMotionPathCount(enmStage.Max) As Integer
        Dim mTriggerPathCount(enmStage.Max) As Integer

        mEstimate(stageNo) = New List(Of Decimal)
        If IsNothing(mDispTimeCompensation(stageNo)) = True Then
            mDispTimeCompensation(stageNo) = New List(Of sDispCompensation)
        End If

        If IsNothing(mSingleDieTimeCompensation(stageNo)) = True Then
            mSingleDieTimeCompensation(stageNo) = New List(Of Decimal)
        End If

        If IsNothing(mComputeTimeCompensation(stageNo)) = True Then
            mComputeTimeCompensation(stageNo) = New List(Of Decimal)
        End If

        '[Note]:每輪都需要可以記錄
        If mSingleDieTimeCompensation(stageNo).Count < roundNo + 1 Then
            For mI = 0 To roundNo - mSingleDieTimeCompensation(stageNo).Count
                mSingleDieTimeCompensation(stageNo).Add(0)
            Next
        End If

        '[Note]:每輪都需要可以記錄
        If mComputeTimeCompensation(stageNo).Count < roundNo + 1 Then
            For mI = 0 To roundNo - mComputeTimeCompensation(stageNo).Count
                mComputeTimeCompensation(stageNo).Add(0)
            Next
        End If

        If roundProcessTime = 0 Then
            '[Note]:表示不受時間控制-->自由決定要跑到哪一個
            '[Note]:全部都串接起來一次點完
            endIndex = dispList.Count - 1
            '[Note]:將時間估測值記錄起來
            mEstimate(stageNo).Capacity = mEstimate(stageNo).Count + 1
            mEstimate(stageNo).Add(0)
            estimateTime = mEstimate(stageNo)
            maxExtendDistance = 0
            Return True
        Else
            '[Note]:須受時間控制
            Select Case dispMultiDie
                Case enmDispMultiDie.SingleDie
                    '[Note]:雖然受時間控制，但還是須點完一顆(最低要求限度)
                    endIndex = startIndex
                    '[Note]:將時間估測值記錄起來
                    mEstimate(stageNo).Capacity = mEstimate(stageNo).Count + 1
                    mEstimate(stageNo).Add(0)
                    estimateTime = mEstimate(stageNo)
                    maxExtendDistance = 0
                    Return True

                Case enmDispMultiDie.MultiDie
                    endIndex = startIndex

                    '[Note]:取進入下一輪所需的計算量
                    Call PatternConverToPathRegister(stageNo, recipe, pattern, roundNo + 1, mDPR(stageNo))
                    If EditMotionPath(dispParam, mDPR(stageNo), mMDPR(stageNo), mTDPR(stageNo), mMED(stageNo), mMBT(stageNo), mDW(stageNo), True) = False Then
                        maxExtendDistance = mMED(stageNo)
                        Return False
                    End If
                    mMotionPathCount(stageNo) = mMDPR(stageNo).Count
                    mTriggerPathCount(stageNo) = mTDPR(stageNo).Count
                    mSingeDieCCTime(stageNo) = (mMotionPathCount(stageNo) * mMotionPathComputeTime) + (mTriggerPathCount(stageNo) * mTriggerBoardCommunicateTime)

                    mMotionPathCountList(stageNo).Add(mMotionPathCount(stageNo))
                    mTriggerPathCountList(stageNo).Add(mTriggerPathCount(stageNo))

                    '[Note]:取本輪所需的資訊
                    Call PatternConverToPathRegister(stageNo, recipe, pattern, roundNo, mDPR(stageNo))
                    If EditMotionPath(dispParam, mDPR(stageNo), mMDPR(stageNo), mTDPR(stageNo), mMED(stageNo), mMBT(stageNo), mDW(stageNo), False) = False Then
                        maxExtendDistance = mMED(stageNo)
                        Return False
                    End If
                    maxExtendDistance = mMED(stageNo)

                    Call MotionPathCoversion(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mMED(stageNo), mMBT(stageNo), mMDPR(stageNo), mMDPList(stageNo), m1stPath(stageNo), mlastPath(stageNo), , mEndPos(stageNo), mEndPosVelocity(stageNo))
                    Call EstimatePathTime(dispParam, mMDPList(stageNo), m1stPath(stageNo), mTime(stageNo))
                    Call GetFristPosForRound(stageNo, dispParam, recipe, pattern, roundNo + 1, mNextRound1stPos(stageNo), mNextRound1stPosVelocity(stageNo))
                    Call EstimateBlendingTime(mMBT(stageNo), mBlendTime)

                    '[Note]:計算退回起點的時間&距離
                    '[Note]:移回起點之時間，使用正常移動之速度
                    '[Note]:向量距離
                    mSingleVectorPos.PosX = mEndPos(stageNo).PosX - m1stPath(stageNo).PosX
                    mSingleVectorPos.PosY = mEndPos(stageNo).PosY - m1stPath(stageNo).PosY
                    mSingleVectorPos.PosZ = mEndPos(stageNo).PosZ - m1stPath(stageNo).PosZ
                    mGoBackVectorPos.PosX = mSingleVectorPos.PosX
                    mGoBackVectorPos.PosY = mSingleVectorPos.PosY
                    mGoBackVectorPos.PosZ = mSingleVectorPos.PosZ
                    mGoBackDistance = CDec(Math.Sqrt((mGoBackVectorPos.PosX * mGoBackVectorPos.PosX) + (mGoBackVectorPos.PosY * mGoBackVectorPos.PosY)))

                    dispParam.VelHigh = IIf(gSSystemParameter.MaxCrossDeviceVelocity > 0, gSSystemParameter.MaxCrossDeviceVelocity, 600) 'Soni + 2017.08.14 跨元件速度上限
                    '[Note]:移回起始點是用一般的移動速度，非點膠速度
                    Call EstimateMovingTime(dispParam.Acc, dispParam.Dec, mGoBackDistance, dispParam.VelHigh, mGoBackTime)
                    mLastGoBackDistance = mGoBackDistance
                    mLastGoBackTime = mGoBackTime

                    '[Note]:更新補償數值
                    If Not IsNothing(mDispTimeList(stageNo)) = True Then
                        If mDispTimeList(stageNo).Count = 0 Then
                            mCompensation(stageNo) = mDispTimeCompensation(stageNo).Item(roundNo).MotionCompensation
                            mSingleDieTimeCompensation(stageNo).RemoveAt(roundNo)
                            mSingleDieTimeCompensation(stageNo).Insert(roundNo, mCompensation(stageNo))

                            mComputation(stageNo) = mDispTimeCompensation(stageNo).Item(roundNo).Computation
                            mComputeTimeCompensation(stageNo).RemoveAt(roundNo)
                            mComputeTimeCompensation(stageNo).Insert(roundNo, mComputation(stageNo))
                        End If
                    Else
                        '[Note]:一開始估測時(預設都是100ms)，寧願等久一點也不要有任何逾時之現象(時間到了卻還沒回去點下一Round) 
                        mSingleDieTimeCompensation(stageNo).RemoveAt(roundNo)
                        mSingleDieTimeCompensation(stageNo).Insert(roundNo, 100)

                        mComputeTimeCompensation(stageNo).RemoveAt(roundNo)
                        mComputeTimeCompensation(stageNo).Insert(roundNo, 500)
                    End If

                    '[Note]:單位須轉成Sec
                    mSingleDieTime = mTime(stageNo) + mSingleDieTimeCompensation(stageNo).Item(roundNo) * 0.001
                    mMaxLimitTime = roundProcessTime - mComputeTimeCompensation(stageNo)(roundNo) * 0.001

                    '[Note]:推算可以做幾顆
                    For mI = startIndex To dispList.Count - 1
                        If mI = startIndex Then
                            mTotalTimes = mSingleDieTime + mGoBackTime
                            '[Note]:將時間估測值記錄起來，不含回頭的時間
                            mEstimate(stageNo).Capacity = mEstimate(stageNo).Count + 1
                            mEstimate(stageNo).Add(mSingleDieTime)
                            If mTotalTimes > (mMaxLimitTime - mSingeDieCCTime(stageNo)) Then
                                mEstimateTime = mTotalTimes
                                Exit For
                            Else
                                endIndex = mI
                            End If
                        Else
                            mTotalTimes = mTotalTimes - mLastGoBackTime
                            '[Note]:從上一顆移到目前這一個顆之時間、距離
                            Dim mMultiArrayAdapter = New CMultiArrayAdapter(recipe.Node(stageNo)(nodeName).Array)
                            mVectorPos.PosX = mMultiArrayAdapter.GetMemoryOffsetX(dispList(mI).IndexX, dispList(mI).IndexY, dispList(mI - 1).IndexX, dispList(mI - 1).IndexY) - mGoBackVectorPos.PosX
                            mVectorPos.PosY = mMultiArrayAdapter.GetMemoryOffsetY(dispList(mI).IndexX, dispList(mI).IndexY, dispList(mI - 1).IndexX, dispList(mI - 1).IndexY) - mGoBackVectorPos.PosY
                            mGoNextDieDistance = CDec(Math.Sqrt((mVectorPos.PosX * mVectorPos.PosX) + (mVectorPos.PosY * mVectorPos.PosY)))
                            dispParam.VelHigh = IIf(gSSystemParameter.MaxCrossDeviceVelocity > 0, gSSystemParameter.MaxCrossDeviceVelocity, 600) 'Soni + 2017.08.14 跨元件速度上限
                            'Call EstimateCrossVelocity(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mGoNextDieDistance, mBlendTime, mEndPosVelocity(stageNo), mNextRound1stPosVelocity(stageNo), mGoNextDieVelocity)
                            Premtek.CDispensingMath.GetCrossVelocity(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mGoNextDieDistance, gSSystemParameter.CrossVerticalTime, mGoNextDieVelocity) 'Soni + 2017.08.14 先不採用原算式, 因為跨元件好像沒有要上去再下來這回事.
                            Call EstimateMovingTime(dispParam.Acc, dispParam.Dec, mGoNextDieDistance, mGoNextDieVelocity, mGoNextDieTime)

                            '[Note]:回到第一顆的時間、距離
                            '[Note]:移回起始點是用一般的移動速度，非點膠速度
                            mGoBackVectorPos.PosX = mMultiArrayAdapter.GetMemoryOffsetX(dispList(mI).IndexX, dispList(mI).IndexY, dispList(startIndex).IndexX, dispList(startIndex).IndexY) + mSingleVectorPos.PosX
                            mGoBackVectorPos.PosY = mMultiArrayAdapter.GetMemoryOffsetY(dispList(mI).IndexX, dispList(mI).IndexY, dispList(startIndex).IndexX, dispList(startIndex).IndexY) + mSingleVectorPos.PosY
                            mGoBackDistance = CDec(Math.Sqrt((mGoBackVectorPos.PosX * mGoBackVectorPos.PosX) + (mGoBackVectorPos.PosY * mGoBackVectorPos.PosY)))
                            Call EstimateMovingTime(dispParam.Acc, dispParam.Dec, mGoBackDistance, dispParam.VelHigh, mGoBackTime)

                            mTotalTimes = mTotalTimes + mSingleDieTime + mGoNextDieTime + mGoBackTime
                            '[Note]:將時間估測值記錄起來
                            mEstimate(stageNo).Capacity = mEstimate(stageNo).Count + 1
                            mEstimate(stageNo).Add(mTotalTimes - mGoBackTime)
                            If mTotalTimes > (mMaxLimitTime - (mSingeDieCCTime(stageNo) * (mI - startIndex + 1))) Then
                                mEstimateTime = mTotalTimes - (mSingleDieTime + mGoNextDieTime + mGoBackTime) + mLastGoBackTime
                                Exit For
                            Else
                                endIndex = mI
                            End If
                            mLastGoBackTime = mGoBackTime
                            mEstimateTime = mTotalTimes
                        End If
                    Next
                    estimateTime = mEstimate(stageNo)
                    Return True

                Case Else
                    endIndex = startIndex
                    '[Note]:將時間估測值記錄起來
                    mEstimate(stageNo).Capacity = mEstimate(stageNo).Count + 1
                    mEstimate(stageNo).Add(0)
                    estimateTime = mEstimate(stageNo)
                    maxExtendDistance = 0
                    Return False

            End Select
        End If

    End Function

    ''' <summary>[判斷是否為Motion Step]</summary>
    ''' <param name="cStep"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function IsMotionStep(ByVal cStep As CPatternStep, ByRef pattenPath As sPatternPath) As Boolean

        Dim mPath As New sPatternPath

        Select Case cStep.StepType
            Case eStepFunctionType.Arc2D
                mPath.PathType = ePathType.Arc2D
                mPath.Arc2D.StartPosX = cStep.Arc2D.StartPosX
                mPath.Arc2D.StartPosY = cStep.Arc2D.StartPosY
                mPath.Arc2D.CenterPosX = cStep.Arc2D.CenterPosX
                mPath.Arc2D.CenterPosY = cStep.Arc2D.CenterPosY
                mPath.Arc2D.EndPosX = cStep.Arc2D.EndPosX
                mPath.Arc2D.EndPosY = cStep.Arc2D.EndPosY
                mPath.Arc2D.WeightControl = cStep.Arc2D.WeightControl
                pattenPath = mPath
                Return True

            Case eStepFunctionType.Arc3D
                mPath.PathType = ePathType.Arc3D
                mPath.Arc3D.StartPosX = cStep.Arc3D.StartPosX
                mPath.Arc3D.StartPosY = cStep.Arc3D.StartPosY
                mPath.Arc3D.CenterPosX = cStep.Arc3D.CenterPosX
                mPath.Arc3D.CenterPosY = cStep.Arc3D.CenterPosY
                mPath.Arc3D.EndPosX = cStep.Arc3D.EndPosX
                mPath.Arc3D.EndPosY = cStep.Arc3D.EndPosY
                mPath.Arc3D.WeightControl = cStep.Arc3D.WeightControl
                pattenPath = mPath
                Return True

            Case eStepFunctionType.Circle2D
                mPath.PathType = ePathType.Arc2D
                mPath.Arc2D.StartPosX = cStep.Circle2D.StartPosX
                mPath.Arc2D.StartPosY = cStep.Circle2D.StartPosY
                mPath.Arc2D.CenterPosX = cStep.Circle2D.CenterPosX
                mPath.Arc2D.CenterPosY = cStep.Circle2D.CenterPosY
                mPath.Arc2D.EndPosX = cStep.Circle2D.StartPosX
                mPath.Arc2D.EndPosY = cStep.Circle2D.StartPosY
                mPath.Arc2D.WeightControl = cStep.Circle2D.WeightControl
                pattenPath = mPath
                Return True

            Case eStepFunctionType.Circle3D
                mPath.PathType = ePathType.Arc3D
                mPath.Arc3D.StartPosX = cStep.Circle3D.EndPosX
                mPath.Arc3D.StartPosY = cStep.Circle3D.EndPosY
                mPath.Arc3D.CenterPosX = cStep.Circle3D.CenterPosX
                mPath.Arc3D.CenterPosY = cStep.Circle3D.CenterPosY
                mPath.Arc3D.EndPosX = cStep.Circle3D.EndPosX
                mPath.Arc3D.EndPosY = cStep.Circle3D.EndPosY
                mPath.Arc3D.WeightControl = cStep.Circle3D.WeightControl
                pattenPath = mPath
                Return True

            Case eStepFunctionType.Dots3D
                mPath.PathType = ePathType.Dot3D
                mPath.Dot3D.PosX = cStep.Dots3D.PosX
                mPath.Dot3D.PosY = cStep.Dots3D.PosY
                mPath.Dot3D.PosZ = cStep.Dots3D.PosZ
                mPath.Dot3D.WeightControl = cStep.Dots3D.WeightControl
                pattenPath = mPath
                Return True

            Case eStepFunctionType.Line3D
                mPath.PathType = ePathType.Line3D
                mPath.Line3D.StartPosX = cStep.Line3D.StartPosX
                mPath.Line3D.StartPosY = cStep.Line3D.StartPosY
                mPath.Line3D.EndPosX = cStep.Line3D.EndPosX
                mPath.Line3D.EndPosY = cStep.Line3D.EndPosY
                mPath.Line3D.WeightControl = cStep.Line3D.WeightControl
                pattenPath = mPath
                Return True

            Case eStepFunctionType.Move3D
                mPath.PathType = ePathType.Dot3D
                mPath.Dot3D.PosX = cStep.Move3D.EndPosX
                mPath.Dot3D.PosY = cStep.Move3D.EndPosY
                mPath.Dot3D.PosZ = cStep.Move3D.EndPosZ
                mPath.Dot3D.WeightControl.Type = eWeightControlType.Dots
                mPath.Dot3D.WeightControl.DotCounts = 0
                pattenPath = mPath
                Return True

            Case Else
                Return False
        End Select
    End Function

    ''' <summary>[有無點膠時間之限制條件]</summary>
    ''' <param name="pattern"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function HaveProcessTimeCondition(ByVal pattern As CRecipePattern) As eProcessTimeType

        Dim mProcessTimeType As eProcessTimeType

        '[Note]:只有一個Round不可能走時間控制型點膠
        If pattern.Round.Count = 1 Then
            Return eProcessTimeType.None
        End If

        mProcessTimeType = pattern.ProcessTimeType
        Return mProcessTimeType

    End Function

    ''' <summary>[Axis對應的編號]</summary>
    ''' <remarks></remarks>
    Private Structure sAxis
        ''' <summary>[X軸]</summary>
        ''' <remarks></remarks>
        Shared AxisX As Integer = 0
        ''' <summary>[Y軸]</summary>
        ''' <remarks></remarks>
        Shared AxisY As Integer = 1
        ''' <summary>[Z軸]</summary>
        ''' <remarks></remarks>
        Shared AxisZ As Integer = 2
        ''' <summary>[A軸]</summary>
        ''' <remarks></remarks>
        Shared AxisA As Integer = 3
        ''' <summary>[B軸]</summary>
        ''' <remarks></remarks>
        Shared AxisB As Integer = 4
        ''' <summary>[C軸]</summary>
        ''' <remarks></remarks>
        Shared AxisC As Integer = 5
    End Structure

    ''' <summary>[設定單軸移動速度(一般移動)]</summary>
    ''' <param name="axisNo"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function SetMotionVelocity(ByVal axisNo As Integer) As Boolean
        With gCMotion.AxisParameter(axisNo).Velocity
            If gCMotion.SetVelLow(axisNo, .VelLow) <> CommandStatus.Sucessed Then
                gEqpMsg.AddHistoryAlarm("Error_1009013", "LoadMotionVelocity", "", gMsgHandler.GetMessage(Error_1009013), eMessageLevel.Error)
                Return False
            End If
            If gCMotion.SetVelHigh(axisNo, .VelHigh) <> CommandStatus.Sucessed Then
                gEqpMsg.AddHistoryAlarm("Error_1009014", "LoadMotionVelocity", "", gMsgHandler.GetMessage(Error_1009014), eMessageLevel.Error)
                Return False
            End If
            If gCMotion.SetAcc(axisNo, .Acc) <> CommandStatus.Sucessed Then
                gEqpMsg.AddHistoryAlarm("Error_1009015", "LoadMotionVelocity", "", gMsgHandler.GetMessage(Error_1009015), eMessageLevel.Alarm)
                Return False
            End If
            If gCMotion.SetDec(axisNo, .Dec) <> CommandStatus.Sucessed Then
                gEqpMsg.AddHistoryAlarm("Error_1009016", "LoadMotionVelocity", "", gMsgHandler.GetMessage(Error_1009016), eMessageLevel.Alarm)
                Return False
            End If
        End With
        Return True
    End Function

    ''' <summary>[找出對應的閥、Tilt角度]</summary>
    ''' <param name="pattern"></param>
    ''' <param name="roundNo"></param>
    ''' <param name="stepNo"></param>
    ''' <param name="valveNo"></param>
    ''' <param name="posB"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GetSelectValve(ByVal pattern As CRecipePattern, ByVal roundNo As Integer, ByVal stepNo As Integer, ByRef valveNo As eValveWorkMode, ByRef posB As Decimal) As Boolean

        Dim mI As Integer
        Dim mValve As eValveWorkMode = eValveWorkMode.Valve1        '預設為ValveNo1
        Dim mPosB As Decimal = 0


        '[Note]:先往前抓，找對應的閥
        With pattern
            For mI = stepNo - 1 To 0 Step -1
                Select Case .Round(roundNo).CStep(mI).StepType
                    Case eStepFunctionType.SelectValve
                        mValve = .Round(roundNo).CStep(mI).SelectValve.ValveNo
                        mPosB = .Round(roundNo).CStep(mI).SelectValve.PosB
                        Exit For
                End Select
            Next
        End With

        With pattern
            For mI = stepNo To .Round(roundNo).CStep.Count - 1
                Select Case .Round(roundNo).CStep(mI).StepType
                    Case eStepFunctionType.SelectValve
                        mValve = .Round(roundNo).CStep(mI).SelectValve.ValveNo
                        mPosB = .Round(roundNo).CStep(mI).SelectValve.PosB
                        Exit For
                End Select
            Next
        End With

        valveNo = mValve
        posB = mPosB
        Return True

    End Function

    ''' <summary>[Sin]</summary>
    ''' <param name="Degree"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function SinTrigonometricFunction(ByVal degree As Decimal) As Decimal

        Dim mA As Decimal
        Dim mSin As Decimal

        mA = degree Mod 90

        If mA = 0 Then
            Select Case degree
                Case 0
                    mSin = 0
                Case 90
                    mSin = 1
                Case 180
                    mSin = 0
                Case 270
                    mSin = -1
                Case 360
                    mSin = 0
                Case -90
                    mSin = -1
                Case -180
                    mSin = 0
                Case -270
                    mSin = 1
                Case -360
                    mSin = 0
            End Select
        Else
            mSin = CDec(Math.Sin(degree * Math.PI / 180))
        End If
        Return mSin

    End Function

    ''' <summary>[Cos]</summary>
    ''' <param name="Degree"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function CosTrigonometricFunction(ByVal degree As Decimal) As Decimal

        Dim mA As Decimal
        Dim mCos As Decimal
        mA = degree Mod 90

        If mA = 0 Then
            Select Case degree
                Case 0
                    mCos = 1
                Case 90
                    mCos = 0
                Case 180
                    mCos = -1
                Case 270
                    mCos = 0
                Case 360
                    mCos = 1
                Case -90
                    mCos = 0
                Case -180
                    mCos = -1
                Case -270
                    mCos = 0
                Case -360
                    mCos = 1
            End Select
        Else
            mCos = CDec(Math.Cos(degree * Math.PI / 180))
        End If
        Return mCos

    End Function

    ''' <summary>[推算旋轉偏移後的座標]</summary>
    ''' <param name="IsRummyRun"></param>
    ''' <param name="Angle"></param>
    ''' <param name="CenPos"></param>
    ''' <param name="InPos"></param>
    ''' <param name="OutPos"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function TransformRotation(ByVal isRummyRun As Boolean, ByVal angle As Decimal, ByVal cenPos As Premtek.sPos, ByVal inPos As Premtek.sPos, ByRef outPos As Premtek.sPos) As Boolean

        Dim mCos As Decimal
        Dim mSin As Decimal

        If isRummyRun = True Then
            angle = 0
        End If
        mCos = CosTrigonometricFunction(-1 * angle)
        mSin = SinTrigonometricFunction(-1 * angle)
        outPos.PosX = CDec(Format((((inPos.PosX - cenPos.PosX) * mCos) - ((inPos.PosY - cenPos.PosY) * mSin)) + cenPos.PosX, "0.000"))
        outPos.PosY = CDec(Format((((inPos.PosX - cenPos.PosX) * mSin) + ((inPos.PosY - cenPos.PosY) * mCos)) + cenPos.PosY, "0.000"))
        Return True

    End Function

    ''' <summary>[取該顆之極限位置]</summary>
    ''' <param name="dispParam"></param>
    ''' <param name="limitPos"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GetLimitPos(ByVal dispParam As sDispParam, ByRef limitPos As Premtek.sPos, ByRef pathCount As Integer) As Boolean

        Static mTiltValue(enmStage.Max) As Decimal                             '[Tilt角度]
        Static mNeedTh(enmStage.Max) As Premtek.sPos                                   '[待旋轉的位置]
        Static mBasicPos(enmStage.Max) As Premtek.sPos                                 '[BasicPos + Pitch -(Ccd至Valve的相對位置)]
        Static mCenterPos(enmStage.Max) As Premtek.sPos                                '[中心點座標]
        Static mTh(enmStage.Max) As Decimal                                    '[旋轉角度] 

        Dim mArcExtendOffsetCutIn(enmStage.Max) As Premtek.sPos
        Dim mArcExtendOffsetCutOut(enmStage.Max) As Premtek.sPos
        Dim mRunUp(enmStage.Max) As sExtendParam                                '[助跑資料]
        Dim mDotWeight(enmStage.Max) As Decimal                                 '[mg]
        Dim mCycleTimes(enmStage.Max) As Decimal                                '[ms]
        Dim mIsExtendOn(enmStage.Max) As Boolean
        Dim mPath(enmStage.Max) As sPatternPath
        Dim mArrayIndexX(enmStage.Max) As Integer
        Dim mArrayIndexY(enmStage.Max) As Integer
        Dim mStandardPos(enmStage.Max) As Premtek.sPos                              '[旋轉前的座標]
        Dim mTransformPos(enmStage.Max) As Premtek.sPos                             '[旋轉後的座標]
        Dim mI(enmStage.Max) As Integer
        Dim mJ(enmStage.Max) As Integer
        Dim mDieStartIndex(enmStage.Max) As Integer                         '[從哪一顆開始]
        Dim mDieEndIndex(enmStage.Max) As Integer                           '[到哪一顆結束]
        Dim mStartStepIndex(enmStage.Max) As Integer                        '[從哪一個Step開始]
        Dim mEndStepIndex(enmStage.Max) As Integer                          '[到哪一個Step結束]
        Dim mLimitPos(enmStage.Max) As Premtek.sPos                                 '[估算極限位置]
        Dim mPathCount As Integer

        mLimitPos(dispParam.StageNo).PosX = 0
        mLimitPos(dispParam.StageNo).PosY = 0

        Select Case dispParam.DispDieType
            Case enmDispMultiDie.SingleDie
                mDieStartIndex(dispParam.StageNo) = dispParam.SingleDieParam.DieIndex
                mDieEndIndex(dispParam.StageNo) = dispParam.SingleDieParam.DieIndex
                'mStartStepIndex(dispParam.StageNo) = dispParam.SingleDieParam.StartStep
                'mEndStepIndex(dispParam.StageNo) = dispParam.SingleDieParam.EndStep
                mStartStepIndex(dispParam.StageNo) = 0
                mEndStepIndex(dispParam.StageNo) = dispParam.Pattern.Round(dispParam.RoundNo).StepCount - 1

            Case enmDispMultiDie.MultiDie
                mDieStartIndex(dispParam.StageNo) = dispParam.MulitDieParam.Start
                mDieEndIndex(dispParam.StageNo) = dispParam.MulitDieParam.Ending
                mStartStepIndex(dispParam.StageNo) = 0
                mEndStepIndex(dispParam.StageNo) = dispParam.Pattern.Round(dispParam.RoundNo).StepCount - 1

        End Select


        'Step2:從哪一顆做到哪一顆
        For mI(dispParam.StageNo) = mDieStartIndex(dispParam.StageNo) To mDieEndIndex(dispParam.StageNo)
            'Step3:先取出該顆BasicPos，再做處理
            With dispParam
                mArrayIndexX(dispParam.StageNo) = .DispList.Item(mI(dispParam.StageNo)).IndexX
                mArrayIndexY(dispParam.StageNo) = .DispList.Item(mI(dispParam.StageNo)).IndexY
            End With

            mIsExtendOn(dispParam.StageNo) = True

            '[Note]:每個Step
            For mJ(dispParam.StageNo) = mStartStepIndex(dispParam.StageNo) To mEndStepIndex(dispParam.StageNo)
                '[Note]:將每個Step資料暫存至暫存器
                '       先經過旋轉傳換後再將座標塞進暫存器(先不處理Z軸)

                Select Case dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).StepType

                    Case eStepFunctionType.SelectValve
                        mTiltValue(dispParam.StageNo) = dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).SelectValve.PosB
                        '[Note]:由於考量到Tilt角度問題，故原本記錄整體偏移量的改在選Valve後處理。
                        With gStageMap(dispParam.StageNo).Node(dispParam.NodeName).SRecipePos(mArrayIndexX(dispParam.StageNo), mArrayIndexY(dispParam.StageNo))
                            mBasicPos(dispParam.StageNo).PosX = .RealBasicPosX
                            mBasicPos(dispParam.StageNo).PosY = .RealBasicPosY
                            mBasicPos(dispParam.StageNo).PosZ = gStageMap(dispParam.StageNo).Node(dispParam.NodeName).SLaserValue(mArrayIndexX(dispParam.StageNo), mArrayIndexY(dispParam.StageNo)).RealBasicZHigh

                            mNeedTh(dispParam.StageNo).PosX = -gSSystemParameter.Pos.CCDTiltVavleCalbration(dispParam.StageNo).CCDTiltValveOffsetX(dispParam.SelectValve, mTiltValue(dispParam.StageNo)) + dispParam.Recipe.StageParts(dispParam.StageNo).ValveShiftX(dispParam.SelectValve)
                            mNeedTh(dispParam.StageNo).PosY = -gSSystemParameter.Pos.CCDTiltVavleCalbration(dispParam.StageNo).CCDTiltValveOffsetY(dispParam.SelectValve, mTiltValue(dispParam.StageNo)) + dispParam.Recipe.StageParts(dispParam.StageNo).ValveShiftY(dispParam.SelectValve)
                            '[Note]:以點膠基準點為中心做旋轉(點交基準點在定位完成的時候已經做過旋轉平移修正[是以Golden Pattern為旋轉中心])
                            mCenterPos(dispParam.StageNo).PosX = 0
                            mCenterPos(dispParam.StageNo).PosY = 0
                            mTh(dispParam.StageNo) = .RealBasicPosTh
                        End With


                        'Step1:取出CycleTime
                        If gJetValveDB.ContainsKey(dispParam.Recipe.StageParts(dispParam.StageNo).ValveName(dispParam.SelectValve)) = True Then
                            Select Case gJetValveDB(dispParam.Recipe.StageParts(dispParam.StageNo).ValveName(dispParam.SelectValve)).ValveModel
                                Case eValveModel.PicoPulse
                                    mCycleTimes(dispParam.StageNo) = gJetValveDB(dispParam.Recipe.StageParts(dispParam.StageNo).ValveName(dispParam.SelectValve)).PicoTouch.CycleTime
                                Case eValveModel.Advanjet
                                    mCycleTimes(dispParam.StageNo) = gJetValveDB(dispParam.Recipe.StageParts(dispParam.StageNo).ValveName(dispParam.SelectValve)).Advanjet.CycleTime
                            End Select
                        Else
                            Return False
                        End If

                        '[Note]:取出單點重量
                        mDotWeight(dispParam.StageNo) = gCRecipe.StageParts(dispParam.StageNo).AverageWeightPerDot(dispParam.SelectValve)


                    Case eStepFunctionType.ContiStart, eStepFunctionType.ContiEnd, eStepFunctionType.Wait
                        '[Note]:不處理

                    Case eStepFunctionType.ExtendOn
                        mIsExtendOn(dispParam.StageNo) = True

                    Case eStepFunctionType.ExtendOff
                        mIsExtendOn(dispParam.StageNo) = False

                    Case eStepFunctionType.Arc2D
                        With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Arc2D
                            mPath(dispParam.StageNo).Arc2D.ArcDirection = .Angle
                            '[Note]:圓心點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .CenterPosX
                            mStandardPos(dispParam.StageNo).PosY = .CenterPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Arc2D.CenterPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX
                            mPath(dispParam.StageNo).Arc2D.CenterPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY
                            '[Note]:終點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .EndPosX
                            mStandardPos(dispParam.StageNo).PosY = .EndPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Arc2D.EndPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX
                            mPath(dispParam.StageNo).Arc2D.EndPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY
                            mPath(dispParam.StageNo).PathType = ePathType.Arc2D
                        End With

                        If mIsExtendOn(dispParam.StageNo) = True Then
                            '[Note]:算出需助跑的資料
                            Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes(dispParam.StageNo), mDotWeight(dispParam.StageNo), mPath(dispParam.StageNo), mRunUp(dispParam.StageNo))
                            Call EstimateArcExtendPath(mPath(dispParam.StageNo), mRunUp(dispParam.StageNo).Distance, mArcExtendOffsetCutIn(dispParam.StageNo), mArcExtendOffsetCutOut(dispParam.StageNo))
                        Else
                            mArcExtendOffsetCutIn(dispParam.StageNo).PosX = 0
                            mArcExtendOffsetCutOut(dispParam.StageNo).PosX = 0
                        End If

                        '[Note]:估算極限位置
                        Select Case dispParam.StageNo
                            Case enmStage.No1, enmStage.No3
                                '[Note]:取X最大值
                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.StartPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.StartPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.StartPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.StartPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                            Case enmStage.No2, enmStage.No4
                                '[Note]:取X最小值
                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.StartPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.StartPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.StartPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.StartPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                        End Select
                        If mLimitPos(dispParam.StageNo).PosY > mPath(dispParam.StageNo).Arc2D.EndPosY Then
                            mLimitPos(dispParam.StageNo).PosY = mPath(dispParam.StageNo).Arc2D.EndPosY
                        End If
                        mPathCount = mPathCount + 1

                    Case eStepFunctionType.Circle2D
                        With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Circle2D
                            mPath(dispParam.StageNo).Arc2D.ArcDirection = eArcDirection.CW
                            '[Note]:圓心點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .CenterPosX
                            mStandardPos(dispParam.StageNo).PosY = .CenterPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Arc2D.CenterPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX
                            mPath(dispParam.StageNo).Arc2D.CenterPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY
                            '[Note]:終點座標轉換
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Arc2D.EndPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX
                            mPath(dispParam.StageNo).Arc2D.EndPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY
                            mPath(dispParam.StageNo).PathType = ePathType.Arc2D
                        End With

                        If mIsExtendOn(dispParam.StageNo) = True Then
                            '[Note]:算出需助跑的資料
                            Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes(dispParam.StageNo), mDotWeight(dispParam.StageNo), mPath(dispParam.StageNo), mRunUp(dispParam.StageNo))
                            Call EstimateArcExtendPath(mPath(dispParam.StageNo), mRunUp(dispParam.StageNo).Distance, mArcExtendOffsetCutIn(dispParam.StageNo), mArcExtendOffsetCutOut(dispParam.StageNo))
                        Else
                            mArcExtendOffsetCutIn(dispParam.StageNo).PosX = 0
                            mArcExtendOffsetCutOut(dispParam.StageNo).PosX = 0
                        End If

                        '[Note]:估算極限位置
                        Select Case dispParam.StageNo
                            Case enmStage.No1, enmStage.No3
                                '[Note]:取X最大值
                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                            Case enmStage.No2, enmStage.No4
                                '[Note]:取X最小值
                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                        End Select

                        If mLimitPos(dispParam.StageNo).PosY > mPath(dispParam.StageNo).Arc2D.EndPosY Then
                            mLimitPos(dispParam.StageNo).PosY = mPath(dispParam.StageNo).Arc2D.EndPosY
                        End If
                        mPathCount = mPathCount + 1

                    Case eStepFunctionType.Dots3D
                        With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Dots3D
                            '[Note]:點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .PosX
                            mStandardPos(dispParam.StageNo).PosY = .PosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Dot3D.PosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX
                            mPath(dispParam.StageNo).Dot3D.PosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY
                            mPath(dispParam.StageNo).Dot3D.PosZ = .PosZ + mBasicPos(dispParam.StageNo).PosZ
                            mPath(dispParam.StageNo).PathType = ePathType.Dot3D
                        End With
                        '[Note]:估算極限位置
                        Select Case dispParam.StageNo
                            Case enmStage.No1, enmStage.No3
                                '[Note]:取X最大值
                                If mLimitPos(dispParam.StageNo).PosX < mPath(dispParam.StageNo).Dot3D.PosX Then
                                    mLimitPos(dispParam.StageNo).PosX = mPath(dispParam.StageNo).Dot3D.PosX
                                End If
                            Case enmStage.No2, enmStage.No4
                                '[Note]:取X最小值
                                If mLimitPos(dispParam.StageNo).PosX > mPath(dispParam.StageNo).Dot3D.PosX Then
                                    mLimitPos(dispParam.StageNo).PosX = mPath(dispParam.StageNo).Dot3D.PosX
                                End If
                        End Select
                        If mLimitPos(dispParam.StageNo).PosY > mPath(dispParam.StageNo).Dot3D.PosY Then
                            mLimitPos(dispParam.StageNo).PosY = mPath(dispParam.StageNo).Dot3D.PosY
                        End If
                        mPathCount = mPathCount + 1

                    Case eStepFunctionType.Line3D
                        With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Line3D
                            '[Note]:起點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .StartPosX
                            mStandardPos(dispParam.StageNo).PosY = .StartPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Line3D.StartPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX
                            mPath(dispParam.StageNo).Line3D.StartPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY
                            mPath(dispParam.StageNo).Line3D.StartPosZ = .StartPosZ + mBasicPos(dispParam.StageNo).PosZ
                            '[Note]:終點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .EndPosX
                            mStandardPos(dispParam.StageNo).PosY = .EndPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Line3D.EndPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX
                            mPath(dispParam.StageNo).Line3D.EndPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY
                            mPath(dispParam.StageNo).Line3D.EndPosZ = .EndPosZ + mBasicPos(dispParam.StageNo).PosZ
                            mPath(dispParam.StageNo).PathType = ePathType.Line3D
                        End With

                        If mIsExtendOn(dispParam.StageNo) = True Then
                            '[Note]:算出需助跑的資料
                            Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes(dispParam.StageNo), mDotWeight(dispParam.StageNo), mPath(dispParam.StageNo), mRunUp(dispParam.StageNo))
                        Else
                            mRunUp(dispParam.StageNo).DistancePosX = 0
                            mRunUp(dispParam.StageNo).DistancePosY = 0
                        End If


                        '[Note]:估算極限位置
                        Select Case dispParam.StageNo
                            Case enmStage.No1, enmStage.No3
                                '[Note]:取X最大值
                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Line3D.StartPosX - mRunUp(dispParam.StageNo).DistancePosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Line3D.StartPosX - mRunUp(dispParam.StageNo).DistancePosX)
                                End If
                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Line3D.EndPosX + mRunUp(dispParam.StageNo).DistancePosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Line3D.EndPosX + mRunUp(dispParam.StageNo).DistancePosX)
                                End If

                            Case enmStage.No2, enmStage.No4
                                '[Note]:取X最小值
                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Line3D.StartPosX - mRunUp(dispParam.StageNo).DistancePosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Line3D.StartPosX - mRunUp(dispParam.StageNo).DistancePosX)
                                End If
                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Line3D.EndPosX + mRunUp(dispParam.StageNo).DistancePosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Line3D.EndPosX + mRunUp(dispParam.StageNo).DistancePosX)
                                End If

                        End Select

                        mPathCount = mPathCount + 1

                    Case eStepFunctionType.Circle3D
                        With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Circle3D
                            mPath(dispParam.StageNo).Arc2D.ArcDirection = eArcDirection.CW
                            '[Note]:圓心點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .CenterPosX
                            mStandardPos(dispParam.StageNo).PosY = .CenterPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Arc2D.CenterPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX
                            mPath(dispParam.StageNo).Arc2D.CenterPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY
                            '[Note]:終點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .EndPosX
                            mStandardPos(dispParam.StageNo).PosY = .EndPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Arc2D.EndPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX
                            mPath(dispParam.StageNo).Arc2D.EndPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY
                            mPath(dispParam.StageNo).PathType = ePathType.Arc2D
                        End With

                        If mIsExtendOn(dispParam.StageNo) = True Then
                            '[Note]:算出需助跑的資料
                            Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes(dispParam.StageNo), mDotWeight(dispParam.StageNo), mPath(dispParam.StageNo), mRunUp(dispParam.StageNo))
                            Call EstimateArcExtendPath(mPath(dispParam.StageNo), mRunUp(dispParam.StageNo).Distance, mArcExtendOffsetCutIn(dispParam.StageNo), mArcExtendOffsetCutOut(dispParam.StageNo))
                        Else
                            mArcExtendOffsetCutIn(dispParam.StageNo).PosX = 0
                            mArcExtendOffsetCutOut(dispParam.StageNo).PosX = 0
                        End If

                        '[Note]:估算極限位置
                        Select Case dispParam.StageNo
                            Case enmStage.No1, enmStage.No3
                                '[Note]:取X最大值
                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                            Case enmStage.No2, enmStage.No4
                                '[Note]:取X最小值
                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                        End Select

                        If mLimitPos(dispParam.StageNo).PosY > mPath(dispParam.StageNo).Arc2D.EndPosY Then
                            mLimitPos(dispParam.StageNo).PosY = mPath(dispParam.StageNo).Arc2D.EndPosY
                        End If
                        mPathCount = mPathCount + 1

                    Case eStepFunctionType.Arc3D
                        With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Arc3D
                            mPath(dispParam.StageNo).Arc2D.ArcDirection = .Angle
                            '[Note]:圓心點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .CenterPosX
                            mStandardPos(dispParam.StageNo).PosY = .CenterPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Arc2D.CenterPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX
                            mPath(dispParam.StageNo).Arc2D.CenterPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY
                            '[Note]:終點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .EndPosX
                            mStandardPos(dispParam.StageNo).PosY = .EndPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Arc2D.EndPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX
                            mPath(dispParam.StageNo).Arc2D.EndPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY
                            mPath(dispParam.StageNo).PathType = ePathType.Arc2D
                        End With

                        If mIsExtendOn(dispParam.StageNo) = True Then
                            '[Note]:算出需助跑的資料
                            Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes(dispParam.StageNo), mDotWeight(dispParam.StageNo), mPath(dispParam.StageNo), mRunUp(dispParam.StageNo))
                            Call EstimateArcExtendPath(mPath(dispParam.StageNo), mRunUp(dispParam.StageNo).Distance, mArcExtendOffsetCutIn(dispParam.StageNo), mArcExtendOffsetCutOut(dispParam.StageNo))
                        Else
                            mArcExtendOffsetCutIn(dispParam.StageNo).PosX = 0
                            mArcExtendOffsetCutOut(dispParam.StageNo).PosX = 0
                        End If

                        '[Note]:估算極限位置
                        Select Case dispParam.StageNo
                            Case enmStage.No1, enmStage.No3
                                '[Note]:取X最大值
                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.StartPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.StartPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.StartPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.StartPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                            Case enmStage.No2, enmStage.No4
                                '[Note]:取X最小值
                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.StartPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.StartPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.StartPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.StartPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                        End Select

                        If mLimitPos(dispParam.StageNo).PosY > mPath(dispParam.StageNo).Arc2D.EndPosY Then
                            mLimitPos(dispParam.StageNo).PosY = mPath(dispParam.StageNo).Arc2D.EndPosY
                        End If
                        mPathCount = mPathCount + 1

                    Case eStepFunctionType.Move3D
                        With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Move3D
                            '[Note]:終點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .EndPosX
                            mStandardPos(dispParam.StageNo).PosY = .EndPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Dot3D.PosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX
                            mPath(dispParam.StageNo).Dot3D.PosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY
                            mPath(dispParam.StageNo).Dot3D.PosZ = .EndPosZ + mBasicPos(dispParam.StageNo).PosZ
                            mPath(dispParam.StageNo).PathType = ePathType.Dot3D
                        End With
                        '[Note]:估算極限位置
                        Select Case dispParam.StageNo
                            Case enmStage.No1, enmStage.No3
                                '[Note]:取X最大值
                                If mLimitPos(dispParam.StageNo).PosX < mPath(dispParam.StageNo).Dot3D.PosX Then
                                    mLimitPos(dispParam.StageNo).PosX = mPath(dispParam.StageNo).Dot3D.PosX
                                End If
                            Case enmStage.No2, enmStage.No4
                                '[Note]:取X最小值
                                If mLimitPos(dispParam.StageNo).PosX > mPath(dispParam.StageNo).Dot3D.PosX Then
                                    mLimitPos(dispParam.StageNo).PosX = mPath(dispParam.StageNo).Dot3D.PosX
                                End If
                        End Select
                        If mLimitPos(dispParam.StageNo).PosY > mPath(dispParam.StageNo).Dot3D.PosY Then
                            mLimitPos(dispParam.StageNo).PosY = mPath(dispParam.StageNo).Dot3D.PosY
                        End If

                    Case Else
                        '[Note]:不處理

                End Select
            Next
        Next
        limitPos = mLimitPos(dispParam.StageNo)
        pathCount = mPathCount
        Return True

    End Function

    ''' <summary>[判斷要走哪一類型點膠(藉由Recipe or是否需要做延伸路徑來判斷)(節點串接專用)]</summary>
    ''' <param name="dispParam"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function EstimateDispHistoryModel(ByVal stageNo As enmStage, ByVal dispParam As List(Of sDispParam)) As eDispHistoryModel

        Dim mI(enmStage.Max) As Integer
        Dim mJ(enmStage.Max) As Integer
        Dim mStartStepIndex(enmStage.Max) As Integer                        '[從哪一個Step開始]
        Dim mEndStepIndex(enmStage.Max) As Integer                          '[到哪一個Step結束]
        Dim mIsExtendPath(enmStage.Max) As Boolean                          '[路徑是否需延伸，預設為需要]
        Dim mLastPathPos(enmStage.Max) As Premtek.sPos                              '[上一筆路徑的端點]
        Dim mIsDispHistoryModel(enmStage.Max) As eDispHistoryModel
        Dim mK(enmStage.Max) As Integer
        Dim mIsFristPath(enmStage.Max) As Boolean

        '[Note]:強制開啟跑 NonhistoryModel點膠
        If dispParam(0).Recipe.DispHistory = eDispHistoryModel.DispNonHistory Then
            Return eDispHistoryModel.DispNonHistory
        End If

        '[Note]:一開始的設定就是強制延伸，走NonHistory模式。
        mIsDispHistoryModel(stageNo) = eDispHistoryModel.DispNonHistory
        mIsExtendPath(stageNo) = True
        mIsFristPath(stageNo) = True

        For mK(stageNo) = 0 To dispParam.Count - 1
            Select Case dispParam(mK(stageNo)).DispDieType
                Case enmDispMultiDie.SingleDie
                    mStartStepIndex(stageNo) = dispParam(mK(stageNo)).SingleDieParam.StartStep
                    mEndStepIndex(stageNo) = dispParam(mK(stageNo)).SingleDieParam.EndStep

                Case enmDispMultiDie.MultiDie
                    mStartStepIndex(stageNo) = 0
                    mEndStepIndex(stageNo) = dispParam(mK(stageNo)).Pattern.Round(dispParam(mK(stageNo)).RoundNo).StepCount - 1

            End Select

            '[Note]:每個Step
            For mJ(stageNo) = mStartStepIndex(stageNo) To mEndStepIndex(stageNo)
                '[Note]:將每個Step資料暫存至暫存器
                '       先經過旋轉傳換後再將座標塞進暫存器(先不處理Z軸)
                Select Case dispParam(mK(stageNo)).Pattern.Round(dispParam(mK(stageNo)).RoundNo).CStep(mJ(dispParam(mK(stageNo)).StageNo)).StepType
                    Case eStepFunctionType.SelectValve, eStepFunctionType.ContiStart, eStepFunctionType.ContiEnd
                        '[Note]:不處理
                        'mIsExtendPath(stageNo) = True Soni / 2017.08.24

                    Case eStepFunctionType.ExtendOff
                        mIsExtendPath(stageNo) = False

                    Case eStepFunctionType.ExtendOn
                        mIsExtendPath(stageNo) = True

                    Case eStepFunctionType.Arc2D
                        With dispParam(mK(stageNo)).Pattern.Round(dispParam(mK(stageNo)).RoundNo).CStep(mJ(dispParam(mK(stageNo)).StageNo)).Arc2D
                            If mIsFristPath(stageNo) = True Then
                                mIsFristPath(stageNo) = False
                            Else
                                '[Note]:比對上一條路徑的終點是否為目前這條線段的起點
                                If Math.Abs(mLastPathPos(stageNo).PosX - .StartPosX) < gSSystemParameter.MotionTolerance Then
                                    If Math.Abs(mLastPathPos(dispParam(mK(stageNo)).StageNo).PosY - .StartPosY) < gSSystemParameter.MotionTolerance Then
                                        If mIsExtendPath(stageNo) = False Then
                                            mIsDispHistoryModel(stageNo) = eDispHistoryModel.DispHistory
                                            Return mIsDispHistoryModel(stageNo)
                                            Exit For
                                        End If
                                    End If
                                End If
                            End If

                            '[Note]:記錄端點座標
                            mLastPathPos(stageNo).PosX = .EndPosX
                            mLastPathPos(stageNo).PosY = .EndPosY
                        End With

                    Case eStepFunctionType.Circle2D
                        With dispParam(mK(stageNo)).Pattern.Round(dispParam(mK(stageNo)).RoundNo).CStep(mJ(stageNo)).Circle2D
                            If mIsFristPath(stageNo) = True Then
                                mIsFristPath(stageNo) = False
                            Else
                                '[Note]:比對上一條路徑的終點是否為目前這條線段的起點
                                If Math.Abs(mLastPathPos(stageNo).PosX - .EndPosX) < gSSystemParameter.MotionTolerance Then
                                    If Math.Abs(mLastPathPos(stageNo).PosY - .EndPosY) < gSSystemParameter.MotionTolerance Then
                                        If mIsExtendPath(stageNo) = False Then
                                            mIsDispHistoryModel(stageNo) = eDispHistoryModel.DispHistory
                                            Return mIsDispHistoryModel(stageNo)
                                            Exit For
                                        End If
                                    End If
                                End If
                            End If

                            '[Note]:記錄端點座標
                            mLastPathPos(stageNo).PosX = .EndPosX
                            mLastPathPos(stageNo).PosY = .EndPosY
                        End With

                    Case eStepFunctionType.Dots3D
                        With dispParam(mK(stageNo)).Pattern.Round(dispParam(mK(stageNo)).RoundNo).CStep(mJ(stageNo)).Dots3D
                            If mIsFristPath(stageNo) = True Then
                                mIsFristPath(stageNo) = False
                            Else
                                '[Note]:比對上一條路徑的終點是否為目前這條線段的起點
                                If Math.Abs(mLastPathPos(stageNo).PosX - .PosX) < gSSystemParameter.MotionTolerance Then
                                    If Math.Abs(mLastPathPos(stageNo).PosY - .PosY) < gSSystemParameter.MotionTolerance Then
                                        If mIsExtendPath(stageNo) = False Then
                                            mIsDispHistoryModel(stageNo) = eDispHistoryModel.DispHistory
                                            Return mIsDispHistoryModel(stageNo)
                                            Exit For
                                        End If
                                    End If
                                End If
                            End If

                            '[Note]:記錄端點座標
                            mLastPathPos(stageNo).PosX = .PosX
                            mLastPathPos(stageNo).PosY = .PosY
                        End With

                    Case eStepFunctionType.Line3D
                        With dispParam(mK(stageNo)).Pattern.Round(dispParam(mK(stageNo)).RoundNo).CStep(mJ(stageNo)).Line3D
                            If mIsFristPath(stageNo) = True Then
                                mIsFristPath(stageNo) = False
                            Else
                                '[Note]:比對上一條路徑的終點是否為目前這條線段的起點
                                If Math.Abs(mLastPathPos(stageNo).PosX - .StartPosX) < gSSystemParameter.MotionTolerance Then
                                    If Math.Abs(mLastPathPos(stageNo).PosY - .StartPosY) < gSSystemParameter.MotionTolerance Then
                                        If mIsExtendPath(stageNo) = False Then
                                            mIsDispHistoryModel(stageNo) = eDispHistoryModel.DispHistory
                                            Return mIsDispHistoryModel(stageNo)
                                            Exit For
                                        End If
                                    End If
                                End If
                            End If

                            '[Note]:記錄端點座標
                            mLastPathPos(stageNo).PosX = .EndPosX
                            mLastPathPos(stageNo).PosY = .EndPosY
                        End With

                    Case eStepFunctionType.Circle3D
                        With dispParam(mK(stageNo)).Pattern.Round(dispParam(mK(stageNo)).RoundNo).CStep(mJ(stageNo)).Circle3D
                            If mIsFristPath(stageNo) = True Then
                                mIsFristPath(stageNo) = False
                            Else
                                '[Note]:比對上一條路徑的終點是否為目前這條線段的起點
                                If Math.Abs(mLastPathPos(stageNo).PosX - .EndPosX) < gSSystemParameter.MotionTolerance Then
                                    If Math.Abs(mLastPathPos(stageNo).PosY - .EndPosY) < gSSystemParameter.MotionTolerance Then
                                        If mIsExtendPath(stageNo) = False Then
                                            mIsDispHistoryModel(stageNo) = eDispHistoryModel.DispHistory
                                            Return mIsDispHistoryModel(stageNo)
                                            Exit For
                                        End If
                                    End If
                                End If
                            End If

                            '[Note]:記錄端點座標
                            mLastPathPos(stageNo).PosX = .EndPosX
                            mLastPathPos(stageNo).PosY = .EndPosY
                        End With

                    Case eStepFunctionType.Arc3D
                        With dispParam(mK(stageNo)).Pattern.Round(dispParam(mK(stageNo)).RoundNo).CStep(mJ(stageNo)).Arc3D
                            If mIsFristPath(stageNo) = True Then
                                mIsFristPath(stageNo) = False
                            Else
                                '[Note]:比對上一條路徑的終點是否為目前這條線段的起點
                                If Math.Abs(mLastPathPos(stageNo).PosX - .EndPosX) < gSSystemParameter.MotionTolerance Then
                                    If Math.Abs(mLastPathPos(stageNo).PosY - .EndPosY) < gSSystemParameter.MotionTolerance Then
                                        If mIsExtendPath(stageNo) = False Then
                                            mIsDispHistoryModel(stageNo) = eDispHistoryModel.DispHistory
                                            Return mIsDispHistoryModel(stageNo)
                                            Exit For
                                        End If
                                    End If
                                End If
                            End If

                            '[Note]:記錄端點座標
                            mLastPathPos(stageNo).PosX = .EndPosX
                            mLastPathPos(stageNo).PosY = .EndPosY
                        End With

                    Case Else
                        '[Note]:不處理

                End Select
            Next
        Next
        Return mIsDispHistoryModel(stageNo)

    End Function

    ''' <summary>[判斷要走哪一類型點膠(藉由Recipe or是否需要做延伸路徑來判斷)]</summary>
    ''' <param name="dispParam"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function EstimateDispHistoryModel(ByVal dispParam As sDispParam) As eDispHistoryModel

        Dim mI(enmStage.Max) As Integer
        Dim mJ(enmStage.Max) As Integer
        Dim mStartStepIndex(enmStage.Max) As Integer                        '[從哪一個Step開始]
        Dim mEndStepIndex(enmStage.Max) As Integer                          '[到哪一個Step結束]
        Dim mIsExtendPath(enmStage.Max) As Boolean                          '[路徑是否需延伸，預設為需要]
        Dim mLastPathPos(enmStage.Max) As Premtek.sPos                              '[上一筆路徑的端點]
        Dim mIsDispHistoryModel(enmStage.Max) As eDispHistoryModel
        Dim mIsFristPath(enmStage.Max) As Boolean

        '[Note]:強制開啟跑 NonhistoryModel點膠
        If dispParam.Recipe.DispHistory = eDispHistoryModel.DispNonHistory Then
            Return eDispHistoryModel.DispNonHistory
        End If

        Select Case dispParam.DispDieType
            Case enmDispMultiDie.SingleDie
                mStartStepIndex(dispParam.StageNo) = dispParam.SingleDieParam.StartStep
                mEndStepIndex(dispParam.StageNo) = dispParam.SingleDieParam.EndStep

            Case enmDispMultiDie.MultiDie
                mStartStepIndex(dispParam.StageNo) = 0
                mEndStepIndex(dispParam.StageNo) = dispParam.Pattern.Round(dispParam.RoundNo).StepCount - 1

        End Select

        '[Note]:一開始的設定就是強制延伸，走NonHistory模式。
        mIsDispHistoryModel(dispParam.StageNo) = eDispHistoryModel.DispNonHistory
        mIsExtendPath(dispParam.StageNo) = True
        mIsFristPath(dispParam.StageNo) = True
        '[Note]:每個Step
        For mJ(dispParam.StageNo) = mStartStepIndex(dispParam.StageNo) To mEndStepIndex(dispParam.StageNo)
            '[Note]:將每個Step資料暫存至暫存器
            '       先經過旋轉傳換後再將座標塞進暫存器(先不處理Z軸)
            Select Case dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).StepType
                Case eStepFunctionType.SelectValve, eStepFunctionType.ContiStart, eStepFunctionType.ContiEnd
                    '[Note]:不處理
                    mIsExtendPath(dispParam.StageNo) = True

                Case eStepFunctionType.ExtendOff
                    mIsExtendPath(dispParam.StageNo) = False

                Case eStepFunctionType.ExtendOn
                    mIsExtendPath(dispParam.StageNo) = True

                Case eStepFunctionType.Arc2D
                    With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Arc2D
                        If mIsFristPath(dispParam.StageNo) = True Then
                            mIsFristPath(dispParam.StageNo) = False
                        Else
                            '[Note]:比對上一條路徑的終點是否為目前這條線段的起點
                            If Math.Abs(mLastPathPos(dispParam.StageNo).PosX - .StartPosX) < gSSystemParameter.MotionTolerance Then
                                If Math.Abs(mLastPathPos(dispParam.StageNo).PosY - .StartPosY) < gSSystemParameter.MotionTolerance Then
                                    If mIsExtendPath(dispParam.StageNo) = False Then
                                        mIsDispHistoryModel(dispParam.StageNo) = eDispHistoryModel.DispHistory
                                        Return mIsDispHistoryModel(dispParam.StageNo)
                                        Exit For
                                    End If
                                End If
                            End If
                        End If

                        '[Note]:記錄端點座標
                        mLastPathPos(dispParam.StageNo).PosX = .EndPosX
                        mLastPathPos(dispParam.StageNo).PosY = .EndPosY
                    End With

                Case eStepFunctionType.Circle2D
                    With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Circle2D
                        If mIsFristPath(dispParam.StageNo) = True Then
                            mIsFristPath(dispParam.StageNo) = False
                        Else
                            '[Note]:比對上一條路徑的終點是否為目前這條線段的起點
                            If Math.Abs(mLastPathPos(dispParam.StageNo).PosX - .EndPosX) < gSSystemParameter.MotionTolerance Then
                                If Math.Abs(mLastPathPos(dispParam.StageNo).PosY - .EndPosY) < gSSystemParameter.MotionTolerance Then
                                    If mIsExtendPath(dispParam.StageNo) = False Then
                                        mIsDispHistoryModel(dispParam.StageNo) = eDispHistoryModel.DispHistory
                                        Return mIsDispHistoryModel(dispParam.StageNo)
                                        Exit For
                                    End If
                                End If
                            End If
                        End If

                        '[Note]:記錄端點座標
                        mLastPathPos(dispParam.StageNo).PosX = .EndPosX
                        mLastPathPos(dispParam.StageNo).PosY = .EndPosY
                    End With

                Case eStepFunctionType.Dots3D
                    With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Dots3D
                        If mIsFristPath(dispParam.StageNo) = True Then
                            mIsFristPath(dispParam.StageNo) = False
                        Else
                            '[Note]:比對上一條路徑的終點是否為目前這條線段的起點
                            If Math.Abs(mLastPathPos(dispParam.StageNo).PosX - .PosX) < gSSystemParameter.MotionTolerance Then
                                If Math.Abs(mLastPathPos(dispParam.StageNo).PosY - .PosY) < gSSystemParameter.MotionTolerance Then
                                    If mIsExtendPath(dispParam.StageNo) = False Then
                                        mIsDispHistoryModel(dispParam.StageNo) = eDispHistoryModel.DispHistory
                                        Return mIsDispHistoryModel(dispParam.StageNo)
                                        Exit For
                                    End If
                                End If
                            End If
                        End If

                        '[Note]:記錄端點座標
                        mLastPathPos(dispParam.StageNo).PosX = .PosX
                        mLastPathPos(dispParam.StageNo).PosY = .PosY
                    End With

                Case eStepFunctionType.Line3D
                    With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Line3D
                        If mIsFristPath(dispParam.StageNo) = True Then
                            mIsFristPath(dispParam.StageNo) = False
                        Else
                            '[Note]:比對上一條路徑的終點是否為目前這條線段的起點
                            If Math.Abs(mLastPathPos(dispParam.StageNo).PosX - .StartPosX) < gSSystemParameter.MotionTolerance Then
                                If Math.Abs(mLastPathPos(dispParam.StageNo).PosY - .StartPosY) < gSSystemParameter.MotionTolerance Then
                                    If mIsExtendPath(dispParam.StageNo) = False Then
                                        mIsDispHistoryModel(dispParam.StageNo) = eDispHistoryModel.DispHistory
                                        Return mIsDispHistoryModel(dispParam.StageNo)
                                        Exit For
                                    End If
                                End If
                            End If
                        End If

                        '[Note]:記錄端點座標
                        mLastPathPos(dispParam.StageNo).PosX = .EndPosX
                        mLastPathPos(dispParam.StageNo).PosY = .EndPosY
                    End With

                Case eStepFunctionType.Circle3D
                    With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Circle3D
                        If mIsFristPath(dispParam.StageNo) = True Then
                            mIsFristPath(dispParam.StageNo) = False
                        Else
                            '[Note]:比對上一條路徑的終點是否為目前這條線段的起點
                            If Math.Abs(mLastPathPos(dispParam.StageNo).PosX - .EndPosX) < gSSystemParameter.MotionTolerance Then
                                If Math.Abs(mLastPathPos(dispParam.StageNo).PosY - .EndPosY) < gSSystemParameter.MotionTolerance Then
                                    If mIsExtendPath(dispParam.StageNo) = False Then
                                        mIsDispHistoryModel(dispParam.StageNo) = eDispHistoryModel.DispHistory
                                        Return mIsDispHistoryModel(dispParam.StageNo)
                                        Exit For
                                    End If
                                End If
                            End If
                        End If

                        '[Note]:記錄端點座標
                        mLastPathPos(dispParam.StageNo).PosX = .EndPosX
                        mLastPathPos(dispParam.StageNo).PosY = .EndPosY
                    End With

                Case eStepFunctionType.Arc3D
                    With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Arc3D
                        If mIsFristPath(dispParam.StageNo) = True Then
                            mIsFristPath(dispParam.StageNo) = False
                        Else
                            '[Note]:比對上一條路徑的終點是否為目前這條線段的起點
                            If Math.Abs(mLastPathPos(dispParam.StageNo).PosX - .EndPosX) < gSSystemParameter.MotionTolerance Then
                                If Math.Abs(mLastPathPos(dispParam.StageNo).PosY - .EndPosY) < gSSystemParameter.MotionTolerance Then
                                    If mIsExtendPath(dispParam.StageNo) = False Then
                                        mIsDispHistoryModel(dispParam.StageNo) = eDispHistoryModel.DispHistory
                                        Return mIsDispHistoryModel(dispParam.StageNo)
                                        Exit For
                                    End If
                                End If
                            End If
                        End If

                        '[Note]:記錄端點座標
                        mLastPathPos(dispParam.StageNo).PosX = .EndPosX
                        mLastPathPos(dispParam.StageNo).PosY = .EndPosY
                    End With

                Case Else
                    '[Note]:不處理

            End Select
        Next

        Return mIsDispHistoryModel(dispParam.StageNo)

    End Function

    ''' <summary>[判斷是否需要重新空跑(根據Pattern與相關資訊)(節點串接專用)]</summary>
    ''' <param name="stageNo"></param>
    ''' <param name="dispParam"></param>
    ''' <param name="patternMemory"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function IsNeedDummyRunByPattern(ByVal stageNo As enmStage, ByVal dispParam As List(Of sDispParam), ByRef patternMemory As List(Of SRecipePattern)) As Boolean

        Dim mArrayIndexX(enmStage.Max) As Integer
        Dim mArrayIndexY(enmStage.Max) As Integer
        Dim mI(enmStage.Max) As Integer
        Dim mJ(enmStage.Max) As Integer
        Dim mK(enmStage.Max) As Integer
        Dim mL(enmStage.Max) As Integer
        Dim mDieStartIndex(enmStage.Max) As Integer                         '[從哪一顆開始]
        Dim mDieEndIndex(enmStage.Max) As Integer                           '[到哪一顆結束]
        Dim mStartStepIndex(enmStage.Max) As Integer                        '[從哪一個Step開始]
        Dim mEndStepIndex(enmStage.Max) As Integer                          '[到哪一個Step結束]
        Dim mIsNeedDummyRun(enmStage.Max) As Boolean                        '[是否需要重新空跑]
        Dim mRound(enmStage.Max) As SPatternRound
        Dim mStep(enmStage.Max) As List(Of SPatternStep)
        Dim mPattern(enmStage.Max) As SRecipePattern
        Dim mCycleTime(enmStage.Max) As Decimal

        '[Note]:預設為不需要重新空跑，遇到數質不一樣的時候才切成需要空跑
        mIsNeedDummyRun(stageNo) = False

        '[Note]:雖然是很多個節點串在一起，但使用的CycleTime是一樣的，所以使用第一組來檢察即可
        If dispParam.Count >= 1 Then
            If gJetValveDB.ContainsKey(dispParam(0).Recipe.StageParts(stageNo).ValveName(dispParam(0).SelectValve)) = True Then
                Select Case gJetValveDB(dispParam(0).Recipe.StageParts(stageNo).ValveName(dispParam(0).SelectValve)).ValveModel
                    Case eValveModel.PicoPulse
                        mCycleTime(stageNo) = gJetValveDB(dispParam(0).Recipe.StageParts(stageNo).ValveName(dispParam(0).SelectValve)).PicoTouch.CycleTime
                    Case eValveModel.Advanjet
                        mCycleTime(stageNo) = gJetValveDB(dispParam(0).Recipe.StageParts(stageNo).ValveName(dispParam(0).SelectValve)).Advanjet.CycleTime
                End Select
            End If
        End If

        If IsNothing(patternMemory) = True Then
            mIsNeedDummyRun(stageNo) = True
            patternMemory = New List(Of SRecipePattern)
            patternMemory.Clear()
            For mK(stageNo) = 0 To dispParam.Count - 1
                TransformPattern(dispParam(mK(stageNo)).Pattern, mPattern(stageNo))
                mPattern(stageNo).CycleTime = mCycleTime(stageNo)
                patternMemory.Capacity = patternMemory.Count + 1
                patternMemory.Add(mPattern(stageNo))
            Next
            Return mIsNeedDummyRun(stageNo)
        End If

        '[Note]:若數量不對，則不用比對了，直接更新patternMemory即可。
        If dispParam.Count <> patternMemory.Count Then
            mIsNeedDummyRun(stageNo) = True
            patternMemory.Clear()
            For mK(stageNo) = 0 To dispParam.Count - 1
                TransformPattern(dispParam(mK(stageNo)).Pattern, mPattern(stageNo))
                mPattern(stageNo).CycleTime = mCycleTime(stageNo)
                patternMemory.Capacity = patternMemory.Count + 1
                patternMemory.Add(mPattern(stageNo))
            Next
            Return mIsNeedDummyRun(stageNo)
        End If

        For mK(stageNo) = 0 To dispParam.Count - 1
            '[Note]:Cycle Time
            If patternMemory(mK(stageNo)).CycleTime <> mCycleTime(stageNo) Then
                mPattern(stageNo) = New SRecipePattern
                mPattern(stageNo) = patternMemory(mK(stageNo))
                mPattern(stageNo).CycleTime = mCycleTime(stageNo)
                patternMemory.RemoveAt(mK(stageNo))
                patternMemory.Insert(mK(stageNo), mPattern(stageNo))
                mIsNeedDummyRun(stageNo) = True
            End If

            '[Note]:確認是不是存在
            If IsNothing(patternMemory(mK(stageNo)).Round) = True Then
                mIsNeedDummyRun(stageNo) = True
                patternMemory(mK(stageNo)).Round.Clear()
                For mL(stageNo) = 0 To dispParam(mK(stageNo)).Pattern.Round.Count - 1
                    mRound(stageNo) = New SPatternRound
                    TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                    patternMemory(mK(stageNo)).Round.Capacity = patternMemory(mK(stageNo)).Round.Count + 1
                    patternMemory(mK(stageNo)).Round.Add(mRound(stageNo))
                Next
                Exit For
            End If

            '[Note]:若數量不對，則不用比對了，直接更新patternMemory即可。
            If dispParam(mK(stageNo)).Pattern.Round.Count <> patternMemory(mK(stageNo)).Round.Count Then
                mIsNeedDummyRun(stageNo) = True
                patternMemory(mK(stageNo)).Round.Clear()
                For mL(stageNo) = 0 To dispParam(mK(stageNo)).Pattern.Round.Count - 1
                    mRound(stageNo) = New SPatternRound
                    TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                    patternMemory(mK(stageNo)).Round.Capacity = patternMemory(mK(stageNo)).Round.Count + 1
                    patternMemory(mK(stageNo)).Round.Add(mRound(stageNo))
                Next
                Exit For
            End If

            'Step1:從哪個Round做到哪個Round
            For mL(stageNo) = 0 To dispParam(mK(stageNo)).Pattern.Round.Count - 1
                Select Case dispParam(mK(stageNo)).DispDieType
                    Case enmDispMultiDie.SingleDie
                        mDieStartIndex(stageNo) = dispParam(mK(stageNo)).SingleDieParam.DieIndex
                        mDieEndIndex(stageNo) = dispParam(mK(stageNo)).SingleDieParam.DieIndex
                        mStartStepIndex(stageNo) = dispParam(mK(stageNo)).SingleDieParam.StartStep
                        mEndStepIndex(stageNo) = dispParam(mK(stageNo)).SingleDieParam.EndStep

                    Case enmDispMultiDie.MultiDie
                        mDieStartIndex(stageNo) = dispParam(mK(stageNo)).MulitDieParam.Start
                        mDieEndIndex(stageNo) = dispParam(mK(stageNo)).MulitDieParam.Ending
                        mStartStepIndex(stageNo) = 0
                        mEndStepIndex(stageNo) = dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)).StepCount - 1

                End Select

                'Step2:從哪一顆做到哪一顆
                For mI(stageNo) = mDieStartIndex(stageNo) To mDieEndIndex(stageNo)
                    If dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)).StepCount <> patternMemory(mK(stageNo)).Round(mL(stageNo)).StepCount Then
                        mIsNeedDummyRun(stageNo) = True
                        mRound(stageNo) = New SPatternRound
                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                        patternMemory(mK(stageNo)).Round.RemoveAt(mL(stageNo))
                        patternMemory(mK(stageNo)).Round.Capacity = patternMemory(mK(stageNo)).Round.Count + 1
                        patternMemory(mK(stageNo)).Round.Add(mRound(stageNo))
                        Exit For
                    End If

                    '[Note]:每個Step
                    For mJ(stageNo) = mStartStepIndex(stageNo) To mEndStepIndex(stageNo)
                        '[Note]:若資料內容比對不相同，表示需要重新空跑
                        If dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)).CStep(mJ(stageNo)).StepType <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).StepType Then
                            mIsNeedDummyRun(stageNo) = True
                            mRound(stageNo) = New SPatternRound
                            TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                            patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                            Exit For
                        End If

                        Select Case dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)).CStep(mJ(stageNo)).StepType
                            Case eStepFunctionType.Arc2D
                                With dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)).CStep(mJ(stageNo)).Arc2D
                                    If .StartPosX <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc2D.StartPosX Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .StartPosY <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc2D.StartPosY Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .CenterPosX <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc2D.CenterPosX Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .CenterPosY <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc2D.CenterPosY Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .EndPosX <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc2D.EndPosX Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .EndPosY <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc2D.EndPosY Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .Direction <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc2D.Direction Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                    End If
                                    If .Angle <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc2D.Angle Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If

                                    '[Note]:新格式
                                    If .WeightControl.Type <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc2D.WeightControl.Type Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    Select Case .WeightControl.Type
                                        Case eWeightControlType.Dots
                                            If .WeightControl.DotCounts <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc2D.WeightControl.DotCounts Then
                                                mIsNeedDummyRun(stageNo) = True
                                                mRound(stageNo) = New SPatternRound
                                                TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                                patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                                Exit For
                                            End If

                                        Case eWeightControlType.Weight
                                            If .WeightControl.Weight <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc2D.WeightControl.Weight Then
                                                mIsNeedDummyRun(stageNo) = True
                                                mRound(stageNo) = New SPatternRound
                                                TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                                patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                                Exit For
                                            End If
                                    End Select
                                End With

                            Case eStepFunctionType.Circle2D
                                With dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)).CStep(mJ(stageNo)).Circle2D
                                    If .StartPosX <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Circle2D.StartPosX Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .StartPosY <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Circle2D.StartPosY Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .CenterPosX <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Circle2D.CenterPosX Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .CenterPosY <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Circle2D.CenterPosY Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .CenterPosX <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Circle2D.CenterPosX Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .EndPosX <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Circle2D.EndPosX Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    '[Note]:新格式
                                    If .WeightControl.Type <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Circle2D.WeightControl.Type Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    Select Case .WeightControl.Type
                                        Case eWeightControlType.Dots
                                            If .WeightControl.DotCounts <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Circle2D.WeightControl.DotCounts Then
                                                mIsNeedDummyRun(stageNo) = True
                                                mRound(stageNo) = New SPatternRound
                                                TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                                patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                                Exit For
                                            End If

                                        Case eWeightControlType.Weight
                                            If .WeightControl.Weight <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Circle2D.WeightControl.Weight Then
                                                mIsNeedDummyRun(stageNo) = True
                                                mRound(stageNo) = New SPatternRound
                                                TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                                patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                                Exit For
                                            End If

                                    End Select
                                End With

                            Case eStepFunctionType.Dots3D
                                With dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)).CStep(mJ(stageNo)).Dots3D
                                    If .PosX <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Dots3D.PosX Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .PosY <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Dots3D.PosY Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    '[Note]:Dots是強制轉換成Velocity模式，目只看Velocity是否有被改過。
                                    .WeightControl.Type = eWeightControlType.Velocity
                                    Select Case .WeightControl.Type
                                        Case eWeightControlType.Velocity
                                            If .WeightControl.Velocity <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Dots3D.WeightControl.Velocity Then
                                                mIsNeedDummyRun(stageNo) = True
                                                mRound(stageNo) = New SPatternRound
                                                TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                                patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                                Exit For
                                            End If
                                    End Select
                                End With

                            Case eStepFunctionType.Line3D
                                With dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)).CStep(mJ(stageNo)).Line3D
                                    If .StartPosX <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Line3D.StartPosX Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .StartPosY <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Line3D.StartPosY Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .EndPosX <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Line3D.EndPosX Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .EndPosY <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Line3D.EndPosY Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    '[Note]:新格式
                                    If .WeightControl.Type <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Line3D.WeightControl.Type Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    Select Case .WeightControl.Type
                                        Case eWeightControlType.Dots
                                            If .WeightControl.DotCounts <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Line3D.WeightControl.DotCounts Then
                                                mIsNeedDummyRun(stageNo) = True
                                                mRound(stageNo) = New SPatternRound
                                                TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                                patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                                Exit For
                                            End If

                                        Case eWeightControlType.Weight
                                            If .WeightControl.Weight <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Line3D.WeightControl.Weight Then
                                                mIsNeedDummyRun(stageNo) = True
                                                mRound(stageNo) = New SPatternRound
                                                TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                                patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                                Exit For
                                            End If
                                    End Select
                                End With

                            Case eStepFunctionType.Circle3D
                                With dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)).CStep(mJ(stageNo)).Circle3D
                                    If .StartPosX <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Circle3D.StartPosX Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .StartPosY <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Circle3D.StartPosY Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .StartPosZ <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Circle3D.StartPosZ Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .CenterPosX <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Circle3D.CenterPosX Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .CenterPosY <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Circle3D.CenterPosY Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .CenterPosZ <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Circle3D.CenterPosZ Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .EndPosX <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Circle3D.EndPosX Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .EndPosY <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Circle3D.EndPosY Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .EndPosZ <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Circle3D.EndPosZ Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    '[Note]:新格式
                                    If .WeightControl.Type <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Circle3D.WeightControl.Type Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    Select Case .WeightControl.Type
                                        Case eWeightControlType.Dots
                                            If .WeightControl.DotCounts <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Circle3D.WeightControl.DotCounts Then
                                                mIsNeedDummyRun(stageNo) = True
                                                mRound(stageNo) = New SPatternRound
                                                TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                                patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                                Exit For
                                            End If

                                        Case eWeightControlType.Weight
                                            If .WeightControl.Weight <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Circle3D.WeightControl.Weight Then
                                                mIsNeedDummyRun(stageNo) = True
                                                mRound(stageNo) = New SPatternRound
                                                TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                                patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                                Exit For
                                            End If

                                    End Select
                                End With

                            Case eStepFunctionType.Arc3D
                                With dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)).CStep(mJ(stageNo)).Arc3D
                                    If .StartPosX <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc3D.StartPosX Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .StartPosY <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc3D.StartPosY Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .StartPosZ <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc3D.StartPosZ Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .CenterPosX <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc3D.CenterPosX Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .CenterPosY <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc3D.CenterPosY Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .CenterPosZ <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc3D.CenterPosZ Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .EndPosX <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc3D.EndPosX Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .EndPosY <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc3D.EndPosY Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .EndPosZ <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc3D.EndPosZ Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .Direction <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc3D.Direction Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .Angle <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc3D.Angle Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    '[Note]:新格式
                                    If .WeightControl.Type <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc3D.WeightControl.Type Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    Select Case .WeightControl.Type
                                        Case eWeightControlType.Dots
                                            If .WeightControl.DotCounts <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc3D.WeightControl.DotCounts Then
                                                mIsNeedDummyRun(stageNo) = True
                                                mRound(stageNo) = New SPatternRound
                                                TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                                patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                                Exit For
                                            End If

                                        Case eWeightControlType.Weight
                                            If .WeightControl.Weight <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Arc3D.WeightControl.Weight Then
                                                mIsNeedDummyRun(stageNo) = True
                                                mRound(stageNo) = New SPatternRound
                                                TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                                patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                                Exit For
                                            End If

                                    End Select
                                End With

                            Case eStepFunctionType.Move3D
                                With dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)).CStep(mJ(stageNo)).Move3D
                                    If .EndPosX <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Move3D.EndPosX Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .EndPosY <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Move3D.EndPosY Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                    If .EndPosZ <> patternMemory(mK(stageNo)).Round(mL(stageNo)).SStep(mJ(stageNo)).Move3D.EndPosZ Then
                                        mIsNeedDummyRun(stageNo) = True
                                        mRound(stageNo) = New SPatternRound
                                        TransformPatternRound(dispParam(mK(stageNo)).Pattern.Round(mL(stageNo)), mRound(stageNo))
                                        patternMemory(mK(stageNo)).Round(mL(stageNo)) = mRound(stageNo)
                                        Exit For
                                    End If
                                End With


                            Case Else
                                '[Note]:除了Arc、Line、Dot外，都不處理

                        End Select
                    Next
                Next

            Next
        Next
        Return mIsNeedDummyRun(stageNo)
    End Function

    Private Sub TransformStep(ByVal cStep As CPatternStep, ByRef sStep As SPatternStep)

        sStep = New SPatternStep
        sStep.StepType = cStep.StepType

        Select Case cStep.StepType
            Case eStepFunctionType.SelectValve
                sStep.SelectValve.ValveNo = cStep.SelectValve.ValveNo
                sStep.SelectValve.PosB = cStep.SelectValve.PosB

            Case eStepFunctionType.ContiStart
            Case eStepFunctionType.ContiEnd
            Case eStepFunctionType.ExtendOn
            Case eStepFunctionType.ExtendOff

            Case eStepFunctionType.Arc2D
                sStep.Arc2D.Angle = cStep.Arc2D.Angle
                sStep.Arc2D.CenterPosX = cStep.Arc2D.CenterPosX
                sStep.Arc2D.CenterPosY = cStep.Arc2D.CenterPosY
                sStep.Arc2D.Comment = cStep.Arc2D.Comment
                sStep.Arc2D.Direction = cStep.Arc2D.Direction
                sStep.Arc2D.EndPosX = cStep.Arc2D.EndPosX
                sStep.Arc2D.EndPosY = cStep.Arc2D.EndPosY
                sStep.Arc2D.MiddlePosX = cStep.Arc2D.MiddlePosX
                sStep.Arc2D.MiddlePosY = cStep.Arc2D.MiddlePosY
                sStep.Arc2D.MiddlePosZ = cStep.Arc2D.MiddlePosZ
                sStep.Arc2D.Pitch = cStep.Arc2D.Pitch
                sStep.Arc2D.Radius = cStep.Arc2D.Radius
                sStep.Arc2D.RPM = cStep.Arc2D.RPM
                sStep.Arc2D.StartPosX = cStep.Arc2D.StartPosX
                sStep.Arc2D.StartPosY = cStep.Arc2D.StartPosY
                sStep.Arc2D.WeightControl = cStep.Arc2D.WeightControl

            Case eStepFunctionType.Arc3D
                sStep.Arc3D.Angle = cStep.Arc3D.Angle
                sStep.Arc3D.CenterPosX = cStep.Arc3D.CenterPosX
                sStep.Arc3D.CenterPosY = cStep.Arc3D.CenterPosY
                sStep.Arc3D.CenterPosZ = cStep.Arc3D.CenterPosZ
                sStep.Arc3D.Direction = cStep.Arc3D.Direction
                sStep.Arc3D.EndPosX = cStep.Arc3D.EndPosX
                sStep.Arc3D.EndPosY = cStep.Arc3D.EndPosY
                sStep.Arc3D.EndPosZ = cStep.Arc3D.EndPosZ
                sStep.Arc3D.MiddlePosB = cStep.Arc3D.MiddlePosB
                sStep.Arc3D.MiddlePosC = cStep.Arc3D.MiddlePosC
                sStep.Arc3D.MiddlePosX = cStep.Arc3D.MiddlePosX
                sStep.Arc3D.MiddlePosY = cStep.Arc3D.MiddlePosY
                sStep.Arc3D.MiddlePosZ = cStep.Arc3D.MiddlePosZ
                sStep.Arc3D.Pitch = cStep.Arc3D.Pitch
                sStep.Arc3D.Radius = cStep.Arc3D.Radius
                sStep.Arc3D.RPM = cStep.Arc3D.RPM
                sStep.Arc3D.StartPosX = cStep.Arc3D.StartPosX
                sStep.Arc3D.StartPosY = cStep.Arc3D.StartPosY
                sStep.Arc3D.StartPosZ = cStep.Arc3D.StartPosZ
                sStep.Arc3D.WeightControl = cStep.Arc3D.WeightControl

            Case eStepFunctionType.Circle2D
                sStep.Circle2D.CenterPosX = cStep.Circle2D.CenterPosX
                sStep.Circle2D.CenterPosY = cStep.Circle2D.CenterPosY
                sStep.Circle2D.Comment = cStep.Circle2D.Comment
                sStep.Circle2D.Direction = cStep.Circle2D.Direction
                sStep.Circle2D.EndPosX = cStep.Circle2D.EndPosX
                sStep.Circle2D.EndPosY = cStep.Circle2D.EndPosY
                sStep.Circle2D.MiddlePosX = cStep.Circle2D.MiddlePosX
                sStep.Circle2D.MiddlePosY = cStep.Circle2D.MiddlePosY
                sStep.Circle2D.Middle2PosX = cStep.Circle2D.Middle2PosX
                sStep.Circle2D.Middle2PosY = cStep.Circle2D.Middle2PosY
                sStep.Circle2D.Pitch = cStep.Circle2D.Pitch
                sStep.Circle2D.RPM = cStep.Circle2D.RPM
                sStep.Circle2D.StartPosX = cStep.Circle2D.StartPosX
                sStep.Circle2D.StartPosY = cStep.Circle2D.StartPosY
                sStep.Circle2D.WeightControl = cStep.Circle2D.WeightControl

            Case eStepFunctionType.Circle3D
                sStep.Circle3D.CenterPosX = cStep.Circle3D.CenterPosX
                sStep.Circle3D.CenterPosY = cStep.Circle3D.CenterPosY
                sStep.Circle3D.CenterPosZ = cStep.Circle3D.CenterPosZ
                sStep.Circle3D.Direction = cStep.Circle3D.Direction
                sStep.Circle3D.EndPosX = cStep.Circle3D.EndPosX
                sStep.Circle3D.EndPosY = cStep.Circle3D.EndPosY
                sStep.Circle3D.EndPosZ = cStep.Circle3D.EndPosZ
                sStep.Circle3D.MiddlePosB = cStep.Circle3D.MiddlePosB
                sStep.Circle3D.MiddlePosC = cStep.Circle3D.MiddlePosC
                sStep.Circle3D.MiddlePosX = cStep.Circle3D.MiddlePosX
                sStep.Circle3D.MiddlePosY = cStep.Circle3D.MiddlePosY
                sStep.Circle3D.MiddlePosZ = cStep.Circle3D.MiddlePosZ
                sStep.Circle3D.Pitch = cStep.Circle3D.Pitch
                sStep.Circle3D.RPM = cStep.Circle3D.RPM
                sStep.Circle3D.StartPosX = cStep.Circle3D.StartPosX
                sStep.Circle3D.StartPosY = cStep.Circle3D.StartPosY
                sStep.Circle3D.StartPosZ = cStep.Circle3D.StartPosZ
                sStep.Circle3D.WeightControl = cStep.Circle3D.WeightControl

            Case eStepFunctionType.Dots3D
                sStep.Dots3D.PosX = cStep.Dots3D.PosX
                sStep.Dots3D.PosY = cStep.Dots3D.PosY
                sStep.Dots3D.PosZ = cStep.Dots3D.PosZ
                sStep.Dots3D.RPM = cStep.Dots3D.RPM
                sStep.Dots3D.WeightControl = cStep.Dots3D.WeightControl

            Case eStepFunctionType.Line3D
                sStep.Line3D.Comment = cStep.Line3D.Comment
                sStep.Line3D.EndPosX = cStep.Line3D.EndPosX
                sStep.Line3D.EndPosY = cStep.Line3D.EndPosY
                sStep.Line3D.EndPosZ = cStep.Line3D.EndPosZ
                sStep.Line3D.Pitch = cStep.Line3D.Pitch
                sStep.Line3D.RPM = cStep.Line3D.RPM
                sStep.Line3D.StartPosX = cStep.Line3D.StartPosX
                sStep.Line3D.StartPosY = cStep.Line3D.StartPosY
                sStep.Line3D.StartPosZ = cStep.Line3D.StartPosZ
                sStep.Line3D.WeightControl = cStep.Line3D.WeightControl

            Case eStepFunctionType.Move3D
                sStep.Move3D.EndPosX = cStep.Move3D.EndPosX
                sStep.Move3D.EndPosY = cStep.Move3D.EndPosY
                sStep.Move3D.EndPosZ = cStep.Move3D.EndPosZ

            Case eStepFunctionType.Wait
                sStep.Wait.DwellTimeInMs = cStep.Wait.DwellTimeInMs

        End Select

    End Sub

    Private Sub TransformPatternRound(ByVal cRound As CPatternRound, ByRef sRound As SPatternRound)

        Dim mStep As SPatternStep
        Dim mI As Integer

        sRound = New SPatternRound
        sRound.SStep = New List(Of SPatternStep)
        sRound.SStep.Clear()

        For mI = 0 To cRound.CStep.Count - 1
            mStep = New SPatternStep
            TransformStep(cRound.CStep(mI), mStep)
            sRound.SStep.Add(mStep)
            mStep = Nothing
        Next
        sRound.ProcessTime = cRound.ProcessTime
        sRound.StepCount = cRound.StepCount
    End Sub

    Private Sub TransformPattern(ByVal cPattern As CRecipePattern, ByRef sPattern As SRecipePattern)

        Dim mI As Integer
        Dim mRound As SPatternRound
        sPattern = New SRecipePattern
        sPattern.Round = New List(Of SPatternRound)
        sPattern.Round.Clear()
        For mI = 0 To cPattern.Round.Count - 1
            mRound = New SPatternRound
            TransformPatternRound(cPattern.Round(mI), mRound)
            sPattern.Round.Add(mRound)
        Next
        sPattern.RoundCount = cPattern.RoundCount
        sPattern.ProcessTimeType = cPattern.ProcessTimeType
    End Sub

    ''' <summary>[判斷是否需要重新空跑(根據Pattern與相關資訊)]</summary>
    ''' <param name="dispParam"></param>
    ''' <param name="patternMemory"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function IsNeedDummyRunByPattern(ByVal dispParam As sDispParam, ByRef patternMemory As SRecipePattern) As Boolean

        Dim mI(enmStage.Max) As Integer
        Dim mJ(enmStage.Max) As Integer
        Dim mDieStartIndex(enmStage.Max) As Integer                         '[從哪一顆開始]
        Dim mDieEndIndex(enmStage.Max) As Integer                           '[到哪一顆結束]
        Dim mStartStepIndex(enmStage.Max) As Integer                        '[從哪一個Step開始]
        Dim mEndStepIndex(enmStage.Max) As Integer                          '[到哪一個Step結束]
        Dim mIsNeedDummyRun(enmStage.Max) As Boolean                        '[是否需要重新空跑]
        Dim mRound(enmStage.Max) As SPatternRound
        Dim mCycleTimes(enmStage.Max) As Decimal

        '[Note]:預設為不需要重新空跑，遇到數質不一樣的時候才切成需要空跑
        mIsNeedDummyRun(dispParam.StageNo) = False

        '[Note]:確認點膠CycleTime是否有變動，有變動就是要重新空跑了，但還是要筆對更新Pattern

        'Step1:取出CycleTime
        If gJetValveDB.ContainsKey(dispParam.Recipe.StageParts(dispParam.StageNo).ValveName(dispParam.SelectValve)) = True Then
            Select Case gJetValveDB(dispParam.Recipe.StageParts(dispParam.StageNo).ValveName(dispParam.SelectValve)).ValveModel
                Case eValveModel.PicoPulse
                    mCycleTimes(dispParam.StageNo) = gJetValveDB(dispParam.Recipe.StageParts(dispParam.StageNo).ValveName(dispParam.SelectValve)).PicoTouch.CycleTime
                Case eValveModel.Advanjet
                    mCycleTimes(dispParam.StageNo) = gJetValveDB(dispParam.Recipe.StageParts(dispParam.StageNo).ValveName(dispParam.SelectValve)).Advanjet.CycleTime
            End Select
        Else
            mIsNeedDummyRun(dispParam.StageNo) = True
        End If

        If patternMemory.CycleTime <> mCycleTimes(dispParam.StageNo) Then
            patternMemory.CycleTime = mCycleTimes(dispParam.StageNo)
            mIsNeedDummyRun(dispParam.StageNo) = True
        End If

        Select Case dispParam.DispDieType
            Case enmDispMultiDie.SingleDie
                mDieStartIndex(dispParam.StageNo) = dispParam.SingleDieParam.DieIndex
                mDieEndIndex(dispParam.StageNo) = dispParam.SingleDieParam.DieIndex
                mStartStepIndex(dispParam.StageNo) = dispParam.SingleDieParam.StartStep
                mEndStepIndex(dispParam.StageNo) = dispParam.SingleDieParam.EndStep

            Case enmDispMultiDie.MultiDie
                mDieStartIndex(dispParam.StageNo) = dispParam.MulitDieParam.Start
                mDieEndIndex(dispParam.StageNo) = dispParam.MulitDieParam.Ending
                mStartStepIndex(dispParam.StageNo) = 0
                mEndStepIndex(dispParam.StageNo) = dispParam.Pattern.Round(dispParam.RoundNo).StepCount - 1

        End Select

        'Step2:從哪一顆做到哪一顆
        For mI(dispParam.StageNo) = mDieStartIndex(dispParam.StageNo) To mDieEndIndex(dispParam.StageNo)
            If IsNothing(patternMemory.Round) Then
                mIsNeedDummyRun(dispParam.StageNo) = True
                patternMemory = New SRecipePattern
                patternMemory.CycleTime = mCycleTimes(dispParam.StageNo)
                mRound(dispParam.StageNo) = New SPatternRound
                patternMemory.Round = New List(Of SPatternRound)
                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                patternMemory.Round.Add(mRound(dispParam.StageNo))
                Return mIsNeedDummyRun(dispParam.StageNo)
            End If

            If dispParam.Pattern.Round(dispParam.RoundNo).StepCount <> patternMemory.Round(0).StepCount Then
                mIsNeedDummyRun(dispParam.StageNo) = True
                patternMemory = New SRecipePattern
                patternMemory.CycleTime = mCycleTimes(dispParam.StageNo)
                mRound(dispParam.StageNo) = New SPatternRound
                patternMemory.Round = New List(Of SPatternRound)
                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                patternMemory.Round.Add(mRound(dispParam.StageNo))
                Return mIsNeedDummyRun(dispParam.StageNo)
            End If

            '[Note]:每個Step
            For mJ(dispParam.StageNo) = mStartStepIndex(dispParam.StageNo) To mEndStepIndex(dispParam.StageNo)
                '[Note]:若資料內容比對不相同，表示需要重新空跑
                If dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).StepType <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).StepType Then
                    mIsNeedDummyRun(dispParam.StageNo) = True
                    mRound(dispParam.StageNo) = New SPatternRound
                    patternMemory.Round = New List(Of SPatternRound)
                    TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                    patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                    Exit For
                End If

                Select Case dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).StepType
                    Case eStepFunctionType.Arc2D
                        With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Arc2D
                            If .StartPosX <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc2D.StartPosX Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .StartPosY <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc2D.StartPosY Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .CenterPosX <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc2D.CenterPosX Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .CenterPosY <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc2D.CenterPosY Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .EndPosX <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc2D.EndPosX Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .EndPosY <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc2D.EndPosY Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .Direction <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc2D.Direction Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .Angle <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc2D.Angle Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            '[Note]:新格式
                            If .WeightControl.Type <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc2D.WeightControl.Type Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            Select Case .WeightControl.Type
                                Case eWeightControlType.Dots
                                    If .WeightControl.DotCounts <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc2D.WeightControl.DotCounts Then
                                        mIsNeedDummyRun(dispParam.StageNo) = True
                                        mRound(dispParam.StageNo) = New SPatternRound
                                        patternMemory.Round = New List(Of SPatternRound)
                                        TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                        patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                        patternMemory.Round.Add(mRound(dispParam.StageNo))
                                        Exit For
                                    End If

                                Case eWeightControlType.Weight
                                    If .WeightControl.Weight <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc2D.WeightControl.Weight Then
                                        mIsNeedDummyRun(dispParam.StageNo) = True
                                        mRound(dispParam.StageNo) = New SPatternRound
                                        patternMemory.Round = New List(Of SPatternRound)
                                        TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                        patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                        patternMemory.Round.Add(mRound(dispParam.StageNo))
                                        Exit For
                                    End If

                            End Select
                        End With

                    Case eStepFunctionType.Circle2D
                        With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Circle2D
                            If .StartPosX <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Circle2D.StartPosX Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .StartPosY <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Circle2D.StartPosY Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .CenterPosX <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Circle2D.CenterPosX Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .CenterPosY <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Circle2D.CenterPosY Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .CenterPosX <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Circle2D.CenterPosX Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .EndPosX <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Circle2D.EndPosX Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            '[Note]:新格式
                            If .WeightControl.Type <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Circle2D.WeightControl.Type Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            Select Case .WeightControl.Type
                                Case eWeightControlType.Dots
                                    If .WeightControl.DotCounts <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Circle2D.WeightControl.DotCounts Then
                                        mIsNeedDummyRun(dispParam.StageNo) = True
                                        mRound(dispParam.StageNo) = New SPatternRound
                                        patternMemory.Round = New List(Of SPatternRound)
                                        TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                        patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                        patternMemory.Round.Add(mRound(dispParam.StageNo))
                                        Exit For
                                    End If

                                Case eWeightControlType.Weight
                                    If .WeightControl.Weight <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Circle2D.WeightControl.Weight Then
                                        mIsNeedDummyRun(dispParam.StageNo) = True
                                        mRound(dispParam.StageNo) = New SPatternRound
                                        patternMemory.Round = New List(Of SPatternRound)
                                        TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                        patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                        patternMemory.Round.Add(mRound(dispParam.StageNo))
                                        Exit For
                                    End If

                            End Select
                        End With

                    Case eStepFunctionType.Dots3D
                        With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Dots3D
                            If .PosX <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Dots3D.PosX Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .PosY <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Dots3D.PosY Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            '[Note]:Dots是強制轉換成Velocity模式，目只看Velocity是否有被改過。
                            .WeightControl.Type = eWeightControlType.Velocity
                            Select Case .WeightControl.Type
                                Case eWeightControlType.Velocity
                                    If .WeightControl.Velocity <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Dots3D.WeightControl.Velocity Then
                                        mIsNeedDummyRun(dispParam.StageNo) = True
                                        mRound(dispParam.StageNo) = New SPatternRound
                                        patternMemory.Round = New List(Of SPatternRound)
                                        TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                        patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                        patternMemory.Round.Add(mRound(dispParam.StageNo))
                                        Exit For
                                    End If

                            End Select
                        End With

                    Case eStepFunctionType.Line3D
                        With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Line3D
                            If .StartPosX <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Line3D.StartPosX Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .StartPosY <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Line3D.StartPosY Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .EndPosX <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Line3D.EndPosX Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .EndPosY <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Line3D.EndPosY Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            '[Note]:新格式
                            If .WeightControl.Type <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Line3D.WeightControl.Type Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            Select Case .WeightControl.Type
                                Case eWeightControlType.Dots
                                    If .WeightControl.DotCounts <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Line3D.WeightControl.DotCounts Then
                                        mIsNeedDummyRun(dispParam.StageNo) = True
                                        mRound(dispParam.StageNo) = New SPatternRound
                                        patternMemory.Round = New List(Of SPatternRound)
                                        TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                        patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                        patternMemory.Round.Add(mRound(dispParam.StageNo))
                                        Exit For
                                    End If

                                Case eWeightControlType.Weight
                                    If .WeightControl.Weight <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Line3D.WeightControl.Weight Then
                                        mIsNeedDummyRun(dispParam.StageNo) = True
                                        mRound(dispParam.StageNo) = New SPatternRound
                                        patternMemory.Round = New List(Of SPatternRound)
                                        TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                        patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                        patternMemory.Round.Add(mRound(dispParam.StageNo))
                                        Exit For
                                    End If

                            End Select
                        End With

                    Case eStepFunctionType.Circle3D
                        With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Circle3D
                            If .StartPosX <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Circle3D.StartPosX Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .StartPosY <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Circle3D.StartPosY Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .StartPosZ <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Circle3D.StartPosZ Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .CenterPosX <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Circle3D.CenterPosX Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .CenterPosY <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Circle3D.CenterPosY Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .CenterPosZ <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Circle3D.CenterPosZ Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .EndPosX <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Circle3D.EndPosX Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .EndPosY <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Circle3D.EndPosY Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .EndPosZ <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Circle3D.EndPosZ Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            '[Note]:新格式
                            If .WeightControl.Type <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Circle3D.WeightControl.Type Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            Select Case .WeightControl.Type
                                Case eWeightControlType.Dots
                                    If .WeightControl.DotCounts <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Circle3D.WeightControl.DotCounts Then
                                        mIsNeedDummyRun(dispParam.StageNo) = True
                                        mRound(dispParam.StageNo) = New SPatternRound
                                        patternMemory.Round = New List(Of SPatternRound)
                                        TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                        patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                        patternMemory.Round.Add(mRound(dispParam.StageNo))
                                        Exit For
                                    End If

                                Case eWeightControlType.Weight
                                    If .WeightControl.Weight <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Circle3D.WeightControl.Weight Then
                                        mIsNeedDummyRun(dispParam.StageNo) = True
                                        mRound(dispParam.StageNo) = New SPatternRound
                                        patternMemory.Round = New List(Of SPatternRound)
                                        TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                        patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                        patternMemory.Round.Add(mRound(dispParam.StageNo))
                                        Exit For
                                    End If

                            End Select
                        End With

                    Case eStepFunctionType.Arc3D
                        With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Arc3D
                            If .StartPosX <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc3D.StartPosX Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .StartPosY <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc3D.StartPosY Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .StartPosZ <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc3D.StartPosZ Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .CenterPosX <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc3D.CenterPosX Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .CenterPosY <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc3D.CenterPosY Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .CenterPosZ <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc3D.CenterPosZ Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .EndPosX <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc3D.EndPosX Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .EndPosY <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc3D.EndPosY Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .EndPosZ <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc3D.EndPosZ Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .Direction <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc3D.Direction Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .Angle <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc3D.Angle Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            '[Note]:新格式
                            If .WeightControl.Type <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc3D.WeightControl.Type Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            Select Case .WeightControl.Type
                                Case eWeightControlType.Dots
                                    If .WeightControl.DotCounts <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc3D.WeightControl.DotCounts Then
                                        mIsNeedDummyRun(dispParam.StageNo) = True
                                        mRound(dispParam.StageNo) = New SPatternRound
                                        patternMemory.Round = New List(Of SPatternRound)
                                        TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                        patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                        patternMemory.Round.Add(mRound(dispParam.StageNo))
                                        Exit For
                                    End If

                                Case eWeightControlType.Weight
                                    If .WeightControl.Weight <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Arc3D.WeightControl.Weight Then
                                        mIsNeedDummyRun(dispParam.StageNo) = True
                                        mRound(dispParam.StageNo) = New SPatternRound
                                        patternMemory.Round = New List(Of SPatternRound)
                                        TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                        patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                        patternMemory.Round.Add(mRound(dispParam.StageNo))
                                        Exit For
                                    End If

                            End Select
                        End With

                    Case eStepFunctionType.Move3D
                        With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Move3D
                            If .EndPosX <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Move3D.EndPosX Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .EndPosY <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Move3D.EndPosY Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                            If .EndPosZ <> patternMemory.Round(0).SStep(mJ(dispParam.StageNo)).Move3D.EndPosZ Then
                                mIsNeedDummyRun(dispParam.StageNo) = True
                                mRound(dispParam.StageNo) = New SPatternRound
                                patternMemory.Round = New List(Of SPatternRound)
                                TransformPatternRound(dispParam.Pattern.Round(dispParam.RoundNo), mRound(dispParam.StageNo))
                                patternMemory.Round.Capacity = patternMemory.Round.Count + 1
                                patternMemory.Round.Add(mRound(dispParam.StageNo))
                                Exit For
                            End If
                        End With


                    Case Else
                        '[Note]:除了Arc、Line、Dot外，都不處理

                End Select
            Next
        Next

        Return mIsNeedDummyRun(dispParam.StageNo)
    End Function

    ''' <summary>[判斷是否需要清空路徑估測時間(根據Pattern與相關資訊)-->看Pattern是否有變動]</summary>
    ''' <param name="dispParam"></param>
    ''' <param name="patternMemory"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function IsResetEstimateTimeByPattern(ByVal dispParam As sDispParam, ByRef patternMemory As SRecipePattern) As Boolean

        Dim mI(enmStage.Max) As Integer
        Dim mJ(enmStage.Max) As Integer
        Dim mIsNeedResetEstimateTime(enmStage.Max) As Boolean               '[是否需要重新空跑]
        Dim mRound(enmStage.Max) As SPatternRound
        Dim mCycleTimes(enmStage.Max) As Decimal

        '[Note]:預設為不需要重新空跑，遇到數質不一樣的時候才切成需要空跑
        mIsNeedResetEstimateTime(dispParam.StageNo) = False

        '[Note]:確認點膠CycleTime是否有變動，有變動就是要重新空跑了
        If gJetValveDB.ContainsKey(dispParam.Recipe.StageParts(dispParam.StageNo).ValveName(dispParam.SelectValve)) = True Then
            Select Case gJetValveDB(dispParam.Recipe.StageParts(dispParam.StageNo).ValveName(dispParam.SelectValve)).ValveModel
                Case eValveModel.PicoPulse
                    mCycleTimes(dispParam.StageNo) = gJetValveDB(dispParam.Recipe.StageParts(dispParam.StageNo).ValveName(dispParam.SelectValve)).PicoTouch.CycleTime
                Case eValveModel.Advanjet
                    mCycleTimes(dispParam.StageNo) = gJetValveDB(dispParam.Recipe.StageParts(dispParam.StageNo).ValveName(dispParam.SelectValve)).Advanjet.CycleTime
            End Select
        Else
            mIsNeedResetEstimateTime(dispParam.StageNo) = True
        End If

        If patternMemory.CycleTime <> mCycleTimes(dispParam.StageNo) Then
            patternMemory.CycleTime = mCycleTimes(dispParam.StageNo)
            mIsNeedResetEstimateTime(dispParam.StageNo) = True
        End If

        If IsNothing(patternMemory.Round) Then
            mIsNeedResetEstimateTime(dispParam.StageNo) = True
            patternMemory = New SRecipePattern
            patternMemory.Round = New List(Of SPatternRound)
            patternMemory.CycleTime = mCycleTimes(dispParam.StageNo)
            For mI(dispParam.StageNo) = 0 To dispParam.Pattern.Round.Count - 1
                mRound(dispParam.StageNo) = New SPatternRound
                TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                patternMemory.Round.Add(mRound(dispParam.StageNo))
                mRound(dispParam.StageNo) = Nothing
            Next
            Return mIsNeedResetEstimateTime(dispParam.StageNo)
        End If

        '[Note]:若Round的次數不同，就直接更新了 
        If dispParam.Pattern.Round.Count <> patternMemory.Round.Count Then
            mIsNeedResetEstimateTime(dispParam.StageNo) = True
            patternMemory = New SRecipePattern
            patternMemory.Round = New List(Of SPatternRound)
            patternMemory.CycleTime = mCycleTimes(dispParam.StageNo)
            For mI(dispParam.StageNo) = 0 To dispParam.Pattern.Round.Count - 1
                mRound(dispParam.StageNo) = New SPatternRound
                TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                patternMemory.Round.Add(mRound(dispParam.StageNo))
                mRound(dispParam.StageNo) = Nothing
            Next
            Return mIsNeedResetEstimateTime(dispParam.StageNo)
        End If

        For mI(dispParam.StageNo) = 0 To dispParam.Pattern.Round.Count - 1
            '[Note]:Step數量不對就直接更新了
            If dispParam.Pattern.Round(mI(dispParam.StageNo)).StepCount <> patternMemory.Round(mI(dispParam.StageNo)).StepCount Then
                mIsNeedResetEstimateTime(dispParam.StageNo) = True
                mRound(dispParam.StageNo) = New SPatternRound
                TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                patternMemory.Round.Add(mRound(dispParam.StageNo))
            Else
                '[Note]:每個Step
                For mJ(dispParam.StageNo) = 0 To dispParam.Pattern.Round(mI(dispParam.StageNo)).StepCount - 1
                    '[Note]:若資料內容比對不相同，表示需要重新空跑
                    If dispParam.Pattern.Round(mI(dispParam.StageNo)).CStep(mJ(dispParam.StageNo)).StepType <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).StepType Then
                        mIsNeedResetEstimateTime(dispParam.StageNo) = True
                        mRound(dispParam.StageNo) = New SPatternRound
                        TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                        patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                        patternMemory.Round.Add(mRound(dispParam.StageNo))
                        Exit For
                    End If

                    Select Case dispParam.Pattern.Round(mI(dispParam.StageNo)).CStep(mJ(dispParam.StageNo)).StepType
                        Case eStepFunctionType.Arc2D
                            With dispParam.Pattern.Round(mI(dispParam.StageNo)).CStep(mJ(dispParam.StageNo)).Arc2D
                                If .StartPosX <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc2D.StartPosX Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .StartPosY <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc2D.StartPosY Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .CenterPosX <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc2D.CenterPosX Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .CenterPosY <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc2D.CenterPosY Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .EndPosX <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc2D.EndPosX Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .EndPosY <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc2D.EndPosY Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .Direction <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc2D.Direction Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .Angle <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc2D.Angle Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                '[Note]:新格式
                                If .WeightControl.Type <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc2D.WeightControl.Type Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                Select Case .WeightControl.Type
                                    Case eWeightControlType.Dots
                                        If .WeightControl.DotCounts <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc2D.WeightControl.DotCounts Then
                                            mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                            mRound(dispParam.StageNo) = New SPatternRound
                                            TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                            patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                            patternMemory.Round.Add(mRound(dispParam.StageNo))
                                            Exit For
                                        End If

                                    Case eWeightControlType.Weight
                                        If .WeightControl.Weight <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc2D.WeightControl.Weight Then
                                            mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                            mRound(dispParam.StageNo) = New SPatternRound
                                            TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                            patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                            patternMemory.Round.Add(mRound(dispParam.StageNo))
                                            Exit For
                                        End If

                                End Select
                            End With

                        Case eStepFunctionType.Circle2D
                            With dispParam.Pattern.Round(mI(dispParam.StageNo)).CStep(mJ(dispParam.StageNo)).Circle2D
                                If .StartPosX <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Circle2D.StartPosX Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .StartPosY <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Circle2D.StartPosY Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .CenterPosX <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Circle2D.CenterPosX Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .CenterPosY <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Circle2D.CenterPosY Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .CenterPosX <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Circle2D.CenterPosX Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .EndPosX <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Circle2D.EndPosX Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                '[Note]:新格式
                                If .WeightControl.Type <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Circle2D.WeightControl.Type Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                Select Case .WeightControl.Type
                                    Case eWeightControlType.Dots
                                        If .WeightControl.DotCounts <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Circle2D.WeightControl.DotCounts Then
                                            mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                            mRound(dispParam.StageNo) = New SPatternRound
                                            TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                            patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                            patternMemory.Round.Add(mRound(dispParam.StageNo))
                                            Exit For
                                        End If

                                    Case eWeightControlType.Weight
                                        If .WeightControl.Weight <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Circle2D.WeightControl.Weight Then
                                            mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                            mRound(dispParam.StageNo) = New SPatternRound
                                            TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                            patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                            patternMemory.Round.Add(mRound(dispParam.StageNo))
                                            Exit For
                                        End If

                                End Select
                            End With

                        Case eStepFunctionType.Dots3D
                            With dispParam.Pattern.Round(mI(dispParam.StageNo)).CStep(mJ(dispParam.StageNo)).Dots3D
                                If .PosX <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Dots3D.PosX Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .PosY <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Dots3D.PosY Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                '[Note]:Dots是強制轉換成Velocity模式，目只看Velocity是否有被改過。
                                .WeightControl.Type = eWeightControlType.Velocity
                                Select Case .WeightControl.Type
                                    Case eWeightControlType.Velocity
                                        If .WeightControl.Velocity <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Dots3D.WeightControl.Velocity Then
                                            mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                            mRound(dispParam.StageNo) = New SPatternRound
                                            TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                            patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                            patternMemory.Round.Add(mRound(dispParam.StageNo))
                                            Exit For
                                        End If

                                End Select
                            End With

                        Case eStepFunctionType.Line3D
                            With dispParam.Pattern.Round(mI(dispParam.StageNo)).CStep(mJ(dispParam.StageNo)).Line3D
                                If .StartPosX <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Line3D.StartPosX Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .StartPosY <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Line3D.StartPosY Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .EndPosX <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Line3D.EndPosX Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .EndPosY <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Line3D.EndPosY Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                '[Note]:新格式
                                If .WeightControl.Type <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Line3D.WeightControl.Type Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                Select Case .WeightControl.Type
                                    Case eWeightControlType.Dots
                                        If .WeightControl.DotCounts <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Line3D.WeightControl.DotCounts Then
                                            mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                            mRound(dispParam.StageNo) = New SPatternRound
                                            TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                            patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                            patternMemory.Round.Add(mRound(dispParam.StageNo))
                                            Exit For
                                        End If

                                    Case eWeightControlType.Weight
                                        If .WeightControl.Weight <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Line3D.WeightControl.Weight Then
                                            mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                            mRound(dispParam.StageNo) = New SPatternRound
                                            TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                            patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                            patternMemory.Round.Add(mRound(dispParam.StageNo))
                                            Exit For
                                        End If

                                End Select
                            End With

                        Case eStepFunctionType.Circle3D
                            With dispParam.Pattern.Round(mI(dispParam.StageNo)).CStep(mJ(dispParam.StageNo)).Circle3D
                                If .StartPosX <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Circle3D.StartPosX Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .StartPosY <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Circle3D.StartPosY Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .StartPosZ <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Circle3D.StartPosZ Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .CenterPosX <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Circle3D.CenterPosX Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .CenterPosY <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Circle3D.CenterPosY Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .CenterPosZ <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Circle3D.CenterPosZ Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .EndPosX <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Circle3D.EndPosX Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .EndPosY <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Circle3D.EndPosY Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .EndPosZ <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Circle3D.EndPosZ Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                '[Note]:新格式
                                If .WeightControl.Type <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Circle3D.WeightControl.Type Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                Select Case .WeightControl.Type
                                    Case eWeightControlType.Dots
                                        If .WeightControl.DotCounts <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Circle3D.WeightControl.DotCounts Then
                                            mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                            mRound(dispParam.StageNo) = New SPatternRound
                                            TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                            patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                            patternMemory.Round.Add(mRound(dispParam.StageNo))
                                            Exit For
                                        End If

                                    Case eWeightControlType.Weight
                                        If .WeightControl.Weight <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Circle3D.WeightControl.Weight Then
                                            mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                            mRound(dispParam.StageNo) = New SPatternRound
                                            TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                            patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                            patternMemory.Round.Add(mRound(dispParam.StageNo))
                                            Exit For
                                        End If

                                End Select
                            End With

                        Case eStepFunctionType.Arc3D
                            With dispParam.Pattern.Round(mI(dispParam.StageNo)).CStep(mJ(dispParam.StageNo)).Arc3D
                                If .StartPosX <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc3D.StartPosX Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .StartPosY <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc3D.StartPosY Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .StartPosZ <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc3D.StartPosZ Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .CenterPosX <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc3D.CenterPosX Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .CenterPosY <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc3D.CenterPosY Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .CenterPosZ <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc3D.CenterPosZ Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .EndPosX <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc3D.EndPosX Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .EndPosY <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc3D.EndPosY Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .EndPosZ <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc3D.EndPosZ Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .Direction <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc3D.Direction Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .Angle <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc3D.Angle Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                '[Note]:新格式
                                If .WeightControl.Type <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc3D.WeightControl.Type Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                Select Case .WeightControl.Type
                                    Case eWeightControlType.Dots
                                        If .WeightControl.DotCounts <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc3D.WeightControl.DotCounts Then
                                            mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                            mRound(dispParam.StageNo) = New SPatternRound
                                            TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                            patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                            patternMemory.Round.Add(mRound(dispParam.StageNo))
                                            Exit For
                                        End If

                                    Case eWeightControlType.Weight
                                        If .WeightControl.Weight <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Arc3D.WeightControl.Weight Then
                                            mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                            mRound(dispParam.StageNo) = New SPatternRound
                                            TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                            patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                            patternMemory.Round.Add(mRound(dispParam.StageNo))
                                            Exit For
                                        End If

                                End Select
                            End With

                        Case eStepFunctionType.Move3D
                            With dispParam.Pattern.Round(mI(dispParam.StageNo)).CStep(mJ(dispParam.StageNo)).Move3D
                                If .EndPosX <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Move3D.EndPosX Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .EndPosY <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Move3D.EndPosY Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                                If .EndPosZ <> patternMemory.Round(mI(dispParam.StageNo)).SStep(mJ(dispParam.StageNo)).Move3D.EndPosZ Then
                                    mIsNeedResetEstimateTime(dispParam.StageNo) = True
                                    mRound(dispParam.StageNo) = New SPatternRound
                                    TransformPatternRound(dispParam.Pattern.Round(mI(dispParam.StageNo)), mRound(dispParam.StageNo))
                                    patternMemory.Round.RemoveAt(mI(dispParam.StageNo))
                                    patternMemory.Round.Add(mRound(dispParam.StageNo))
                                    Exit For
                                End If
                            End With

                        Case Else
                            '[Note]:除了Arc、Line、Dot外，都不處理

                    End Select
                Next
            End If
        Next

        Return mIsNeedResetEstimateTime(dispParam.StageNo)
    End Function

    ''' <summary>[此Round是否需要點膠]</summary>
    ''' <param name="dispParam"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function IsDispRound(ByVal dispParam As sDispParam) As Boolean

        Dim mI(enmStage.Max) As Integer

        '[Note]:每個Step
        For mI(dispParam.StageNo) = 0 To dispParam.Pattern.Round(dispParam.RoundNo).StepCount - 1
            Select Case dispParam.Pattern.Round(dispParam.RoundNo).CStep(mI(dispParam.StageNo)).StepType
                Case eStepFunctionType.Arc2D, eStepFunctionType.Arc3D, eStepFunctionType.Dots3D, eStepFunctionType.Circle2D, eStepFunctionType.Circle3D, eStepFunctionType.Dots3D, eStepFunctionType.Line3D
                    Return True

            End Select
        Next

        Return False

    End Function

    ''' <summary>[根據路徑資訊(Velocity、CycleTime、Distance) or (Distance、DotWeigth)算出DotCounts]</summary>
    ''' <param name="path"></param>
    ''' <param name="cycleTime"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function TransformDotCounts(ByRef path As sPatternPath, ByVal cycleTime As Decimal, ByVal dotWeight As Decimal) As Boolean

        Dim mdx As Decimal
        Dim mdy As Decimal
        Dim mr As Decimal
        Dim mArcLength As Decimal                   '[弧長]
        Dim mDotPitch As Decimal
        Dim mDotCounts As Integer                   '[無條件進位]

        Select Case path.PathType
            Case ePathType.Arc2D
                Select Case path.Arc2D.WeightControl.Type
                    Case eWeightControlType.Dots
                        Return True

                    Case eWeightControlType.Velocity
                        '[Note]:Pitch
                        'mm=s*mm/s
                        mDotPitch = (0.001 * cycleTime) * path.Arc2D.WeightControl.Velocity

                        '[Note]:長度
                        With path.Arc2D
                            mdx = .EndPosX - .CenterPosX
                            mdy = .EndPosY - .CenterPosY
                            mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                        End With

                        '[Note]:弧長=2*PI*R*Angle/360
                        '           =PI*R*Angle/180
                        mArcLength = mr * Math.PI * path.Arc2D.Angle / 180

                        '[DotCounts、DotPitch]
                        mDotCounts = CInt(mArcLength / mDotPitch) + 1
                        path.Arc2D.WeightControl.DotCounts = mDotCounts
                        path.Arc2D.WeightControl.dotPitch = mDotPitch
                        Return True

                    Case eWeightControlType.Weight
                        '[DotCounts]
                        If dotWeight > 0 Then
                            mDotCounts = CInt(path.Arc2D.WeightControl.Weight / dotWeight)
                        Else
                            '[Note]:不應該發生才對，發生要找原因
                            mDotCounts = 2
                        End If
                        path.Arc2D.WeightControl.DotCounts = mDotCounts
                        Return True

                        'Case eWeightControlType.Complex
                        '    Return True

                End Select

            Case ePathType.Arc3D
                Select Case path.Arc3D.WeightControl.Type
                    Case eWeightControlType.Dots
                        Return True

                    Case eWeightControlType.Velocity
                        '[Note]:Pitch
                        'mm=s*mm/s
                        mDotPitch = (0.001 * cycleTime) * path.Arc3D.WeightControl.Velocity

                        '[Note]:長度
                        With path.Arc3D
                            mdx = .EndPosX - .CenterPosX
                            mdy = .EndPosY - .CenterPosY
                            mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                        End With

                        '[Note]:弧長=2*PI*R*Angle/360
                        '           =PI*R*Angle/180
                        mArcLength = mr * Math.PI * path.Arc3D.Angle / 180

                        '[DotCounts、DotPitch]
                        mDotCounts = CInt(mArcLength / mDotPitch) + 1
                        path.Arc3D.WeightControl.DotCounts = mDotCounts
                        path.Arc3D.WeightControl.dotPitch = mDotPitch
                        Return True

                    Case eWeightControlType.Weight
                        '[DotCounts]
                        If dotWeight > 0 Then
                            mDotCounts = CInt(path.Arc3D.WeightControl.Weight / dotWeight)
                        Else
                            '[Note]:不應該發生才對，發生要找原因
                            mDotCounts = 2
                        End If
                        path.Arc3D.WeightControl.DotCounts = mDotCounts
                        Return True

                        'Case eWeightControlType.Complex
                        '    Return True

                End Select

            Case ePathType.Dot3D
                Select Case path.Dot3D.WeightControl.Type
                    Case eWeightControlType.Dots
                        Return True

                    Case eWeightControlType.Velocity
                        '[Note]:Dot，不管速度是多少，就是只有一個Dots(若後續有要改，再來說吧 )
                        path.Dot3D.WeightControl.DotCounts = 1
                        Return True

                    Case eWeightControlType.Weight
                        '[Note]:目前只之支援單顆Dots
                        ''[DotCounts]
                        'If dotWeight > 0 Then
                        '    mDotCounts = CInt(weightControl.Weight / dotWeight)
                        'Else
                        '    '[Note]:不應該發生才對，發生要找原因
                        '    mDotCounts = 2
                        'End If
                        path.Dot3D.WeightControl.DotCounts = 1
                        Return True

                        'Case eWeightControlType.Complex
                        '    Return True

                End Select

            Case ePathType.Line3D
                Select Case path.Line3D.WeightControl.Type
                    Case eWeightControlType.Dots
                        Return True

                    Case eWeightControlType.Velocity
                        '[Note]:Pitch
                        'mm=s*mm/s
                        mDotPitch = (0.001 * cycleTime) * path.Line3D.WeightControl.Velocity

                        '[Note]:長度
                        With path.Line3D
                            mdx = .EndPosX - .StartPosX
                            mdy = .EndPosY - .StartPosY
                            mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                        End With

                        '[DotCounts、DotPitch]
                        mDotCounts = CInt(mr / mDotPitch) + 1
                        path.Line3D.WeightControl.DotCounts = mDotCounts
                        path.Line3D.WeightControl.dotPitch = mDotPitch
                        Return True

                    Case eWeightControlType.Weight
                        '[DotCounts]
                        If dotWeight > 0 Then
                            mDotCounts = CInt(path.Line3D.WeightControl.Weight / dotWeight)
                        Else
                            '[Note]:不應該發生才對，發生要找原因
                            mDotCounts = 2
                        End If
                        path.Line3D.WeightControl.DotCounts = mDotCounts
                        Return True

                        'Case eWeightControlType.Complex
                        '    Return True

                End Select

            Case ePathType.Wait
                Return True

            Case Else
                Return True

        End Select

        Return True

    End Function

    Dim mIsExtendOn(enmStage.Max) As Boolean                            '[強制路徑延伸]

    ''' <summary>[將所有的座標先串起來，後面再做運算處理(Motion)]</summary>
    ''' <param name="dispParam"></param>
    ''' <param name="dispPathRegister"></param>
    ''' <param name="limitPos"></param>
    ''' <param name="dispensingList"></param>
    ''' <param name="isClearDispPathRegister"></param>
    ''' <param name="isOnlyGetlimitPos"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function CreateDispList(ByVal dispParam As sDispParam, ByRef dispPathRegister As List(Of sPatternPath), ByRef limitPos As Premtek.sPos, ByRef dispensingList As List(Of sDispensingDie), Optional ByVal isClearDispPathRegister As Boolean = True, Optional ByVal isOnlyGetlimitPos As Boolean = False) As Boolean

        '[Note]:為了要處理Dot的串接，所以資料要作暫存藉此記錄選用的閥與Basic Pos
        Static mTiltValue(enmStage.Max) As Decimal                             '[Tilt角度]
        Static mNeedTh(enmStage.Max) As Premtek.sPos                                   '[待旋轉的位置]
        Static mBasicPos(enmStage.Max) As Premtek.sPos                                 '[BasicPos-(Ccd至Valve的相對位置)]
        Static mCenterPos(enmStage.Max) As Premtek.sPos                                '[中心點座標]
        Static mTh(enmStage.Max) As Decimal                                    '[旋轉角度] 
        Static mIsFristPathInDie(enmStage.Max) As Boolean

        Dim mArcExtendOffsetCutIn(enmStage.Max) As Premtek.sPos
        Dim mArcExtendOffsetCutOut(enmStage.Max) As Premtek.sPos
        Dim mRunUp(enmStage.Max) As sExtendParam                            '[助跑資料]
        Dim mDotWeight(enmStage.Max) As Decimal                             '[mg]
        Dim mCycleTimes(enmStage.Max) As Decimal                            '[ms]

        Dim mPath(enmStage.Max) As sPatternPath
        Dim mArrayIndexX(enmStage.Max) As Integer
        Dim mArrayIndexY(enmStage.Max) As Integer
        Dim mStandardPos(enmStage.Max) As Premtek.sPos                              '[旋轉前的座標]
        Dim mTransformPos(enmStage.Max) As Premtek.sPos                             '[旋轉後的座標]
        Dim mI(enmStage.Max) As Integer
        Dim mJ(enmStage.Max) As Integer
        Dim mIsLastRowColumn(enmStage.Max) As Boolean
        Dim mDieStartIndex(enmStage.Max) As Integer                         '[從哪一顆開始]
        Dim mDieEndIndex(enmStage.Max) As Integer                           '[到哪一顆結束]
        Dim mStartStepIndex(enmStage.Max) As Integer                        '[從哪一個Step開始]
        Dim mEndStepIndex(enmStage.Max) As Integer                          '[到哪一個Step結束]
        Dim mDispPathRegister(enmStage.Max) As List(Of sPatternPath)
        Dim mLimitPos(enmStage.Max) As Premtek.sPos                                 '[估算極限位置]

        Dim mDispensingDie(enmStage.Max) As sDispensingDie

        'Step1:取出CycleTime
        If gJetValveDB.ContainsKey(dispParam.Recipe.StageParts(dispParam.StageNo).ValveName(dispParam.SelectValve)) = True Then
            Select Case gJetValveDB(dispParam.Recipe.StageParts(dispParam.StageNo).ValveName(dispParam.SelectValve)).ValveModel
                Case eValveModel.PicoPulse
                    mCycleTimes(dispParam.StageNo) = gJetValveDB(dispParam.Recipe.StageParts(dispParam.StageNo).ValveName(dispParam.SelectValve)).PicoTouch.CycleTime
                Case eValveModel.Advanjet
                    mCycleTimes(dispParam.StageNo) = gJetValveDB(dispParam.Recipe.StageParts(dispParam.StageNo).ValveName(dispParam.SelectValve)).Advanjet.CycleTime
            End Select
        Else
            Return False
        End If

        '[Note]:取出單點重量
        mDotWeight(dispParam.StageNo) = gCRecipe.StageParts(dispParam.StageNo).AverageWeightPerDot(dispParam.SelectValve)

        '[Note]:將所有路徑座標存至暫存器
        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item
        If isClearDispPathRegister = True Then
            mDispPathRegister(dispParam.StageNo) = New List(Of sPatternPath)
            mDispPathRegister(dispParam.StageNo).Clear()
        Else
            '[Note]:保留原有的接續串接起來
            mDispPathRegister(dispParam.StageNo) = dispPathRegister
        End If

        Select Case dispParam.DispDieType
            Case enmDispMultiDie.SingleDie
                mDieStartIndex(dispParam.StageNo) = dispParam.SingleDieParam.DieIndex
                mDieEndIndex(dispParam.StageNo) = dispParam.SingleDieParam.DieIndex
                mStartStepIndex(dispParam.StageNo) = dispParam.SingleDieParam.StartStep
                mEndStepIndex(dispParam.StageNo) = dispParam.SingleDieParam.EndStep

            Case enmDispMultiDie.MultiDie
                mDieStartIndex(dispParam.StageNo) = dispParam.MulitDieParam.Start
                mDieEndIndex(dispParam.StageNo) = dispParam.MulitDieParam.Ending
                mStartStepIndex(dispParam.StageNo) = 0
                mEndStepIndex(dispParam.StageNo) = dispParam.Pattern.Round(dispParam.RoundNo).StepCount - 1

        End Select

        '[Note]:預設為強制延伸路徑
        'mIsExtendOn(dispParam.StageNo) = True

        '[Note]:若是走節點串接，則只有第一個點視為起始的第一點，後面節點串街都視為同一顆。
        If isClearDispPathRegister = True Then
            mIsFristPathInDie(dispParam.StageNo) = True
        End If

        'Step2:從哪一顆做到哪一顆
        For mI(dispParam.StageNo) = mDieStartIndex(dispParam.StageNo) To mDieEndIndex(dispParam.StageNo)
            'Step3:先取出該顆BasicPos，再做處理
            With dispParam
                mArrayIndexX(dispParam.StageNo) = .DispList.Item(mI(dispParam.StageNo)).IndexX
                mArrayIndexY(dispParam.StageNo) = .DispList.Item(mI(dispParam.StageNo)).IndexY
                mIsLastRowColumn(dispParam.StageNo) = .DispList.Item(mI(dispParam.StageNo)).IsLastRowColumn
            End With

            mDispensingDie(dispParam.StageNo).IndexX = mArrayIndexX(dispParam.StageNo)
            mDispensingDie(dispParam.StageNo).IndexY = mArrayIndexY(dispParam.StageNo)
            mDispensingDie(dispParam.StageNo).NodeName = dispParam.NodeName

            ''[Note]:若是走節點串接，則只有第一個點視為起始的第一點，後面節點串街都視為同一顆。
            'If isClearDispPathRegister = True Then
            '    mIsFristPathInDie(dispParam.StageNo) = True
            'End If


            '[Note]:每個Step
            For mJ(dispParam.StageNo) = mStartStepIndex(dispParam.StageNo) To mEndStepIndex(dispParam.StageNo)
                '[Note]:執行到最後一個Step才視為完成這個Round
                If mJ(dispParam.StageNo) = dispParam.Pattern.Round(dispParam.RoundNo).StepCount - 1 Then
                    mDispensingDie(dispParam.StageNo).RoundNo = dispParam.RoundNo
                    dispensingList.Add(mDispensingDie(dispParam.StageNo))
                End If

                '[Note]:將每個Step資料暫存至暫存器
                '       先經過旋轉傳換後再將座標塞進暫存器(先不處理Z軸)

                Select Case dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).StepType
                    Case eStepFunctionType.SelectValve
                        mTiltValue(dispParam.StageNo) = dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).SelectValve.PosB

                        '[Note]:由於考量到Tilt角度問題，故原本記錄整體偏移量的改在選Valve後處理。
                        With gStageMap(dispParam.StageNo).Node(dispParam.NodeName).SRecipePos(mArrayIndexX(dispParam.StageNo), mArrayIndexY(dispParam.StageNo))
                            mBasicPos(dispParam.StageNo).PosX = .RealBasicPosX
                            mBasicPos(dispParam.StageNo).PosY = .RealBasicPosY
                            mBasicPos(dispParam.StageNo).PosZ = gStageMap(dispParam.StageNo).Node(dispParam.NodeName).SLaserValue(mArrayIndexX(dispParam.StageNo), mArrayIndexY(dispParam.StageNo)).RealBasicZHigh
                            mBasicPos(dispParam.StageNo).PosZ = mBasicPos(dispParam.StageNo).PosZ - gSSystemParameter.Pos.LaserTiltValveCalbration(dispParam.StageNo).LaserTiltValveOffsetZ(dispParam.SelectValve, mTiltValue(dispParam.StageNo))
                            If gSSystemParameter.EnableVideoRun Then '[視覺膠路為相機高度]
                                mBasicPos(dispParam.StageNo).PosZ = gStageMap(dispParam.StageNo).Node(dispParam.NodeName).SRecipePos(mArrayIndexX(dispParam.StageNo), mArrayIndexY(dispParam.StageNo)).ScanPosZ
                            End If
                            'mBasicPos(dispParam.StageNo).PosZ = mBasicPos(dispParam.StageNo).PosZ + dispParam.Recipe.StageParts(dispParam.StageNo).ValveShiftZ(dispParam.SelectValve)

                            'Eason 20170303 Ticket:100100 , XY Offset from CSV File
                            'mNeedTh(dispParam.StageNo).PosX = -gSSystemParameter.Pos.CCDTiltVavleCalbration(dispParam.StageNo).CCDTiltValveOffsetX(dispParam.SelectValve, mTiltValue(dispParam.StageNo)) + dispParam.Recipe.StageParts(dispParam.StageNo).ValveShiftX(dispParam.SelectValve)
                            'mNeedTh(dispParam.StageNo).PosY = -gSSystemParameter.Pos.CCDTiltVavleCalbration(dispParam.StageNo).CCDTiltValveOffsetY(dispParam.SelectValve, mTiltValue(dispParam.StageNo)) + dispParam.Recipe.StageParts(dispParam.StageNo).ValveShiftY(dispParam.SelectValve)
                            'mCenterPos(dispParam.StageNo).PosX = .ScanPosX
                            'mCenterPos(dispParam.StageNo).PosY = .ScanPosY
                            '[Note]:以點膠基準點為中心做旋轉(點交基準點在定位完成的時候已經做過旋轉平移修正[是以Golden Pattern為旋轉中心])
                            'Eason 20170303 Ticket:100100 , XY Offset from CSV File
                            Dim GetCSVOffsetIndexX As Integer = gStageOffsetFromSCV(dispParam.StageNo).GetIndexfromPosX(mBasicPos(dispParam.StageNo).PosX)
                            Dim GetCSVOffsetIndexY As Integer = gStageOffsetFromSCV(dispParam.StageNo).GetIndexfromPosY(mBasicPos(dispParam.StageNo).PosY)
                            Dim GetCSVOffsetX As Decimal = gStageOffsetFromSCV(dispParam.StageNo).GetOffsetfromIndexX(GetCSVOffsetIndexX, GetCSVOffsetIndexY)
                            Dim GetCSVOffsetY As Decimal = gStageOffsetFromSCV(dispParam.StageNo).GetOffsetfromIndexY(GetCSVOffsetIndexX, GetCSVOffsetIndexY)
                            mNeedTh(dispParam.StageNo).PosX = -gSSystemParameter.Pos.CCDTiltVavleCalbration(dispParam.StageNo).CCDTiltValveOffsetX(dispParam.SelectValve, mTiltValue(dispParam.StageNo)) + dispParam.Recipe.StageParts(dispParam.StageNo).ValveShiftX(dispParam.SelectValve) + GetCSVOffsetX
                            mNeedTh(dispParam.StageNo).PosY = -gSSystemParameter.Pos.CCDTiltVavleCalbration(dispParam.StageNo).CCDTiltValveOffsetY(dispParam.SelectValve, mTiltValue(dispParam.StageNo)) + dispParam.Recipe.StageParts(dispParam.StageNo).ValveShiftY(dispParam.SelectValve) + GetCSVOffsetY

                            'Eason 20170303 Ticket:100100 , XY Offset from CSV File [E]
                            If (gStageOffsetFromSCV(dispParam.StageNo).Enable) Then
                                Dim Logstring As String = ""
                                Logstring = "Now Stage = " & dispParam.StageNo.ToString()
                                gMeEventLog.Log(Logstring)
                                Logstring = "IndexX = " & GetCSVOffsetIndexX & " , IndexY = " & GetCSVOffsetIndexY
                                gMeEventLog.Log(Logstring)
                                Logstring = "GetOffsetX = " & GetCSVOffsetX.ToString("0.0000") & " , GetOffsetY = " & GetCSVOffsetY.ToString("0.0000")
                                gMeEventLog.Log(Logstring)
                            End If

                            mCenterPos(dispParam.StageNo).PosX = 0
                            mCenterPos(dispParam.StageNo).PosY = 0
                            mTh(dispParam.StageNo) = .RealBasicPosTh
                        End With

                    Case eStepFunctionType.ContiStart, eStepFunctionType.ContiEnd
                        ''[Note]:不處理
                        'mIsExtendOn(dispParam.StageNo) = True
                        'TODO:連續結束應截斷連續路徑.
                    Case eStepFunctionType.ExtendOn
                        mIsExtendOn(dispParam.StageNo) = True

                    Case eStepFunctionType.ExtendOff
                        mIsExtendOn(dispParam.StageNo) = False

                    Case eStepFunctionType.Wait
                        mPath(dispParam.StageNo).PathType = ePathType.Wait
                        mPath(dispParam.StageNo).Wait.DwellTimeInMs = dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Wait.DwellTimeInMs
                        mPath(dispParam.StageNo).Wait.IsDispense = False
                        mPath(dispParam.StageNo).Wait.IsFristPathInDie = mIsFristPathInDie(dispParam.StageNo)
                        mPath(dispParam.StageNo).Wait.IsLastRowColumn = mIsLastRowColumn(dispParam.StageNo)
                        mPath(dispParam.StageNo).Wait.IsExtendOn = mIsExtendOn(dispParam.StageNo)
                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                        mDispPathRegister(dispParam.StageNo).Capacity = mDispPathRegister(dispParam.StageNo).Count + 1
                        mDispPathRegister(dispParam.StageNo).Add(mPath(dispParam.StageNo))

                    Case eStepFunctionType.Arc2D
                        mPath(dispParam.StageNo).PathType = ePathType.Arc2D
                        With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Arc2D
                            mPath(dispParam.StageNo).Arc2D.ArcDirection = .Direction
                            mPath(dispParam.StageNo).Arc2D.Angle = .Angle
                            '[Note]:起點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .StartPosX
                            mStandardPos(dispParam.StageNo).PosY = .StartPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Arc2D.StartPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX ' Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.StartPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY ' Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.StartPosZ = mBasicPos(dispParam.StageNo).PosZ + GetDispenseGap(ePathParameterType.Arc, .ArcParameterName)
                            '[Note]:圓心點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .CenterPosX
                            mStandardPos(dispParam.StageNo).PosY = .CenterPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Arc2D.CenterPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX ' Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.CenterPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY ' Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.CenterPosZ = mBasicPos(dispParam.StageNo).PosZ + GetDispenseGap(ePathParameterType.Arc, .ArcParameterName)
                            '[Note]:終點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .EndPosX
                            mStandardPos(dispParam.StageNo).PosY = .EndPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Arc2D.EndPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX ' Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.EndPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY ' Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.EndPosZ = mBasicPos(dispParam.StageNo).PosZ + GetDispenseGap(ePathParameterType.Arc, .ArcParameterName)
                            mPath(dispParam.StageNo).Arc2D.WeightControl = .WeightControl
                            '[Note]:更新重量控制資訊
                            Call TransformDotCounts(mPath(dispParam.StageNo), mCycleTimes(dispParam.StageNo), mDotWeight(dispParam.StageNo))
                            mPath(dispParam.StageNo).Arc2D.ParameterType = ePathParameterType.Arc
                            mPath(dispParam.StageNo).Arc2D.ParameterName = .ArcParameterName
                            '20171016
                            mPath(dispParam.StageNo).Arc2D.StartVel = .StartVel
                        End With
                        mPath(dispParam.StageNo).Arc2D.IsDispense = True
                        mPath(dispParam.StageNo).Arc2D.Velocity = 0
                        mPath(dispParam.StageNo).Arc2D.IsFristPathInDie = mIsFristPathInDie(dispParam.StageNo)
                        mPath(dispParam.StageNo).Arc2D.IsLastRowColumn = mIsLastRowColumn(dispParam.StageNo)
                        mPath(dispParam.StageNo).Arc2D.IsExtendOn = mIsExtendOn(dispParam.StageNo)

                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                        mDispPathRegister(dispParam.StageNo).Capacity = mDispPathRegister(dispParam.StageNo).Count + 1
                        mDispPathRegister(dispParam.StageNo).Add(mPath(dispParam.StageNo))
                        If mIsFristPathInDie(dispParam.StageNo) = True Then
                            mIsFristPathInDie(dispParam.StageNo) = False
                        End If

                        If mIsExtendOn(dispParam.StageNo) = True Then
                            '[Note]:算出需助跑的資料
                            Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes(dispParam.StageNo), mDotWeight(dispParam.StageNo), mPath(dispParam.StageNo), mRunUp(dispParam.StageNo))
                            Call EstimateArcExtendPath(mPath(dispParam.StageNo), mRunUp(dispParam.StageNo).Distance, mArcExtendOffsetCutIn(dispParam.StageNo), mArcExtendOffsetCutOut(dispParam.StageNo))
                        Else
                            mArcExtendOffsetCutIn(dispParam.StageNo).PosX = 0
                            mArcExtendOffsetCutOut(dispParam.StageNo).PosX = 0
                        End If

                        '[Note]:估算極限位置
                        Select Case dispParam.StageNo
                            Case enmStage.No1, enmStage.No3
                                '[Note]:取X最大值
                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.StartPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.StartPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.StartPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.StartPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                            Case enmStage.No2, enmStage.No4
                                '[Note]:取X最小值
                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.StartPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.StartPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.StartPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.StartPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                        End Select
                        If mLimitPos(dispParam.StageNo).PosY > mPath(dispParam.StageNo).Arc2D.EndPosY Then
                            mLimitPos(dispParam.StageNo).PosY = mPath(dispParam.StageNo).Arc2D.EndPosY
                        End If

                        If mLimitPos(dispParam.StageNo).PosY > mPath(dispParam.StageNo).Arc2D.StartPosY Then
                            mLimitPos(dispParam.StageNo).PosY = mPath(dispParam.StageNo).Arc2D.StartPosY
                        End If

                    Case eStepFunctionType.Circle2D
                        mPath(dispParam.StageNo).PathType = ePathType.Arc2D
                        With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Circle2D
                            mPath(dispParam.StageNo).Arc2D.ArcDirection = .Direction                              'eArcDirection.CW
                            mPath(dispParam.StageNo).Arc2D.Angle = 360
                            '[Note]:圓心點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .CenterPosX
                            mStandardPos(dispParam.StageNo).PosY = .CenterPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Arc2D.CenterPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.CenterPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.CenterPosZ = mBasicPos(dispParam.StageNo).PosZ + GetDispenseGap(ePathParameterType.Arc, .ArcParameterName)
                            '[Note]:終點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .EndPosX
                            mStandardPos(dispParam.StageNo).PosY = .EndPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Arc2D.EndPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.EndPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.EndPosZ = mBasicPos(dispParam.StageNo).PosZ + GetDispenseGap(ePathParameterType.Arc, .ArcParameterName)
                            mPath(dispParam.StageNo).Arc2D.StartPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.StartPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.StartPosZ = mBasicPos(dispParam.StageNo).PosZ + GetDispenseGap(ePathParameterType.Arc, .ArcParameterName)
                            mPath(dispParam.StageNo).Arc2D.WeightControl = .WeightControl
                            '[Note]:更新重量控制資訊
                            Call TransformDotCounts(mPath(dispParam.StageNo), mCycleTimes(dispParam.StageNo), mDotWeight(dispParam.StageNo))
                            mPath(dispParam.StageNo).Arc2D.ParameterType = ePathParameterType.Arc
                            mPath(dispParam.StageNo).Arc2D.ParameterName = .ArcParameterName
                            '20171016
                            mPath(dispParam.StageNo).Arc2D.StartVel = .StartVel

                        End With
                        mPath(dispParam.StageNo).Arc2D.IsDispense = True
                        mPath(dispParam.StageNo).Arc2D.Velocity = 0
                        mPath(dispParam.StageNo).Arc2D.IsFristPathInDie = mIsFristPathInDie(dispParam.StageNo)
                        mPath(dispParam.StageNo).Arc2D.IsLastRowColumn = mIsLastRowColumn(dispParam.StageNo)
                        mPath(dispParam.StageNo).Arc2D.IsExtendOn = mIsExtendOn(dispParam.StageNo)
                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                        mDispPathRegister(dispParam.StageNo).Capacity = mDispPathRegister(dispParam.StageNo).Count + 1
                        mDispPathRegister(dispParam.StageNo).Add(mPath(dispParam.StageNo))
                        If mIsFristPathInDie(dispParam.StageNo) = True Then
                            mIsFristPathInDie(dispParam.StageNo) = False
                        End If

                        If mIsExtendOn(dispParam.StageNo) = True Then
                            '[Note]:算出需助跑的資料
                            Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes(dispParam.StageNo), mDotWeight(dispParam.StageNo), mPath(dispParam.StageNo), mRunUp(dispParam.StageNo))
                            Call EstimateArcExtendPath(mPath(dispParam.StageNo), mRunUp(dispParam.StageNo).Distance, mArcExtendOffsetCutIn(dispParam.StageNo), mArcExtendOffsetCutOut(dispParam.StageNo))
                        Else
                            mArcExtendOffsetCutIn(dispParam.StageNo).PosX = 0
                            mArcExtendOffsetCutOut(dispParam.StageNo).PosX = 0
                        End If

                        '[Note]:估算極限位置
                        Select Case dispParam.StageNo
                            Case enmStage.No1, enmStage.No3
                                '[Note]:取X最大值
                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If


                            Case enmStage.No2, enmStage.No4
                                '[Note]:取X最小值
                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                        End Select
                        If mLimitPos(dispParam.StageNo).PosY > mPath(dispParam.StageNo).Arc2D.EndPosY Then
                            mLimitPos(dispParam.StageNo).PosY = mPath(dispParam.StageNo).Arc2D.EndPosY
                        End If

                    Case eStepFunctionType.Dots3D
                        mPath(dispParam.StageNo).PathType = ePathType.Dot3D
                        With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Dots3D
                            '[Note]:點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .PosX
                            mStandardPos(dispParam.StageNo).PosY = .PosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Dot3D.PosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Dot3D.PosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Dot3D.PosZ = .PosZ + mBasicPos(dispParam.StageNo).PosZ + GetDispenseGap(ePathParameterType.Dot, .DotParameterName)
                            mPath(dispParam.StageNo).Dot3D.WeightControl = .WeightControl
                            '[Note]:更新重量控制資訊
                            Call TransformDotCounts(mPath(dispParam.StageNo), mCycleTimes(dispParam.StageNo), mDotWeight(dispParam.StageNo))
                            mPath(dispParam.StageNo).Dot3D.ParameterType = ePathParameterType.Dot
                            mPath(dispParam.StageNo).Dot3D.ParameterName = .DotParameterName
                            '20171016
                            mPath(dispParam.StageNo).Dot3D.StartVel = .StartVel
                        End With
                        mPath(dispParam.StageNo).Dot3D.IsDispense = True
                        mPath(dispParam.StageNo).Dot3D.Velocity = 0
                        mPath(dispParam.StageNo).Dot3D.IsFristPathInDie = mIsFristPathInDie(dispParam.StageNo)
                        mPath(dispParam.StageNo).Dot3D.IsLastRowColumn = mIsLastRowColumn(dispParam.StageNo)
                        mPath(dispParam.StageNo).Dot3D.IsExtendOn = mIsExtendOn(dispParam.StageNo)

                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                        mDispPathRegister(dispParam.StageNo).Capacity = mDispPathRegister(dispParam.StageNo).Count + 1
                        mDispPathRegister(dispParam.StageNo).Add(mPath(dispParam.StageNo))
                        If mIsFristPathInDie(dispParam.StageNo) = True Then
                            mIsFristPathInDie(dispParam.StageNo) = False
                        End If

                        '[Note]:估算極限位置
                        Select Case dispParam.StageNo
                            Case enmStage.No1, enmStage.No3
                                '[Note]:取X最大值
                                If mLimitPos(dispParam.StageNo).PosX < mPath(dispParam.StageNo).Dot3D.PosX Then
                                    mLimitPos(dispParam.StageNo).PosX = mPath(dispParam.StageNo).Dot3D.PosX
                                End If
                            Case enmStage.No2, enmStage.No4
                                '[Note]:取X最小值
                                If mLimitPos(dispParam.StageNo).PosX > mPath(dispParam.StageNo).Dot3D.PosX Then
                                    mLimitPos(dispParam.StageNo).PosX = mPath(dispParam.StageNo).Dot3D.PosX
                                End If
                        End Select
                        If mLimitPos(dispParam.StageNo).PosY > mPath(dispParam.StageNo).Dot3D.PosY Then
                            mLimitPos(dispParam.StageNo).PosY = mPath(dispParam.StageNo).Dot3D.PosY
                        End If

                    Case eStepFunctionType.Line3D
                        mPath(dispParam.StageNo).PathType = ePathType.Line3D
                        Dim dTiltShiftPosX As Decimal
                        With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Line3D
                            '20170607
                            dTiltShiftPosX = Premtek.CDispensingMath.GetTiltShiftPosX(GetDispenseGap(ePathParameterType.Line, .LineParameterName), ConverTiltAngle(mTiltValue(dispParam.StageNo), 3))

                            '[Note]:起點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .StartPosX
                            mStandardPos(dispParam.StageNo).PosY = .StartPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Line3D.StartPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            '20170607
                            mPath(dispParam.StageNo).Line3D.StartPosX = mPath(dispParam.StageNo).Line3D.StartPosX + dTiltShiftPosX
                            mPath(dispParam.StageNo).Line3D.StartPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Line3D.StartPosZ = .StartPosZ + mBasicPos(dispParam.StageNo).PosZ + GetDispenseGap(ePathParameterType.Line, .LineParameterName)
                            '[Note]:終點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .EndPosX
                            mStandardPos(dispParam.StageNo).PosY = .EndPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Line3D.EndPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            '20170607
                            mPath(dispParam.StageNo).Line3D.EndPosX = mPath(dispParam.StageNo).Line3D.EndPosX + dTiltShiftPosX
                            mPath(dispParam.StageNo).Line3D.EndPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Line3D.EndPosZ = .EndPosZ + mBasicPos(dispParam.StageNo).PosZ + GetDispenseGap(ePathParameterType.Line, .LineParameterName)
                            mPath(dispParam.StageNo).Line3D.WeightControl = .WeightControl
                            '[Note]:更新重量控制資訊
                            Call TransformDotCounts(mPath(dispParam.StageNo), mCycleTimes(dispParam.StageNo), mDotWeight(dispParam.StageNo))
                            mPath(dispParam.StageNo).Line3D.ParameterType = ePathParameterType.Line
                            mPath(dispParam.StageNo).Line3D.ParameterName = .LineParameterName
                            '20171016
                            mPath(dispParam.StageNo).Line3D.StartVel = .StartVel
                        End With
                        mPath(dispParam.StageNo).Line3D.IsDispense = True
                        mPath(dispParam.StageNo).Line3D.Velocity = 0
                        mPath(dispParam.StageNo).Line3D.IsFristPathInDie = mIsFristPathInDie(dispParam.StageNo)
                        mPath(dispParam.StageNo).Line3D.IsLastRowColumn = mIsLastRowColumn(dispParam.StageNo)
                        mPath(dispParam.StageNo).Line3D.IsExtendOn = mIsExtendOn(dispParam.StageNo)
                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                        mDispPathRegister(dispParam.StageNo).Capacity = mDispPathRegister(dispParam.StageNo).Count + 1
                        mDispPathRegister(dispParam.StageNo).Add(mPath(dispParam.StageNo))
                        If mIsFristPathInDie(dispParam.StageNo) = True Then
                            mIsFristPathInDie(dispParam.StageNo) = False
                        End If

                        If mIsExtendOn(dispParam.StageNo) = True Then
                            '[Note]:算出需助跑的資料
                            Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes(dispParam.StageNo), mDotWeight(dispParam.StageNo), mPath(dispParam.StageNo), mRunUp(dispParam.StageNo))
                        Else
                            mRunUp(dispParam.StageNo).DistancePosX = 0
                            mRunUp(dispParam.StageNo).DistancePosY = 0
                        End If

                        '[Note]:估算極限位置
                        Select Case dispParam.StageNo
                            Case enmStage.No1, enmStage.No3
                                '[Note]:取X最大值
                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Line3D.StartPosX - mRunUp(dispParam.StageNo).DistancePosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Line3D.StartPosX - mRunUp(dispParam.StageNo).DistancePosX)
                                End If
                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Line3D.EndPosX + mRunUp(dispParam.StageNo).DistancePosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Line3D.EndPosX + mRunUp(dispParam.StageNo).DistancePosX)
                                End If

                            Case enmStage.No2, enmStage.No4
                                '[Note]:取X最小值
                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Line3D.StartPosX - mRunUp(dispParam.StageNo).DistancePosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Line3D.StartPosX - mRunUp(dispParam.StageNo).DistancePosX)
                                End If
                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Line3D.EndPosX + mRunUp(dispParam.StageNo).DistancePosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Line3D.EndPosX + mRunUp(dispParam.StageNo).DistancePosX)
                                End If

                        End Select
                        If mLimitPos(dispParam.StageNo).PosY > mPath(dispParam.StageNo).Line3D.StartPosY Then
                            mLimitPos(dispParam.StageNo).PosY = mPath(dispParam.StageNo).Line3D.StartPosY
                        End If
                        If mLimitPos(dispParam.StageNo).PosY > mPath(dispParam.StageNo).Line3D.EndPosY Then
                            mLimitPos(dispParam.StageNo).PosY = mPath(dispParam.StageNo).Line3D.EndPosY
                        End If

                    Case eStepFunctionType.Circle3D
                        mPath(dispParam.StageNo).PathType = ePathType.Arc2D
                        With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Circle3D
                            mPath(dispParam.StageNo).Arc2D.ArcDirection = eArcDirection.CW
                            mPath(dispParam.StageNo).Arc2D.Angle = 360
                            '[Note]:圓心點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .CenterPosX
                            mStandardPos(dispParam.StageNo).PosY = .CenterPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Arc2D.CenterPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.CenterPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.CenterPosZ = .CenterPosZ + mBasicPos(dispParam.StageNo).PosZ + GetDispenseGap(ePathParameterType.Arc, .ArcParameterName)
                            '[Note]:終點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .EndPosX
                            mStandardPos(dispParam.StageNo).PosY = .EndPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Arc2D.EndPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.EndPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.EndPosZ = .EndPosZ + mBasicPos(dispParam.StageNo).PosZ + GetDispenseGap(ePathParameterType.Arc, .ArcParameterName)
                            mPath(dispParam.StageNo).Arc2D.StartPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.StartPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.StartPosZ = .EndPosZ + mBasicPos(dispParam.StageNo).PosZ + GetDispenseGap(ePathParameterType.Arc, .ArcParameterName)
                            mPath(dispParam.StageNo).Arc2D.WeightControl = .WeightControl
                            '[Note]:更新重量控制資訊
                            Call TransformDotCounts(mPath(dispParam.StageNo), mCycleTimes(dispParam.StageNo), mDotWeight(dispParam.StageNo))
                            mPath(dispParam.StageNo).Arc2D.ParameterType = ePathParameterType.Arc
                            mPath(dispParam.StageNo).Arc2D.ParameterName = .ArcParameterName
                        End With
                        mPath(dispParam.StageNo).Arc2D.IsDispense = True
                        mPath(dispParam.StageNo).Arc2D.Velocity = 0
                        mPath(dispParam.StageNo).Arc2D.IsFristPathInDie = mIsFristPathInDie(dispParam.StageNo)
                        mPath(dispParam.StageNo).Arc2D.IsLastRowColumn = mIsLastRowColumn(dispParam.StageNo)
                        mPath(dispParam.StageNo).Arc2D.IsExtendOn = mIsExtendOn(dispParam.StageNo)
                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                        mDispPathRegister(dispParam.StageNo).Capacity = mDispPathRegister(dispParam.StageNo).Count + 1
                        mDispPathRegister(dispParam.StageNo).Add(mPath(dispParam.StageNo))
                        If mIsFristPathInDie(dispParam.StageNo) = True Then
                            mIsFristPathInDie(dispParam.StageNo) = False
                        End If

                        If mIsExtendOn(dispParam.StageNo) = True Then
                            '[Note]:算出需助跑的資料
                            Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes(dispParam.StageNo), mDotWeight(dispParam.StageNo), mPath(dispParam.StageNo), mRunUp(dispParam.StageNo))
                            Call EstimateArcExtendPath(mPath(dispParam.StageNo), mRunUp(dispParam.StageNo).Distance, mArcExtendOffsetCutIn(dispParam.StageNo), mArcExtendOffsetCutOut(dispParam.StageNo))
                        Else
                            mArcExtendOffsetCutIn(dispParam.StageNo).PosX = 0
                            mArcExtendOffsetCutOut(dispParam.StageNo).PosX = 0
                        End If

                        '[Note]:估算極限位置
                        Select Case dispParam.StageNo
                            Case enmStage.No1, enmStage.No3
                                '[Note]:取X最大值
                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                            Case enmStage.No2, enmStage.No4
                                '[Note]:取X最小值
                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                        End Select
                        If mLimitPos(dispParam.StageNo).PosY > mPath(dispParam.StageNo).Arc2D.EndPosY Then
                            mLimitPos(dispParam.StageNo).PosY = mPath(dispParam.StageNo).Arc2D.EndPosY
                        End If

                    Case eStepFunctionType.Arc3D
                        mPath(dispParam.StageNo).PathType = ePathType.Arc2D
                        With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Arc3D
                            mPath(dispParam.StageNo).Arc2D.ArcDirection = .Direction
                            mPath(dispParam.StageNo).Arc2D.Angle = .Angle
                            '[Note]:圓心點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .CenterPosX
                            mStandardPos(dispParam.StageNo).PosY = .CenterPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Arc2D.CenterPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.CenterPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.CenterPosZ = .CenterPosZ + mBasicPos(dispParam.StageNo).PosZ + GetDispenseGap(ePathParameterType.Arc, .ArcParameterName)
                            '[Note]:終點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .EndPosX
                            mStandardPos(dispParam.StageNo).PosY = .EndPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Arc2D.EndPosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.EndPosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Arc2D.EndPosZ = .EndPosZ + mBasicPos(dispParam.StageNo).PosZ + GetDispenseGap(ePathParameterType.Arc, .ArcParameterName)
                            mPath(dispParam.StageNo).Arc2D.WeightControl = .WeightControl
                            '[Note]:更新重量控制資訊
                            Call TransformDotCounts(mPath(dispParam.StageNo), mCycleTimes(dispParam.StageNo), mDotWeight(dispParam.StageNo))
                            mPath(dispParam.StageNo).Arc2D.ParameterType = ePathParameterType.Arc
                            mPath(dispParam.StageNo).Arc2D.ParameterName = .ArcParameterName
                        End With
                        mPath(dispParam.StageNo).Arc2D.IsDispense = True
                        mPath(dispParam.StageNo).Arc2D.Velocity = 0
                        mPath(dispParam.StageNo).Arc2D.IsFristPathInDie = mIsFristPathInDie(dispParam.StageNo)
                        mPath(dispParam.StageNo).Arc2D.IsLastRowColumn = mIsLastRowColumn(dispParam.StageNo)
                        mPath(dispParam.StageNo).Arc2D.IsExtendOn = mIsExtendOn(dispParam.StageNo)
                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                        mDispPathRegister(dispParam.StageNo).Capacity = mDispPathRegister(dispParam.StageNo).Count + 1
                        mDispPathRegister(dispParam.StageNo).Add(mPath(dispParam.StageNo))
                        If mIsFristPathInDie(dispParam.StageNo) = True Then
                            mIsFristPathInDie(dispParam.StageNo) = False
                        End If

                        If mIsExtendOn(dispParam.StageNo) = True Then
                            '[Note]:算出需助跑的資料
                            Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes(dispParam.StageNo), mDotWeight(dispParam.StageNo), mPath(dispParam.StageNo), mRunUp(dispParam.StageNo))
                            Call EstimateArcExtendPath(mPath(dispParam.StageNo), mRunUp(dispParam.StageNo).Distance, mArcExtendOffsetCutIn(dispParam.StageNo), mArcExtendOffsetCutOut(dispParam.StageNo))
                        Else
                            mArcExtendOffsetCutIn(dispParam.StageNo).PosX = 0
                            mArcExtendOffsetCutOut(dispParam.StageNo).PosX = 0
                        End If

                        '[Note]:估算極限位置
                        Select Case dispParam.StageNo
                            Case enmStage.No1, enmStage.No3
                                '[Note]:取X最大值
                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.StartPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.StartPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX < (mPath(dispParam.StageNo).Arc2D.StartPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.StartPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                            Case enmStage.No2, enmStage.No4
                                '[Note]:取X最小值
                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.EndPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.StartPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.StartPosX - mArcExtendOffsetCutIn(dispParam.StageNo).PosX)
                                End If

                                If mLimitPos(dispParam.StageNo).PosX > (mPath(dispParam.StageNo).Arc2D.StartPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX) Then
                                    mLimitPos(dispParam.StageNo).PosX = (mPath(dispParam.StageNo).Arc2D.StartPosX + mArcExtendOffsetCutOut(dispParam.StageNo).PosX)
                                End If

                        End Select
                        If mLimitPos(dispParam.StageNo).PosY > mPath(dispParam.StageNo).Arc2D.EndPosY Then
                            mLimitPos(dispParam.StageNo).PosY = mPath(dispParam.StageNo).Arc2D.EndPosY
                        End If
                        If mLimitPos(dispParam.StageNo).PosY > mPath(dispParam.StageNo).Arc2D.StartPosY Then
                            mLimitPos(dispParam.StageNo).PosY = mPath(dispParam.StageNo).Arc2D.StartPosY
                        End If

                    Case eStepFunctionType.Move3D
                        mPath(dispParam.StageNo).PathType = ePathType.Dot3D
                        With dispParam.Pattern.Round(dispParam.RoundNo).CStep(mJ(dispParam.StageNo)).Move3D
                            '[Note]:終點座標轉換
                            mStandardPos(dispParam.StageNo).PosX = .EndPosX
                            mStandardPos(dispParam.StageNo).PosY = .EndPosY
                            Call TransformRotation(False, mTh(dispParam.StageNo), mCenterPos(dispParam.StageNo), mStandardPos(dispParam.StageNo), mTransformPos(dispParam.StageNo))
                            mPath(dispParam.StageNo).Dot3D.PosX = mTransformPos(dispParam.StageNo).PosX + mBasicPos(dispParam.StageNo).PosX + mNeedTh(dispParam.StageNo).PosX 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Dot3D.PosY = mTransformPos(dispParam.StageNo).PosY + mBasicPos(dispParam.StageNo).PosY + mNeedTh(dispParam.StageNo).PosY 'Soni / 2016.11.10 CCD對閥平移應在旋轉後執行
                            mPath(dispParam.StageNo).Dot3D.PosZ = .EndPosZ + mBasicPos(dispParam.StageNo).PosZ
                        End With
                        mPath(dispParam.StageNo).Dot3D.IsDispense = False
                        mPath(dispParam.StageNo).Dot3D.Velocity = 0
                        mPath(dispParam.StageNo).Dot3D.IsFristPathInDie = mIsFristPathInDie(dispParam.StageNo)
                        mPath(dispParam.StageNo).Dot3D.IsLastRowColumn = mIsLastRowColumn(dispParam.StageNo)
                        mPath(dispParam.StageNo).Dot3D.IsExtendOn = False
                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                        mDispPathRegister(dispParam.StageNo).Capacity = mDispPathRegister(dispParam.StageNo).Count + 1
                        mDispPathRegister(dispParam.StageNo).Add(mPath(dispParam.StageNo))
                        If mIsFristPathInDie(dispParam.StageNo) = True Then
                            mIsFristPathInDie(dispParam.StageNo) = False
                        End If

                        '[Note]:估算極限位置
                        Select Case dispParam.StageNo
                            Case enmStage.No1, enmStage.No3
                                '[Note]:取X最大值
                                If mLimitPos(dispParam.StageNo).PosX < mPath(dispParam.StageNo).Dot3D.PosX Then
                                    mLimitPos(dispParam.StageNo).PosX = mPath(dispParam.StageNo).Dot3D.PosX
                                End If
                            Case enmStage.No2, enmStage.No4
                                '[Note]:取X最小值
                                If mLimitPos(dispParam.StageNo).PosX > mPath(dispParam.StageNo).Dot3D.PosX Then
                                    mLimitPos(dispParam.StageNo).PosX = mPath(dispParam.StageNo).Dot3D.PosX
                                End If
                        End Select
                        If mLimitPos(dispParam.StageNo).PosY > mPath(dispParam.StageNo).Dot3D.PosY Then
                            mLimitPos(dispParam.StageNo).PosY = mPath(dispParam.StageNo).Dot3D.PosY
                        End If

                    Case Else
                        '[Note]:不處理

                End Select
            Next
        Next

        limitPos = mLimitPos(dispParam.StageNo)
        If isOnlyGetlimitPos = False Then
            dispPathRegister = mDispPathRegister(dispParam.StageNo)
        End If
        Return True

    End Function

    ''' <summary>[判斷點膠行徑路線之型態]</summary>
    ''' <param name="ValveNo"></param>
    ''' <param name="WalkPath"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function DetermineDispWalkPathModel(ByVal stageNo As enmStage, ByVal valveNo As eValveWorkMode, ByRef walkPath As eWalkPathType) As Boolean

        Select Case gSSystemParameter.StageParts.ValveData(stageNo).ValveType(valveNo)
            Case enmValveType.Jet
                walkPath = eWalkPathType.Jet

            Case enmValveType.Auger
                walkPath = eWalkPathType.Auger

            Case Else
                walkPath = eWalkPathType.Jet

        End Select
        Return True
    End Function

    ''' <summary>[取Dots Counts]</summary>
    ''' <param name="patternPath"></param>
    ''' <param name="counts"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GetDotCounts(ByVal patternPath As sPatternPath, ByVal dotWeight As Decimal, ByRef counts As Integer, Optional ByRef dotPitch As Decimal = 0) As Boolean

        Select Case patternPath.PathType
            Case ePathType.Arc2D
                dotPitch = patternPath.Arc2D.WeightControl.dotPitch
                Select Case patternPath.Arc2D.WeightControl.Type
                    Case eWeightControlType.Dots
                        counts = patternPath.Arc2D.WeightControl.DotCounts

                    Case eWeightControlType.Weight
                        counts = patternPath.Arc2D.WeightControl.Weight / dotWeight

                    Case eWeightControlType.Velocity
                        counts = patternPath.Arc2D.WeightControl.DotCounts

                End Select
                Return True

            Case ePathType.Line3D
                dotPitch = patternPath.Line3D.WeightControl.dotPitch
                Select Case patternPath.Line3D.WeightControl.Type
                    Case eWeightControlType.Dots
                        counts = patternPath.Line3D.WeightControl.DotCounts

                    Case eWeightControlType.Weight
                        counts = patternPath.Line3D.WeightControl.Weight / dotWeight

                    Case eWeightControlType.Velocity
                        counts = patternPath.Line3D.WeightControl.DotCounts

                End Select
                Return True

            Case ePathType.Arc3D
                dotPitch = patternPath.Arc3D.WeightControl.dotPitch
                Select Case patternPath.Arc3D.WeightControl.Type
                    Case eWeightControlType.Dots
                        counts = patternPath.Arc3D.WeightControl.DotCounts

                    Case eWeightControlType.Weight
                        counts = patternPath.Arc3D.WeightControl.Weight / dotWeight

                    Case eWeightControlType.Velocity
                        counts = patternPath.Arc3D.WeightControl.DotCounts

                End Select
                Return True

            Case ePathType.Dot3D
                dotPitch = patternPath.Dot3D.WeightControl.dotPitch
                '[Note]:目前Dot是強制切換成Velocity模式(也只有Dot會是Velocity模式)。
                Select Case patternPath.Dot3D.WeightControl.Type
                    Case eWeightControlType.Dots
                        counts = patternPath.Dot3D.WeightControl.DotCounts

                    Case eWeightControlType.Weight
                        counts = patternPath.Dot3D.WeightControl.Weight / dotWeight

                    Case eWeightControlType.Velocity
                        counts = patternPath.Dot3D.WeightControl.DotCounts

                End Select
                Return True

            Case ePathType.Wait
                Return False

        End Select
        Return False

    End Function

    ''' <summary>[判斷資料傳輸(由哪個傳到哪個)]</summary>
    ''' <param name="pathIndex"></param>
    ''' <param name="triggerDispPathRegister"></param>
    ''' <param name="lastPathIndex"></param>
    ''' <param name="isTransmissionResuming"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function EstimateTriggerStep(ByVal pathIndex As Integer, ByVal triggerDispPathRegister As List(Of sPatternPath), ByRef lastPathIndex As Integer, ByRef isTransmissionResuming As Boolean) As Boolean

        Const mMaxStepCounts As Integer = 100       '[資料傳輸之上限(第一筆資料)]
        Const mMaxTRStepCounts As Integer = 20      '[資料傳輸之上限(非第一筆資料)]

        If triggerDispPathRegister.Count > mMaxStepCounts Then
            If pathIndex = 0 Then
                '[Note]:1stPath
                lastPathIndex = mMaxStepCounts - 1
                isTransmissionResuming = False
            Else
                '[Note]:2st~Last Path
                If (pathIndex + mMaxTRStepCounts - 1) > triggerDispPathRegister.Count - 1 Then
                    lastPathIndex = triggerDispPathRegister.Count - 1
                Else
                    lastPathIndex = pathIndex + mMaxTRStepCounts - 1
                End If
                isTransmissionResuming = True
            End If
        Else
            lastPathIndex = triggerDispPathRegister.Count - 1
            isTransmissionResuming = False
        End If
        Return True


    End Function

    ''' <summary>[是否可以省略Trigger Cmd之傳送]</summary>
    ''' <param name="pathIndex"></param>
    ''' <param name="dispType"></param>
    ''' <param name="triggerDispPathRegister"></param>
    ''' <param name="dotWeight"></param>
    ''' <param name="isNeedSendCmd"></param>
    ''' <param name="triggerPathMenory"></param>
    ''' <param name="isOnPurge"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function IsPassTriggerCmd(ByVal pathIndex As Integer, ByVal dispType As enmTriggerDispType, ByVal triggerDispPathRegister As List(Of sPatternPath), ByVal dotWeight As Decimal, ByVal isNeedSendCmd As Boolean, ByRef triggerPathMenory As sPatternPath, ByRef isOnPurge As Boolean) As Boolean

        Dim mPatternPath As sPatternPath
        Dim mDotCounts As Integer                       '[打點顆數]

        '[Note]:強制要求重下命令，針對若走Fly CCD，則第一次不能省略Trigger cmd之傳送
        If isNeedSendCmd = True Then
            triggerPathMenory = Nothing
            '[Note]:清除記錄的唯一地方
            isOnPurge = False
            Return False
        End If

        '[Note]:若之前有做過Purge，則不能省略Trigger cmd之傳送
        If isOnPurge = True Then
            triggerPathMenory = Nothing
            '[Note]:清除記錄的唯一地方
            isOnPurge = False
            Return False
        End If

        '[Note]:單Dot之條件，TriggerPath只能一條且為Dot且Dot數為1
        If pathIndex <> 0 Then
            triggerPathMenory = Nothing
            '[Note]:清除記錄的唯一地方
            isOnPurge = False
            Return False
        End If
        If triggerDispPathRegister.Count <> 1 Then
            triggerPathMenory = Nothing
            '[Note]:清除記錄的唯一地方
            isOnPurge = False
            Return False
        End If

        mDotCounts = 0
        mPatternPath = triggerDispPathRegister.Item(0)
        Select Case dispType
            Case enmTriggerDispType.JetRecipe
                '[Note]:塞給TriggerBoard只有Arc、Dot、Line
                If GetDotCounts(mPatternPath, dotWeight, mDotCounts) = False Then
                    triggerPathMenory = Nothing
                    '[Note]:清除記錄的唯一地方
                    isOnPurge = False
                    Return False
                End If
                If mDotCounts <> 1 Then
                    triggerPathMenory = Nothing
                    '[Note]:清除記錄的唯一地方
                    isOnPurge = False
                    Return False
                End If

                Select Case mPatternPath.PathType
                    Case ePathType.Dot3D
                        If mPatternPath.Dot3D.ExtendOffsetX = 0 And mPatternPath.Dot3D.ExtendOffsetY = 0 Then
                            If IsNothing(triggerPathMenory) = True Then
                                triggerPathMenory.PathType = ePathType.Dot3D
                                triggerPathMenory.Dot3D.ExtendOffsetX = mPatternPath.Dot3D.ExtendOffsetX
                                triggerPathMenory.Dot3D.ExtendOffsetY = mPatternPath.Dot3D.ExtendOffsetY
                                triggerPathMenory.Dot3D.IsDispense = mPatternPath.Dot3D.IsDispense
                                '[Note]:清除記錄的唯一地方
                                isOnPurge = False
                                Return False
                            Else
                                If triggerPathMenory.PathType = ePathType.Dot3D And triggerPathMenory.Dot3D.IsDispense = True Then
                                    If triggerPathMenory.Dot3D.ExtendOffsetX = 0 And triggerPathMenory.Dot3D.ExtendOffsetY = 0 Then
                                        Return True
                                    Else
                                        triggerPathMenory.PathType = ePathType.Dot3D
                                        triggerPathMenory.Dot3D.ExtendOffsetX = mPatternPath.Dot3D.ExtendOffsetX
                                        triggerPathMenory.Dot3D.ExtendOffsetY = mPatternPath.Dot3D.ExtendOffsetY
                                        triggerPathMenory.Dot3D.IsDispense = mPatternPath.Dot3D.IsDispense
                                        '[Note]:清除記錄的唯一地方
                                        isOnPurge = False
                                        Return False
                                    End If
                                Else
                                    triggerPathMenory.PathType = ePathType.Dot3D
                                    triggerPathMenory.Dot3D.ExtendOffsetX = mPatternPath.Dot3D.ExtendOffsetX
                                    triggerPathMenory.Dot3D.ExtendOffsetY = mPatternPath.Dot3D.ExtendOffsetY
                                    triggerPathMenory.Dot3D.IsDispense = mPatternPath.Dot3D.IsDispense
                                    '[Note]:清除記錄的唯一地方
                                    isOnPurge = False
                                    Return False
                                End If
                            End If
                        Else
                            triggerPathMenory = Nothing
                            '[Note]:清除記錄的唯一地方
                            isOnPurge = False
                            Return False
                        End If

                    Case Else
                        triggerPathMenory = Nothing
                        '[Note]:清除記錄的唯一地方
                        isOnPurge = False
                        Return False

                End Select

            Case Else
                triggerPathMenory = Nothing
                '[Note]:清除記錄的唯一地方
                isOnPurge = False
                Return False

        End Select
        Return True

    End Function

    ''' <summary>[估算打點數(此次路徑移動)]</summary>
    ''' <param name="pathIndex"></param>
    ''' <param name="dispType"></param>
    ''' <param name="triggerDispPathRegister"></param>
    ''' <param name="dotWeight"></param>
    ''' <param name="parameter"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function EstimateDispensingDotsCounts(ByVal acc As Decimal, ByVal pathIndex As Integer, ByVal dispType As enmTriggerDispType, ByVal triggerDispPathRegister As List(Of sPatternPath), ByVal dotWeight As Decimal, ByRef parameter As sTriggerFCmdParam) As Boolean

        Dim mI As Integer
        Dim mPatternPath As sPatternPath
        Dim mDotCounts As Integer                       '[打點顆數]
        Dim mTotalDotCounts As Integer                  '[統計打點總數]
        Dim mTriggerFCmdParam As sTriggerFCmdParam      '[助跑資訊]
        Dim mLastPos As Premtek.sPos
        Dim mTolerance As Decimal
        Dim mLastPath As sPatternPath

        Const mToleranceScale As Decimal = 0.7

        '[Note]:Only First Cmd--> Uesed in F Command

        parameter.ApproachPosX = 0
        parameter.ApproachPosY = 0
        parameter.TotalDotCounts = 0

        If pathIndex <> 0 Then
            Return False
        End If
        If triggerDispPathRegister.Count = 0 Then '無資料
            Return False
        End If
        mDotCounts = 0

        Select Case triggerDispPathRegister.Item(pathIndex).PathType
            Case ePathType.Arc2D
                mTolerance = triggerDispPathRegister.Item(pathIndex).Arc2D.WeightControl.dotPitch * mToleranceScale

            Case ePathType.Arc3D
                mTolerance = triggerDispPathRegister.Item(pathIndex).Arc3D.WeightControl.dotPitch * mToleranceScale

            Case ePathType.Dot3D
                mTolerance = triggerDispPathRegister.Item(pathIndex).Dot3D.WeightControl.dotPitch * mToleranceScale

            Case ePathType.Line3D
                mTolerance = triggerDispPathRegister.Item(pathIndex).Line3D.WeightControl.dotPitch * mToleranceScale

        End Select


        For mI = pathIndex To triggerDispPathRegister.Count - 1
            mPatternPath = triggerDispPathRegister.Item(mI)

            Select Case dispType
                Case enmTriggerDispType.JetParamRecipe

                Case enmTriggerDispType.NeedleJetParamRecipe

                Case enmTriggerDispType.AugerParamRecipe


                Case enmTriggerDispType.JetRecipe
                    '[Note]:塞給TriggerBoard只有Arc、Dot、Line
                    If GetDotCounts(mPatternPath, dotWeight, mDotCounts) = False Then
                        Return False
                    End If
                    Select Case mPatternPath.PathType
                        Case ePathType.Arc2D
                            If Math.Abs(mLastPos.PosX - mPatternPath.Arc2D.StartPosX) < mTolerance And Math.Abs(mLastPos.PosY - mPatternPath.Arc2D.StartPosY) < mTolerance Then
                                Select Case mLastPath.PathType
                                    Case ePathType.Arc2D
                                        If mLastPath.Arc2D.StartPosX = mLastPath.Arc2D.EndPosX And mLastPath.Arc2D.StartPosY = mLastPath.Arc2D.EndPosY Then
                                            mTotalDotCounts = mTotalDotCounts + mDotCounts
                                        Else
                                            mTotalDotCounts = mTotalDotCounts + mDotCounts - 1
                                        End If

                                    Case ePathType.Arc3D
                                        If mLastPath.Arc3D.StartPosX = mLastPath.Arc3D.EndPosX And mLastPath.Arc3D.StartPosY = mLastPath.Arc3D.EndPosY Then
                                            mTotalDotCounts = mTotalDotCounts + mDotCounts
                                        Else
                                            mTotalDotCounts = mTotalDotCounts + mDotCounts - 1
                                        End If

                                    Case Else
                                        mTotalDotCounts = mTotalDotCounts + mDotCounts - 1

                                End Select
                            Else
                                mTotalDotCounts = mTotalDotCounts + mDotCounts
                            End If
                            If mI = 0 Then
                                With mTriggerFCmdParam
                                    .ApproachPosX = (mPatternPath.Arc2D.StartPosX - mPatternPath.Arc2D.ExtendOffsetX)
                                    .ApproachPosY = (mPatternPath.Arc2D.StartPosY - mPatternPath.Arc2D.ExtendOffsetY)
                                End With
                            End If
                            mLastPos.PosX = mPatternPath.Arc2D.EndPosX
                            mLastPos.PosY = mPatternPath.Arc2D.EndPosY
                            mLastPath = mPatternPath
                            mTolerance = mPatternPath.Arc2D.WeightControl.dotPitch * mToleranceScale

                        Case ePathType.Arc3D
                            If Math.Abs(mLastPos.PosX - mPatternPath.Arc3D.StartPosX) < mTolerance And Math.Abs(mLastPos.PosY - mPatternPath.Arc3D.StartPosY) < mTolerance Then
                                Select Case mLastPath.PathType
                                    Case ePathType.Arc2D
                                        If mLastPath.Arc2D.StartPosX = mLastPath.Arc2D.EndPosX And mLastPath.Arc2D.StartPosY = mLastPath.Arc2D.EndPosY Then
                                            mTotalDotCounts = mTotalDotCounts + mDotCounts
                                        Else
                                            mTotalDotCounts = mTotalDotCounts + mDotCounts - 1
                                        End If

                                    Case ePathType.Arc3D
                                        If mLastPath.Arc3D.StartPosX = mLastPath.Arc3D.EndPosX And mLastPath.Arc3D.StartPosY = mLastPath.Arc3D.EndPosY Then
                                            mTotalDotCounts = mTotalDotCounts + mDotCounts
                                        Else
                                            mTotalDotCounts = mTotalDotCounts + mDotCounts - 1
                                        End If

                                    Case Else
                                        mTotalDotCounts = mTotalDotCounts + mDotCounts - 1

                                End Select
                            Else
                                mTotalDotCounts = mTotalDotCounts + mDotCounts
                            End If
                            If mI = 0 Then
                                With mTriggerFCmdParam
                                    .ApproachPosX = (mPatternPath.Arc3D.StartPosX - mPatternPath.Arc3D.ExtendOffsetX)
                                    .ApproachPosY = (mPatternPath.Arc3D.StartPosY - mPatternPath.Arc3D.ExtendOffsetY)
                                End With
                            End If
                            mLastPos.PosX = mPatternPath.Arc3D.EndPosX
                            mLastPos.PosY = mPatternPath.Arc3D.EndPosY
                            mLastPath = mPatternPath
                            mTolerance = mPatternPath.Arc3D.WeightControl.dotPitch * mToleranceScale

                        Case ePathType.Dot3D
                            If Math.Abs(mLastPos.PosX - mPatternPath.Dot3D.PosX) < mTolerance And Math.Abs(mLastPos.PosY - mPatternPath.Dot3D.PosY) < mTolerance Then
                                Select Case mLastPath.PathType
                                    Case ePathType.Arc2D
                                        If mLastPath.Arc2D.StartPosX = mLastPath.Arc2D.EndPosX And mLastPath.Arc2D.StartPosY = mLastPath.Arc2D.EndPosY Then
                                            mTotalDotCounts = mTotalDotCounts + mDotCounts
                                        Else
                                            mTotalDotCounts = mTotalDotCounts + mDotCounts - 1
                                        End If

                                    Case ePathType.Arc3D
                                        If mLastPath.Arc3D.StartPosX = mLastPath.Arc3D.EndPosX And mLastPath.Arc3D.StartPosY = mLastPath.Arc3D.EndPosY Then
                                            mTotalDotCounts = mTotalDotCounts + mDotCounts
                                        Else
                                            mTotalDotCounts = mTotalDotCounts + mDotCounts - 1
                                        End If

                                    Case Else
                                        mTotalDotCounts = mTotalDotCounts + mDotCounts - 1

                                End Select
                            Else
                                mTotalDotCounts = mTotalDotCounts + mDotCounts
                            End If
                            If mI = 0 Then
                                With mTriggerFCmdParam
                                    .ApproachPosX = (mPatternPath.Dot3D.PosX - mPatternPath.Dot3D.ExtendOffsetX)
                                    .ApproachPosY = (mPatternPath.Dot3D.PosY - mPatternPath.Dot3D.ExtendOffsetY)
                                End With
                            End If
                            mLastPos.PosX = mPatternPath.Dot3D.PosX
                            mLastPos.PosY = mPatternPath.Dot3D.PosY
                            mLastPath = mPatternPath
                            mTolerance = mPatternPath.Dot3D.WeightControl.dotPitch * mToleranceScale

                        Case ePathType.Line3D
                            If Math.Abs(mLastPos.PosX - mPatternPath.Line3D.StartPosX) < mTolerance And Math.Abs(mLastPos.PosY - mPatternPath.Line3D.StartPosY) < mTolerance Then
                                Select Case mLastPath.PathType
                                    Case ePathType.Arc2D
                                        If mLastPath.Arc2D.StartPosX = mLastPath.Arc2D.EndPosX And mLastPath.Arc2D.StartPosY = mLastPath.Arc2D.EndPosY Then
                                            mTotalDotCounts = mTotalDotCounts + mDotCounts
                                        Else
                                            mTotalDotCounts = mTotalDotCounts + mDotCounts - 1
                                        End If

                                    Case ePathType.Arc3D
                                        If mLastPath.Arc3D.StartPosX = mLastPath.Arc3D.EndPosX And mLastPath.Arc3D.StartPosY = mLastPath.Arc3D.EndPosY Then
                                            mTotalDotCounts = mTotalDotCounts + mDotCounts
                                        Else
                                            mTotalDotCounts = mTotalDotCounts + mDotCounts - 1
                                        End If

                                    Case Else
                                        mTotalDotCounts = mTotalDotCounts + mDotCounts - 1

                                End Select
                            Else
                                mTotalDotCounts = mTotalDotCounts + mDotCounts
                            End If
                            If mI = 0 Then
                                With mTriggerFCmdParam
                                    .ApproachPosX = (mPatternPath.Line3D.StartPosX - mPatternPath.Line3D.ExtendOffsetX)
                                    .ApproachPosY = (mPatternPath.Line3D.StartPosY - mPatternPath.Line3D.ExtendOffsetY)
                                End With
                            End If
                            mLastPos.PosX = mPatternPath.Line3D.EndPosX
                            mLastPos.PosY = mPatternPath.Line3D.EndPosY
                            mLastPath = mPatternPath
                            mTolerance = mPatternPath.Line3D.WeightControl.dotPitch * mToleranceScale

                    End Select
            End Select
        Next
        mTriggerFCmdParam.TotalDotCounts = mTotalDotCounts
        parameter = mTriggerFCmdParam
        Return True
    End Function


    ''' <summary>[Trigger Command串接(F Command)]</summary>
    ''' <param name="stageNo"></param>
    ''' <param name="acc"></param>
    ''' <param name="isTransmissionResuming">是否為續傳的資料</param>
    ''' <param name="pathIndex"></param>
    ''' <param name="lastPathIndex"></param>
    ''' <param name="dispType"></param>
    ''' <param name="triggerDispPathRegister"></param>
    ''' <param name="dotWeight"></param>
    ''' <param name="cycleTime"></param>
    ''' <param name="totalDotCounts"></param>
    '''<param name="mulitDotsDispensingTime"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function EditTriggerPathByFCmd(ByVal stageNo As enmStage, ByVal acc As Decimal, ByVal dec As Decimal, ByVal maxVelocity As Decimal, ByVal isTransmissionResuming As Boolean, ByVal pathIndex As Integer, ByVal lastPathIndex As Integer, ByVal dispType As enmTriggerDispType, ByVal triggerDispPathRegister As List(Of sPatternPath), ByVal dotWeight As Decimal, ByVal cycleTime As Decimal, Optional ByRef totalDotCounts As Integer = 0, Optional ByRef mulitDotsDispensingTime As Decimal = 0) As Boolean

        Dim mI As Integer
        Dim mIs1stPath As Boolean                       '[判斷是否為第一筆資料]
        Dim mIsLastPath As Boolean                      '[判斷是否為最後一筆資料]
        Dim mPatternPath As sPatternPath
        Dim mCmdStep As sTriggerFCmdStep
        Dim mDotCounts As Integer                       '[打點顆數]
        Dim mTriggerFCmdParam As sTriggerFCmdParam      '[助跑資訊]
        Dim mLastCmdStep As sTriggerFCmdStep            '[上一筆資料]
        Dim mLastPos As Premtek.sPos
        Dim mDistance As Decimal
        Dim mdx As Decimal
        Dim mdy As Decimal

        If EstimateDispensingDotsCounts(acc, pathIndex, dispType, triggerDispPathRegister, dotWeight, mTriggerFCmdParam) = True Then
            totalDotCounts = mTriggerFCmdParam.TotalDotCounts
        End If

        '[Note]:保護不做在這一層(在資料串接時就要做到Valve之檢查)
        '       這邊只決定使用哪種類型串接& Command之串接

        If lastPathIndex > triggerDispPathRegister.Count - 1 Then
            '[Note]:基本上不可能發生，若發生則為前段估算錯誤
            lastPathIndex = triggerDispPathRegister.Count - 1
        End If

        For mI = pathIndex To lastPathIndex
            mPatternPath = triggerDispPathRegister.Item(mI)

            Select Case dispType
                Case enmTriggerDispType.JetParamRecipe

                Case enmTriggerDispType.NeedleJetParamRecipe

                Case enmTriggerDispType.AugerParamRecipe

                Case enmTriggerDispType.JetRecipe
                    '[Note]:塞給TriggerBoard只有Arc、Dot、Line
                    If GetDotCounts(mPatternPath, dotWeight, mDotCounts) = False Then
                        Return False
                    End If
                    Select Case mPatternPath.PathType
                        Case ePathType.Arc2D
                            With mCmdStep
                                .Path = eTriggerBoardPathType.Arc
                                .Dir = mPatternPath.Arc2D.ArcDirection
                                .Velocity = mPatternPath.Arc2D.Velocity
                                .DotCounts = mDotCounts
                                .StartPosX = mPatternPath.Arc2D.StartPosX
                                .StartPosY = mPatternPath.Arc2D.StartPosY
                                .EndPosX = mPatternPath.Arc2D.EndPosX
                                .EndPosY = mPatternPath.Arc2D.EndPosY
                                .CenPosX = mPatternPath.Arc2D.CenterPosX
                                .CenPosY = mPatternPath.Arc2D.CenterPosY
                            End With

                            '[Note]:只有第一筆是沒有資料的，且第一筆不需要算與前一筆的Delay時間
                            If mI = 0 Then
                                mCmdStep.PathWaitTime = 0
                            Else
                                mdx = mLastPos.PosX - mCmdStep.StartPosX
                                mdy = mLastPos.PosY - mCmdStep.StartPosY
                                mDistance = Math.Sqrt((mdx * mdx) + (mdy * mdy))
                                mCmdStep.PathWaitTime = Math.Sqrt(2 * mDistance / acc)
                            End If
                            mLastPos.PosX = mCmdStep.EndPosX
                            mLastPos.PosY = mCmdStep.EndPosY

                        Case ePathType.Arc3D
                            With mCmdStep
                                .Path = eTriggerBoardPathType.Arc
                                .Dir = mPatternPath.Arc3D.ArcDirection
                                .Velocity = mPatternPath.Arc3D.Velocity
                                .DotCounts = mDotCounts
                                .StartPosX = mPatternPath.Arc3D.StartPosX
                                .StartPosY = mPatternPath.Arc3D.StartPosY
                                .EndPosX = mPatternPath.Arc3D.EndPosX
                                .EndPosY = mPatternPath.Arc3D.EndPosY
                                .CenPosX = mPatternPath.Arc3D.CenterPosX
                                .CenPosY = mPatternPath.Arc3D.CenterPosY
                            End With
                            '[Note]:只有第一筆是沒有資料的，且第一筆不需要算與前一筆的Delay時間
                            If mI = 0 Then
                                mCmdStep.PathWaitTime = 0
                            Else
                                mdx = mLastPos.PosX - mCmdStep.StartPosX
                                mdy = mLastPos.PosY - mCmdStep.StartPosY
                                mDistance = Math.Sqrt((mdx * mdx) + (mdy * mdy))
                                mCmdStep.PathWaitTime = Math.Sqrt(2 * mDistance / acc)
                            End If
                            mLastPos.PosX = mCmdStep.EndPosX
                            mLastPos.PosY = mCmdStep.EndPosY

                        Case ePathType.Dot3D
                            With mCmdStep
                                .Path = eTriggerBoardPathType.Dot
                                .Dir = eArcDir.CW
                                .Velocity = mPatternPath.Dot3D.Velocity
                                .DotCounts = mDotCounts
                                .StartPosX = mPatternPath.Dot3D.PosX
                                .StartPosY = mPatternPath.Dot3D.PosY
                                .EndPosX = 0
                                .EndPosY = 0
                                .CenPosX = 0
                                .CenPosY = 0
                            End With
                            '[Note]:只有第一筆是沒有資料的，且第一筆不需要算與前一筆的Delay時間
                            If mI = 0 Then
                                mCmdStep.PathWaitTime = 0
                            Else
                                mdx = mLastPos.PosX - mCmdStep.StartPosX
                                mdy = mLastPos.PosY - mCmdStep.StartPosY
                                mDistance = Math.Sqrt((mdx * mdx) + (mdy * mdy))
                                mCmdStep.PathWaitTime = Math.Sqrt(2 * mDistance / acc)
                            End If
                            mLastPos.PosX = mCmdStep.StartPosX
                            mLastPos.PosY = mCmdStep.StartPosY
                            '[Note]:目前定義只要是Dot的指令，就是強制作分隔，所以可以直接這樣用
                            '       單位ms
                            mulitDotsDispensingTime = mDotCounts * cycleTime

                        Case ePathType.Line3D
                            With mCmdStep
                                .Path = eTriggerBoardPathType.Line
                                .Dir = eArcDir.CW
                                .Velocity = mPatternPath.Line3D.Velocity
                                .DotCounts = mDotCounts
                                .StartPosX = mPatternPath.Line3D.StartPosX
                                .StartPosY = mPatternPath.Line3D.StartPosY
                                .EndPosX = mPatternPath.Line3D.EndPosX
                                .EndPosY = mPatternPath.Line3D.EndPosY
                                .CenPosX = 0
                                .CenPosY = 0
                            End With
                            '[Note]:只有第一筆是沒有資料的，且第一筆不需要算與前一筆的Delay時間
                            If mI = 0 Then
                                mCmdStep.PathWaitTime = 0
                            Else
                                mdx = mLastPos.PosX - mCmdStep.StartPosX
                                mdy = mLastPos.PosY - mCmdStep.StartPosY
                                mDistance = Math.Sqrt((mdx * mdx) + (mdy * mdy))
                                mCmdStep.PathWaitTime = Math.Sqrt(2 * mDistance / acc)
                            End If
                            mLastPos.PosX = mCmdStep.EndPosX
                            mLastPos.PosY = mCmdStep.EndPosY

                    End Select

                    If mI = pathIndex Then
                        mIs1stPath = True
                    Else
                        mIs1stPath = False
                    End If
                    If mI = lastPathIndex Then
                        mIsLastPath = True
                    Else
                        mIsLastPath = False
                    End If

                    If mI = 0 Then
                        '[Note]:第一筆資料絕對不可能是續傳
                        Call gTriggerBoard.AddJetRecipe(stageNo, mIs1stPath, mCmdStep, mIsLastPath, mTriggerFCmdParam)
                    Else
                        If isTransmissionResuming = True Then
                            Call gTriggerBoard.AddJetRecipeUseTransmissionResuming(stageNo, mIs1stPath, mCmdStep, mIsLastPath)
                        Else
                            Call gTriggerBoard.AddJetRecipe(stageNo, mIs1stPath, mCmdStep, mIsLastPath)
                        End If
                    End If

            End Select
            mLastCmdStep = mCmdStep
        Next

        Return True
    End Function

    ''' <summary>[判斷要由哪個Step做到哪個Step]</summary>
    ''' <param name="pattern"></param>
    ''' <param name="doneIndex"></param>
    ''' <param name="startIndex"></param>
    ''' <param name="endIndex"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function EstimateStep(ByVal pattern As CRecipePattern, ByVal roundNo As Integer, ByVal doneIndex As Integer, ByRef startIndex As Integer, ByRef endIndex As Integer) As Boolean

        Dim mI As Integer

        '[Note]:此為單顆判斷，在Step一定有ContiEnd ，但可能不在最後
        '       Dot都是停在原地打點的
        startIndex = doneIndex + 1
        For mI = doneIndex + 1 To pattern.Round(roundNo).StepCount - 1
            Select Case pattern.Round(roundNo).CStep(mI).StepType
                Case eStepFunctionType.ContiEnd
                    endIndex = mI
                    Return True

                Case eStepFunctionType.Dots3D
                    If mI + 1 <= pattern.Round(roundNo).StepCount - 1 Then
                        '[Note]:增加判斷Dot後面是否就是接ContiEnd的Cmd，目的是不要再進來跑一次迴圈了，因為路徑都跑完了，只是剩下輔助用的cmd
                        If pattern.Round(roundNo).CStep(mI + 1).StepType = eStepFunctionType.ContiEnd Then
                            endIndex = mI + 1
                            Return True
                        Else
                            endIndex = mI
                            Return True
                        End If
                    End If

                Case eStepFunctionType.Arc2D, eStepFunctionType.Arc3D, eStepFunctionType.Circle2D, eStepFunctionType.Circle3D, eStepFunctionType.Line3D, eStepFunctionType.Move3D
                    '[Note]:若下一個Step是Dot那就中斷掉，Dot是不做串接的。
                    If mI + 1 <= pattern.Round(roundNo).StepCount - 1 Then
                        '[Note]:增加判斷Dot後面是否就是接ContiEnd的Cmd，目的是不要再進來跑一次迴圈了，因為路徑都跑完了，只是剩下輔助用的cmd
                        If pattern.Round(roundNo).CStep(mI + 1).StepType = eStepFunctionType.Dots3D Then
                            endIndex = mI
                            Return True
                        End If
                    End If

            End Select
        Next
        '[Note]:此為單顆判斷，在Step一定有ContiEnd ，但可能不在最後
        endIndex = pattern.Round(roundNo).StepCount - 1
        Return True

    End Function

    ''' <summary>[估算Blending Time]</summary>
    ''' <param name="inBlendTime">[單位:s]</param>
    ''' <param name="outBlendingTime">[單位:ms]</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function EstimateBlendingTime(ByVal inBlendTime As Decimal, ByRef outBlendingTime As Integer) As Boolean

        Dim mBlendingTime As Integer
        Dim mValue As Integer

        '[Note]:轉換成軸卡接受的資料
        mBlendingTime = CInt(inBlendTime * 1000)
        mValue = mBlendingTime Mod 2
        If mValue = 0 Then
            outBlendingTime = mBlendingTime
        Else
            outBlendingTime = mBlendingTime + 1
        End If
        outBlendingTime = mBlendingTime * 2
        Return True

    End Function


    ''' <summary>[估算跨元件的速度(給座標)]</summary>
    ''' <param name="velHigh">速度上限 mm/s</param>
    ''' <param name="acc">加速度 mm/s^2</param>
    ''' <param name="dec">減速度 mm/s^2</param>
    ''' <param name="lastPos"></param>
    ''' <param name="nowPos"></param>
    ''' <param name="blendingTime"></param>
    ''' <param name="lastPathVelocity"></param>
    ''' <param name="nowPathVelocity"></param>
    ''' <param name="velocity"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function EstimateCrossVelocity(ByVal velHigh As Decimal, ByVal acc As Decimal, ByVal dec As Decimal, ByVal lastPos As Premtek.sPos, ByVal nowPos As Premtek.sPos, ByVal blendingTime As Decimal, ByVal lastPathVelocity As Decimal, ByVal nowPathVelocity As Decimal, ByRef velocity As Decimal) As Boolean

        Dim mVelocity As Decimal
        Dim mMinVelocity As Decimal
        Dim mdx As Decimal
        Dim mdy As Decimal
        Dim mdr As Decimal
        Dim mVelocityDistanceL As Decimal
        Dim mVelocityDistanceN As Decimal
        mMinVelocity = 99999

        '[Note]:單位: mm/s
        'blendingTime  ms-->s
        '[Note]:V=V0+0.5*att
        mVelocity = lastPathVelocity + (0.001 * blendingTime * acc)
        If mMinVelocity > mVelocity Then
            mMinVelocity = mVelocity
        End If
        mVelocity = nowPathVelocity + (0.001 * blendingTime * acc)
        If mMinVelocity > mVelocity Then
            mMinVelocity = mVelocity
        End If

        '[Note]:由距離來算最大速(不可能為非線段，若是非線段-->有鬼)
        mdx = nowPos.PosX - lastPos.PosX
        mdy = nowPos.PosY - lastPos.PosY
        mdr = Sqrt(mdx * mdx + mdy * mdy)

        '[Note]:距離只能取一半，速度上去還要再下來
        '[Note]:V^2=V0^2+2ax
        mVelocityDistanceL = Sqrt(lastPathVelocity * lastPathVelocity + acc * mdr)
        If mMinVelocity > mVelocityDistanceL Then
            mMinVelocity = mVelocityDistanceL
        End If
        mVelocityDistanceN = Sqrt(nowPathVelocity * nowPathVelocity + acc * mdr)
        If mMinVelocity > mVelocityDistanceN Then
            mMinVelocity = mVelocityDistanceN
        End If

        Call EstimateMaxVel(velHigh, acc, dec, mdr, mMinVelocity, velocity)

        Return True
    End Function

    ''' <summary>[估算跨元件的速度(給距離)]</summary>
    ''' <param name="distance"></param>
    ''' <param name="blendingTime"></param>
    ''' <param name="lastPathVelocity"></param>
    ''' <param name="nowPathVelocity"></param>
    ''' <param name="velocity"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function EstimateCrossVelocity(ByVal velHigh As Decimal, ByVal acc As Decimal, ByVal dec As Decimal, ByVal distance As Decimal, ByVal blendingTime As Decimal, ByVal lastPathVelocity As Decimal, ByVal nowPathVelocity As Decimal, ByRef velocity As Decimal) As Boolean

        Dim mVelocity As Decimal
        Dim mMinVelocity As Decimal
        Dim mVelocityDistanceL As Decimal
        Dim mVelocityDistanceN As Decimal

        mMinVelocity = 99999

        '[Note]:單位: mm/s
        'blendingTime  ms-->s
        '[Note]:V=V0+0.5*att
        mVelocity = lastPathVelocity + (0.001 * blendingTime * acc)
        If mMinVelocity > mVelocity Then
            mMinVelocity = mVelocity
        End If
        mVelocity = nowPathVelocity + (0.001 * blendingTime * acc)
        If mMinVelocity > mVelocity Then
            mMinVelocity = mVelocity
        End If

        '[Note]:距離只能取一半，速度上去還要再下來
        '[Note]:V^2=V0^2+2ax
        mVelocityDistanceL = Sqrt(lastPathVelocity * lastPathVelocity + acc * distance)
        If mMinVelocity > mVelocityDistanceL Then
            mMinVelocity = mVelocityDistanceL
        End If
        mVelocityDistanceN = Sqrt(nowPathVelocity * nowPathVelocity + acc * distance)
        If mMinVelocity > mVelocityDistanceN Then
            mMinVelocity = mVelocityDistanceN
        End If

        Call EstimateMaxVel(velHigh, acc, dec, distance, mMinVelocity, velocity)

        Return True
    End Function

    ''' <summary>[取出速度、座標資訊]</summary>
    ''' <param name="motionPath"></param>
    ''' <param name="velocity"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GetPathVelocity(ByVal motionPath As sPatternPath, ByRef velocity As Decimal, ByRef pos As Premtek.sPos) As Boolean
        Dim mVelocity As Decimal
        Dim mPos As Premtek.sPos
        mVelocity = 0
        Select Case motionPath.PathType
            Case ePathType.Arc2D
                mVelocity = motionPath.Arc2D.Velocity
                mPos.PosX = motionPath.Arc2D.EndPosX
                mPos.PosY = motionPath.Arc2D.EndPosY

            Case ePathType.Arc3D
                mVelocity = motionPath.Arc3D.Velocity
                mPos.PosX = motionPath.Arc3D.EndPosX
                mPos.PosY = motionPath.Arc3D.EndPosY

            Case ePathType.Dot3D
                mVelocity = motionPath.Dot3D.Velocity
                mPos.PosX = motionPath.Dot3D.PosX
                mPos.PosY = motionPath.Dot3D.PosY

            Case ePathType.Line3D
                mVelocity = motionPath.Line3D.Velocity
                mPos.PosX = motionPath.Line3D.EndPosX
                mPos.PosY = motionPath.Line3D.EndPosY
        End Select

        velocity = mVelocity
        pos = mPos
        Return True
    End Function

    ''' <summary>[路徑數量保護]</summary>
    ''' <param name="velHigh">速度上限 mm/s</param>
    ''' <param name="acc">加速度 mm/s^2</param>
    ''' <param name="dec">減速度 mm/s^2</param>
    ''' <param name="maxBlendTime"></param>
    ''' <param name="motionDispPathList"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function PathCheck(ByVal velHigh As Decimal, ByVal acc As Decimal, ByVal dec As Decimal, ByVal maxBlendTime As Decimal, ByRef motionDispPathList As List(Of sMotionPathRegister)) As Boolean

        Dim mI As Integer
        Dim mBlendingTime As Integer
        Dim mlastPath As New sMotionPathRegister
        Dim mAddPath As New sMotionPathRegister
        Dim mOptimalVelocity As Decimal

        Const mm As Decimal = 0.001

        If motionDispPathList.Count >= ProjectMotion.PathCountLimit Then
            Return True
        End If

        '[Note]:除了單Dot外其餘路徑數量都會大於等於1，若是單Dot，就不做處理
        If motionDispPathList.Count = 0 Then
            Return True
        End If

        Call EstimateBlendingTime(maxBlendTime, mBlendingTime)

        '[Note]:如果都是Wait的路徑，會GG，以後再想怎麼處理都是Wait的路徑
        For mI = 0 To motionDispPathList.Count - 1
            Select Case motionDispPathList.Item(mI).PathType
                Case ePathRegisterType.Arc2D
                    mlastPath = motionDispPathList.Item(mI)

                Case ePathRegisterType.Dot3D
                    mlastPath = motionDispPathList.Item(mI)

                Case ePathRegisterType.Wait

            End Select
        Next

        '[Note]:取最後一個座標作為擴充的基準
        With mAddPath
            .PathType = ePathRegisterType.Dot3D
            Select Case mlastPath.PathType
                Case ePathRegisterType.Arc2D
                    .Dot3D.PosX = Math.Round(mlastPath.Arc2D.EndPosX, 3)
                    .Dot3D.PosY = Math.Round(mlastPath.Arc2D.EndPosY, 3)
                    .Dot3D.PosZ = Math.Round(mlastPath.Arc2D.EndPosZ, 3)
                    .Dot3D.Velocity = mlastPath.Arc2D.Velocity

                Case ePathRegisterType.Dot3D
                    .Dot3D.PosX = Math.Round(mlastPath.Dot3D.PosX, 3)
                    .Dot3D.PosY = Math.Round(mlastPath.Dot3D.PosY, 3)
                    .Dot3D.PosZ = Math.Round(mlastPath.Dot3D.PosZ, 3)
                    .Dot3D.Velocity = mlastPath.Dot3D.Velocity

            End Select
        End With

        '[Note]:進到這一段，Path的數量一定是大於PathCountLimit，但還是寫一下防呆好了
        If motionDispPathList.Count < ProjectMotion.PathCountLimit Then
            For mI = 1 To ProjectMotion.PathCountLimit
                With mAddPath.Dot3D
                    .PosZ = .PosZ + mm
                End With
                'Call EstimateCrossVelocity(velHigh, acc, dec, mm, mBlendingTime, mAddPath.Dot3D.Velocity, mAddPath.Dot3D.Velocity, mOptimalVelocity)
                Premtek.CDispensingMath.GetCrossVelocity(velHigh, acc, dec, mm, 0, mOptimalVelocity) 'Soni + 2017.08.14 Z方向速度推算.
                mAddPath.Dot3D.Velocity = Math.Round(mOptimalVelocity, 3)

                motionDispPathList.Capacity = motionDispPathList.Count + 1
                motionDispPathList.Add(mAddPath)
                If motionDispPathList.Count >= ProjectMotion.PathCountLimit Then
                    Return True
                End If
            Next
            Return True
        Else
            Return True
        End If

    End Function


    ''' <summary>[把點膠路徑轉換成Motion看得懂的資料格式]</summary>
    ''' <param name="velHigh">跨元件速度上限 mm/s</param>
    ''' <param name="acc"></param>
    ''' <param name="dec"></param>
    ''' <param name="maxExtendDistance"></param>
    ''' <param name="maxBlendTime"></param>
    ''' <param name="motionDispPathRegister"></param>
    ''' <param name="motionDispPathList"></param>
    ''' <param name="firstpath"></param>
    ''' <param name="maxDispenseSpeed"></param>
    ''' <param name="lastPos"></param>
    ''' <param name="lastPosVelocity"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function MotionPathCoversion(ByVal velHigh As Decimal, ByVal acc As Decimal, ByVal dec As Decimal, ByVal maxExtendDistance As Decimal, ByVal maxBlendTime As Decimal, ByVal motionDispPathRegister As List(Of sPatternPath), ByRef motionDispPathList As List(Of sMotionPathRegister), ByRef firstpath As sDot3DPath, ByRef lastPath As sDot3DPath, Optional ByRef maxDispenseSpeed As Decimal = 0, Optional ByRef lastPos As Premtek.sPos = Nothing, Optional ByRef lastPosVelocity As Decimal = 0) As Boolean

        Dim mI As Integer
        Dim mPath As sPatternPath
        Dim mMotionPath As New sMotionPathRegister
        Dim mBlendingTime As Integer
        Dim mLastPathVelocity As Decimal
        Dim mNowPathVelocity As Decimal
        Dim mVelocity As Decimal
        Dim mNowPos As Premtek.sPos
        Dim mLastPos As Premtek.sPos
        Dim mMaxDispenseSpeed As Decimal

        If motionDispPathList Is Nothing Then
            motionDispPathList = New List(Of sMotionPathRegister)
            motionDispPathList.Clear()
            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item
            motionDispPathList.Capacity = 1
        End If

        Call EstimateBlendingTime(maxBlendTime, mBlendingTime)
        mLastPathVelocity = 0
        mMaxDispenseSpeed = 0

        '[Note]:有梗-->若路徑裡面只有Wait那就取不到第一點座標了(除非被惡搞不然不會發生)
        '[Note]:把第一筆資料的起始點保留，不要加入-->直接移動到第一點座標，不要串入路徑內
        For mI = 0 To motionDispPathRegister.Count - 1
            mPath = motionDispPathRegister.Item(mI)
            Select Case mPath.PathType
                Case ePathType.Arc2D
                    If mI = 0 Then
                        '[Note]:1st-->起始點保留
                        firstpath.PosX = mPath.Arc2D.StartPosX
                        firstpath.PosY = mPath.Arc2D.StartPosY
                        firstpath.PosZ = mPath.Arc2D.StartPosZ
                        firstpath.ParameterType = mPath.Arc2D.ParameterType
                        firstpath.ParameterName = mPath.Arc2D.ParameterName
                        '[Note]:後面再補Z軸下去的速度跟相關資訊

                        '[Note]:需要給第一個點
                        With mMotionPath
                            .PathType = ePathRegisterType.Dot3D
                            .Dot3D.PosX = mPath.Arc2D.StartPosX
                            .Dot3D.PosY = mPath.Arc2D.StartPosY
                            .Dot3D.PosZ = mPath.Arc2D.StartPosZ + 0.001
                            .Dot3D.Velocity = mPath.Arc2D.Velocity
                        End With
                        Call AddMotionPathArc2D(mMotionPath, motionDispPathList)
                    Else
                        '[Note]:移動起始點-->在畫圓
                        With mMotionPath
                            .PathType = ePathRegisterType.Dot3D
                            .Dot3D.PosX = mPath.Arc2D.StartPosX
                            .Dot3D.PosY = mPath.Arc2D.StartPosY
                            .Dot3D.PosZ = mPath.Arc2D.StartPosZ
                            If mPath.IsFristPathInDie = True Then
                                '[Note]:只有第一條路徑需要走跨元件速度
                                mNowPos.PosX = mPath.Arc2D.StartPosX
                                mNowPos.PosY = mPath.Arc2D.StartPosY
                                mNowPos.PosZ = mPath.Arc2D.StartPosZ
                                mNowPathVelocity = mPath.Arc2D.Velocity
                                'Call EstimateCrossVelocity(velHigh, acc, dec, mLastPos, mNowPos, mBlendingTime, mLastPathVelocity, mNowPathVelocity, mVelocity)
                                If gSSystemParameter.MaxCrossDeviceVelocity > 0 Then 'Soni + 2017.08.14 跨元件交越速度
                                    Premtek.CDispensingMath.GetCrossVelocityXY(gSSystemParameter.MaxCrossDeviceVelocity, acc, dec, mLastPos, mNowPos, gSSystemParameter.CrossVerticalTime, mVelocity)
                                Else
                                    Premtek.CDispensingMath.GetCrossVelocityXY(velHigh, acc, dec, mLastPos, mNowPos, gSSystemParameter.CrossVerticalTime, mVelocity)
                                End If

                                .Dot3D.Velocity = mVelocity
                            Else
                                .Dot3D.Velocity = mPath.Arc2D.Velocity
                            End If
                        End With
                        Call AddMotionPathDot3D(mMotionPath, motionDispPathList)
                    End If

                    With mMotionPath
                        .PathType = ePathRegisterType.Arc2D
                        .Arc2D.CenterPosX = mPath.Arc2D.CenterPosX
                        .Arc2D.CenterPosY = mPath.Arc2D.CenterPosY
                        .Arc2D.CenterPosZ = mPath.Arc2D.CenterPosZ
                        .Arc2D.EndPosX = mPath.Arc2D.EndPosX
                        .Arc2D.EndPosY = mPath.Arc2D.EndPosY
                        .Arc2D.EndPosZ = mPath.Arc2D.EndPosZ
                        .Arc2D.ArcDirection = mPath.Arc2D.ArcDirection
                        .Arc2D.Velocity = mPath.Arc2D.Velocity
                        '20171016
                        .Arc2D.StartVel = mPath.Arc2D.StartVel

                    End With
                    Call AddMotionPathArc2D(mMotionPath, motionDispPathList)
                    mLastPathVelocity = mPath.Arc2D.Velocity
                    mLastPos.PosX = mPath.Arc2D.EndPosX
                    mLastPos.PosY = mPath.Arc2D.EndPosY
                    lastPath.ParameterType = mPath.Arc2D.ParameterType
                    lastPath.ParameterName = mPath.Arc2D.ParameterName
                    If mPath.Arc2D.IsDispense = True Then
                        If mMaxDispenseSpeed < mPath.Arc2D.Velocity Then
                            mMaxDispenseSpeed = mPath.Arc2D.Velocity
                        End If
                    End If

                Case ePathType.Arc3D
                    If mI = 0 Then
                        '[Note]:1st-->起始點保留
                        firstpath.PosX = mPath.Arc3D.StartPosX
                        firstpath.PosY = mPath.Arc3D.StartPosY
                        firstpath.PosZ = mPath.Arc3D.StartPosZ
                        firstpath.ParameterType = mPath.Arc3D.ParameterType
                        firstpath.ParameterName = mPath.Arc3D.ParameterName
                        '[Note]:後面再補Z軸下去的速度跟相關資訊
                    Else
                        '[Note]:移動起始點-->在畫圓
                        With mMotionPath
                            .PathType = ePathRegisterType.Dot3D
                            .Dot3D.PosX = mPath.Arc3D.StartPosX
                            .Dot3D.PosY = mPath.Arc3D.StartPosY
                            .Dot3D.PosZ = mPath.Arc3D.StartPosZ
                            If mPath.IsFristPathInDie = True Then
                                '[Note]:只有第一條路徑需要走跨元件速度
                                mNowPos.PosX = mPath.Arc3D.StartPosX
                                mNowPos.PosY = mPath.Arc3D.StartPosY
                                mNowPos.PosZ = mPath.Arc3D.StartPosZ
                                mNowPathVelocity = mPath.Arc3D.Velocity
                                'Call EstimateCrossVelocity(velHigh, acc, dec, mLastPos, mNowPos, mBlendingTime, mLastPathVelocity, mNowPathVelocity, mVelocity)
                                If gSSystemParameter.MaxCrossDeviceVelocity > 0 Then 'Soni + 2017.08.14 跨元件交越速度
                                    Premtek.CDispensingMath.GetCrossVelocityXY(gSSystemParameter.MaxCrossDeviceVelocity, acc, dec, mLastPos, mNowPos, gSSystemParameter.CrossVerticalTime, mVelocity)
                                Else
                                    Premtek.CDispensingMath.GetCrossVelocityXY(velHigh, acc, dec, mLastPos, mNowPos, gSSystemParameter.CrossVerticalTime, mVelocity)
                                End If

                                .Dot3D.Velocity = mVelocity
                            Else
                                .Dot3D.Velocity = mPath.Arc3D.Velocity
                            End If
                        End With
                        Call AddMotionPathDot3D(mMotionPath, motionDispPathList)
                    End If

                    With mMotionPath
                        .PathType = ePathRegisterType.Arc2D
                        .Arc2D.CenterPosX = mPath.Arc3D.CenterPosX
                        .Arc2D.CenterPosY = mPath.Arc3D.CenterPosY
                        .Arc2D.CenterPosZ = mPath.Arc3D.CenterPosZ
                        .Arc2D.EndPosX = mPath.Arc3D.EndPosX
                        .Arc2D.EndPosY = mPath.Arc3D.EndPosY
                        .Arc2D.EndPosZ = mPath.Arc3D.EndPosZ
                        .Arc2D.ArcDirection = mPath.Arc3D.ArcDirection
                        .Arc2D.Velocity = mPath.Arc3D.Velocity
                        '20171016
                        .Arc2D.StartVel = mPath.Arc3D.StartVel
                    End With
                    Call AddMotionPathArc2D(mMotionPath, motionDispPathList)
                    mLastPathVelocity = mPath.Arc3D.Velocity
                    mLastPos.PosX = mPath.Arc3D.EndPosX
                    mLastPos.PosY = mPath.Arc3D.EndPosY
                    lastPath.ParameterType = mPath.Arc3D.ParameterType
                    lastPath.ParameterName = mPath.Arc3D.ParameterName

                    If mPath.Arc3D.IsDispense = True Then
                        If mMaxDispenseSpeed < mPath.Arc3D.Velocity Then
                            mMaxDispenseSpeed = mPath.Arc3D.Velocity
                        End If
                    End If

                Case ePathType.Dot3D
                    If mI = 0 Then
                        '[Note]:1st-->起始點保留
                        firstpath.PosX = mPath.Dot3D.PosX
                        firstpath.PosY = mPath.Dot3D.PosY
                        firstpath.PosZ = mPath.Dot3D.PosZ
                        firstpath.ParameterType = mPath.Dot3D.ParameterType
                        firstpath.ParameterName = mPath.Dot3D.ParameterName
                        mLastPathVelocity = mPath.Dot3D.Velocity
                        mLastPos.PosX = mPath.Dot3D.PosX
                        mLastPos.PosY = mPath.Dot3D.PosY
                    Else
                        With mMotionPath
                            .PathType = ePathRegisterType.Dot3D
                            .Dot3D.PosX = mPath.Dot3D.PosX
                            .Dot3D.PosY = mPath.Dot3D.PosY
                            .Dot3D.PosZ = mPath.Dot3D.PosZ
                            If mPath.IsFristPathInDie = True Then
                                '[Note]:只有第一條路徑需要走跨元件速度
                                mNowPos.PosX = mPath.Dot3D.PosX
                                mNowPos.PosY = mPath.Dot3D.PosY
                                mNowPos.PosZ = mPath.Dot3D.PosZ
                                mNowPathVelocity = mPath.Dot3D.Velocity

                                'Call EstimateCrossVelocity(velHigh, acc, dec, mLastPos, mNowPos, mBlendingTime, mLastPathVelocity, mNowPathVelocity, mVelocity)
                                If gSSystemParameter.MaxCrossDeviceVelocity > 0 Then 'Soni + 2017.08.14 跨元件交越速度
                                    Premtek.CDispensingMath.GetCrossVelocityXY(gSSystemParameter.MaxCrossDeviceVelocity, acc, dec, mLastPos, mNowPos, gSSystemParameter.CrossVerticalTime, mVelocity)
                                Else
                                    Premtek.CDispensingMath.GetCrossVelocityXY(velHigh, acc, dec, mLastPos, mNowPos, gSSystemParameter.CrossVerticalTime, mVelocity)
                                End If

                                .Dot3D.Velocity = mVelocity
                            Else
                                .Dot3D.Velocity = mPath.Dot3D.Velocity
                            End If
                        End With
                        Call AddMotionPathDot3D(mMotionPath, motionDispPathList)
                        mLastPathVelocity = mMotionPath.Dot3D.Velocity
                        mLastPos.PosX = mMotionPath.Dot3D.PosX
                        mLastPos.PosY = mMotionPath.Dot3D.PosY
                        If mPath.Dot3D.IsDispense = True Then
                            If mMaxDispenseSpeed < mPath.Dot3D.Velocity Then
                                mMaxDispenseSpeed = mPath.Dot3D.Velocity
                            End If
                        End If
                    End If
                    With mMotionPath
                        '20171016
                        .Dot3D.StartVel = mPath.Line3D.StartVel
                    End With
                    lastPath.ParameterType = mPath.Dot3D.ParameterType
                    lastPath.ParameterName = mPath.Dot3D.ParameterName

                Case ePathType.Line3D
                    If mI = 0 Then
                        '[Note]:1st-->起始點保留
                        firstpath.PosX = mPath.Line3D.StartPosX
                        firstpath.PosY = mPath.Line3D.StartPosY
                        firstpath.PosZ = mPath.Line3D.StartPosZ
                        firstpath.ParameterType = mPath.Line3D.ParameterType
                        firstpath.ParameterName = mPath.Line3D.ParameterName

                        With mMotionPath
                            .PathType = ePathRegisterType.Dot3D
                            .Dot3D.PosX = mPath.Line3D.EndPosX
                            .Dot3D.PosY = mPath.Line3D.EndPosY
                            .Dot3D.PosZ = mPath.Line3D.EndPosZ
                            .Dot3D.Velocity = mPath.Line3D.Velocity
                        End With
                        If mPath.Line3D.StartPosX = mPath.Line3D.EndPosX And mPath.Line3D.StartPosY = mPath.Line3D.EndPosY Then
                            '[Note]:同一點就不加了                        
                        Else
                            Call AddMotionPathDot3D(mMotionPath, motionDispPathList)
                        End If
                    Else
                        With mMotionPath
                            .PathType = ePathRegisterType.Dot3D
                            .Dot3D.PosX = mPath.Line3D.StartPosX
                            .Dot3D.PosY = mPath.Line3D.StartPosY
                            .Dot3D.PosZ = mPath.Line3D.StartPosZ
                            If mPath.IsFristPathInDie = True Then
                                '[Note]:只有第一條路徑需要走跨元件速度
                                mNowPos.PosX = mPath.Line3D.StartPosX
                                mNowPos.PosY = mPath.Line3D.StartPosY
                                mNowPos.PosZ = mPath.Line3D.StartPosZ
                                mNowPathVelocity = mPath.Line3D.Velocity
                                'Call EstimateCrossVelocity(velHigh, acc, dec, mLastPos, mNowPos, mBlendingTime, mLastPathVelocity, mNowPathVelocity, mVelocity)
                                If gSSystemParameter.MaxCrossDeviceVelocity > 0 Then 'Soni + 2017.08.14 跨元件交越速度
                                    Premtek.CDispensingMath.GetCrossVelocityXY(gSSystemParameter.MaxCrossDeviceVelocity, acc, dec, mLastPos, mNowPos, gSSystemParameter.CrossVerticalTime, mVelocity)
                                Else
                                    Premtek.CDispensingMath.GetCrossVelocityXY(velHigh, acc, dec, mLastPos, mNowPos, gSSystemParameter.CrossVerticalTime, mVelocity)
                                End If

                                .Dot3D.Velocity = mVelocity
                            Else
                                mNowPos.PosX = mPath.Line3D.StartPosX
                                mNowPos.PosY = mPath.Line3D.StartPosY
                                mNowPos.PosZ = mPath.Line3D.StartPosZ
                                .Dot3D.Velocity = mPath.Line3D.Velocity

                                'f .Dot3D.IsDispense = False Then 'Soni + 2017.08.24路徑串接時, 如果不是點膠路徑, 限制速度.
                                Dim mV1 As Decimal
                                '用Blending Time跟一般交越取最慢的試試
                                Premtek.CDispensingMath.GetCrossVelocityXYByTotalTime(gSSystemParameter.MaxCrossStepVelocity, acc, dec, mLastPos, mNowPos, mBlendingTime / 500, mV1)
                                Premtek.CDispensingMath.GetCrossVelocityXY(gSSystemParameter.MaxCrossStepVelocity, acc, dec, mLastPos, mNowPos, gSSystemParameter.CrossVerticalTime, mVelocity)
                                If mVelocity > mV1 And mV1 <> 0 Then mVelocity = mV1

                                .Dot3D.Velocity = mVelocity
                                'End If
                            End If
                        End With
                        Call AddMotionPathDot3D(mMotionPath, motionDispPathList)

                        With mMotionPath
                            .PathType = ePathRegisterType.Dot3D
                            .Dot3D.PosX = mPath.Line3D.EndPosX
                            .Dot3D.PosY = mPath.Line3D.EndPosY
                            .Dot3D.PosZ = mPath.Line3D.EndPosZ
                            .Dot3D.Velocity = mPath.Line3D.Velocity
                            '20171016
                            .Dot3D.StartVel = mPath.Line3D.StartVel
                        End With
                        Call AddMotionPathDot3D(mMotionPath, motionDispPathList)
                    End If

                    mLastPathVelocity = mMotionPath.Dot3D.Velocity
                    mLastPos.PosX = mMotionPath.Dot3D.PosX
                    mLastPos.PosY = mMotionPath.Dot3D.PosY
                    lastPath.ParameterType = mPath.Line3D.ParameterType
                    lastPath.ParameterName = mPath.Line3D.ParameterName
                    If mPath.Line3D.IsDispense = True Then
                        If mMaxDispenseSpeed < mPath.Line3D.Velocity Then
                            mMaxDispenseSpeed = mPath.Line3D.Velocity
                        End If
                    End If

                Case ePathType.Wait
                    With mMotionPath
                        .PathType = ePathRegisterType.Wait
                        .Wait.DwellTimeInMs = mPath.Wait.DwellTimeInMs
                    End With
                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                    motionDispPathList.Capacity = motionDispPathList.Count + 1
                    motionDispPathList.Add(mMotionPath)
            End Select
        Next

        lastPosVelocity = mLastPathVelocity
        lastPos = mLastPos
        maxDispenseSpeed = mMaxDispenseSpeed
        Return True
    End Function

    ''' <summary>[增加點的路徑]</summary>
    ''' <param name="path"></param>
    ''' <param name="motionDispPathList"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function AddMotionPathDot3D(ByVal path As sMotionPathRegister, ByRef motionDispPathList As List(Of sMotionPathRegister)) As Boolean

        Dim mAddPath As New sMotionPathRegister

        mAddPath.PathType = ePathRegisterType.Dot3D
        mAddPath.Dot3D.PosX = path.Dot3D.PosX
        mAddPath.Dot3D.PosY = path.Dot3D.PosY
        mAddPath.Dot3D.PosZ = path.Dot3D.PosZ
        mAddPath.Dot3D.Velocity = path.Dot3D.Velocity

        '20171016
        mAddPath.Dot3D.StartVel = path.Dot3D.StartVel

        If motionDispPathList Is Nothing Then
            motionDispPathList = New List(Of sMotionPathRegister)
            motionDispPathList.Clear()
            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item
            motionDispPathList.Capacity = 1
        End If

        '[Note]:把第一筆資料的起始點保留，不要加入-->直接移動到第一點座標，不要串入路徑內
        If motionDispPathList.Count = 0 Then
            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item
            motionDispPathList.Capacity = motionDispPathList.Count + 1
            motionDispPathList.Add(mAddPath)
        Else
            '[Note]:判斷上一筆資料與預新增的點是否相同，若相同則不加
            Select Case motionDispPathList.Item(motionDispPathList.Count - 1).PathType
                Case ePathRegisterType.Arc2D
                    With motionDispPathList.Item(motionDispPathList.Count - 1).Arc2D
                        '[Note]:若二點座標太過於相近(1um)，視為同一點
                        '[Note]:先忽略Z軸，以後再想
                        If Math.Abs(.EndPosX - mAddPath.Dot3D.PosX) > 0.001 Or Math.Abs(.EndPosY - mAddPath.Dot3D.PosY) > 0.001 Then
                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item
                            motionDispPathList.Capacity = motionDispPathList.Count + 1
                            motionDispPathList.Add(mAddPath)
                        End If
                    End With
                Case ePathRegisterType.Dot3D
                    With motionDispPathList.Item(motionDispPathList.Count - 1).Dot3D
                        '[Note]:若二點座標太過於相近(1um)，視為同一點
                        '[Note]:先忽略Z軸，以後再想
                        If Math.Abs(.PosX - mAddPath.Dot3D.PosX) > 0.001 Or Math.Abs(.PosY - mAddPath.Dot3D.PosY) > 0.001 Then
                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item
                            motionDispPathList.Capacity = motionDispPathList.Count + 1
                            motionDispPathList.Add(mAddPath)
                        End If
                    End With

                Case ePathRegisterType.Wait
                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item
                    motionDispPathList.Capacity = motionDispPathList.Count + 1
                    motionDispPathList.Add(mAddPath)

            End Select
        End If
        Return True

    End Function

    ''' <summary>[增加點的路徑]</summary>
    ''' <param name="path"></param>
    ''' <param name="motionDispPathList"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function AddMotionPathArc2D(ByVal path As sMotionPathRegister, ByRef motionDispPathList As List(Of sMotionPathRegister)) As Boolean

        '[Note]:把第一筆資料的起始點保留，不要加入-->直接移動到第一點座標，不要串入路徑內
        '[Note]:Are2D-->前面已經加工處理過了，所以不可能為第一筆資料
        '[Note]:直接加上去了-->後面再來看有沒有梗

        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item
        motionDispPathList.Capacity = motionDispPathList.Count + 1
        motionDispPathList.Add(path)
        Return True

    End Function

    ''' <summary>[將路徑資料丟給Motion Card]</summary>
    ''' <param name="stageNo"></param>
    ''' <param name="motionDispPathList"></param>
    ''' <param name="maxExtendDistance"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function SendPathToMotion(ByVal stageNo As Integer, ByVal motionDispPathList As List(Of sMotionPathRegister), ByVal maxExtendDistance As Decimal, ByVal maxBlendTime As Decimal) As Boolean

        Dim mI As Integer
        Dim mAcc As Decimal
        Dim mDec As Decimal
        Dim mVelLow As Decimal
        Dim mVelHigh As Decimal
        Dim mPathCount As Integer
        Dim mBlendingTime As Integer
        Dim mLastVelHigh As Decimal

        '[Note]:判斷有無動作
        If motionDispPathList.Count = 0 Then
            Return True
        End If

        Call EstimateBlendingTime(maxBlendTime, mBlendingTime)
        
        mLastVelHigh = 0
        mVelLow = 0
        mPathCount = 0

        Call gCMotion.GPSetRunMode(gCMotion.SyncParameter(stageNo), gCRecipe.GPSetRunMode, mBlendingTime)
        If gCRecipe.GPSetRunMode = eRunMode.BufferMode Then 'S-Curve 平均加減速減半, 使瞬間加減速與設定值相等
            mAcc = gCMotion.SyncParameter(stageNo).Velocity.Acc * gCMotion.SyncParameter(stageNo).Velocity.AccRatio * 0.5
            mDec = gCMotion.SyncParameter(stageNo).Velocity.Dec * gCMotion.SyncParameter(stageNo).Velocity.DecRatio * 0.5
        Else
            mAcc = gCMotion.SyncParameter(stageNo).Velocity.Acc * gCMotion.SyncParameter(stageNo).Velocity.AccRatio
            mDec = gCMotion.SyncParameter(stageNo).Velocity.Dec * gCMotion.SyncParameter(stageNo).Velocity.DecRatio
        End If
        '[Note]:清除同動內Buffer的資料
        If gCMotion.GpClearMovePath(gCMotion.SyncParameter(stageNo)) <> CommandStatus.Sucessed Then
            Return False
        End If

        '[Note]:將座標塞進Motion
        For mI = 0 To motionDispPathList.Count - 1
            Select Case motionDispPathList.Item(mI).PathType
                Case ePathRegisterType.Arc2D
                    '[Note]:最後一筆連續移動的命令，需用End Path
                    mVelHigh = motionDispPathList.Item(mI).Arc2D.Velocity
                    '20171102_Toby
                    If mI = 0 Then
                        mVelLow = 0
                    Else
                        '20171016
                        mVelLow = motionDispPathList.Item(mI).Arc2D.StartVel
                        'OptimizationVelLow(mLastVelHigh, mVelHigh, mVelLow)
                    End If

                    mLastVelHigh = mVelHigh
                    If gCMotion.GpSetVelLow(gCMotion.SyncParameter(stageNo), mVelLow) <> CommandStatus.Sucessed Then
                        Return False
                    End If
                    If gCMotion.GpSetVelHigh(gCMotion.SyncParameter(stageNo), mVelHigh) <> CommandStatus.Sucessed Then
                        Return False
                    End If
                    If gCMotion.GpSetAcc(gCMotion.SyncParameter(stageNo), mAcc) <> CommandStatus.Sucessed Then
                        Return False
                    End If
                    If gCMotion.GpSetDec(gCMotion.SyncParameter(stageNo), mDec) <> CommandStatus.Sucessed Then
                        Return False
                    End If
                    Select Case motionDispPathList.Item(mI).Arc2D.ArcDirection
                        Case eArcDirection.CW
                            gCMotion.SyncParameter(stageNo).Cmd = Advantech.Motion.PathCmd.Abs2DArcCW

                        Case eArcDirection.CCW
                            gCMotion.SyncParameter(stageNo).Cmd = Advantech.Motion.PathCmd.Abs2DArcCCW

                    End Select
                    gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisX) = motionDispPathList.Item(mI).Arc2D.EndPosX
                    gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisY) = motionDispPathList.Item(mI).Arc2D.EndPosY
                    gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisZ) = motionDispPathList.Item(mI).Arc2D.EndPosZ
                    gCMotion.SyncParameter(stageNo).CenterPos(sAxis.AxisX) = motionDispPathList.Item(mI).Arc2D.CenterPosX
                    gCMotion.SyncParameter(stageNo).CenterPos(sAxis.AxisY) = motionDispPathList.Item(mI).Arc2D.CenterPosY
                    gCMotion.SyncParameter(stageNo).CenterPos(sAxis.AxisZ) = motionDispPathList.Item(mI).Arc2D.CenterPosZ
                    gCMotion.SyncParameter(stageNo).SetVelLow(mVelLow)
                    gCMotion.SyncParameter(stageNo).SetVelHigh(mVelHigh)

                    'Debug.Print("Path(Arc): " & gCMotion.SyncParameter(stageNo).Cmd & " , " & mVelHigh & " , " & gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisX) & " , " & gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisY) & " , " & gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisZ) & " , " & gCMotion.SyncParameter(stageNo).CenterPos(sAxis.AxisX) & " , " & gCMotion.SyncParameter(stageNo).CenterPos(sAxis.AxisY) & " , " & gCMotion.SyncParameter(stageNo).CenterPos(sAxis.AxisZ))
                    If gCMotion.GpAddArcPath(gCMotion.SyncParameter(stageNo), False) <> CommandStatus.Sucessed Then
                        Return False
                    Else
                        mPathCount = mPathCount + 1
                    End If
                    If mI = motionDispPathList.Count - 1 Then 'And motionDispPathList.Count >= ProjectMotion.PathCountLimit Then
                        '[Note]:重新塞數值，不能刪
                        '20171102 新增最後一段path(初速為0)
                        gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisX) = motionDispPathList.Item(mI).Arc2D.EndPosX
                        gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisY) = motionDispPathList.Item(mI).Arc2D.EndPosY
                        gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisZ) = motionDispPathList.Item(mI).Arc2D.EndPosZ
                        gCMotion.SyncParameter(stageNo).CenterPos(sAxis.AxisX) = motionDispPathList.Item(mI).Arc2D.CenterPosX
                        gCMotion.SyncParameter(stageNo).CenterPos(sAxis.AxisY) = motionDispPathList.Item(mI).Arc2D.CenterPosY
                        gCMotion.SyncParameter(stageNo).CenterPos(sAxis.AxisZ) = motionDispPathList.Item(mI).Arc2D.CenterPosZ
                        gCMotion.SyncParameter(stageNo).SetVelLow(0)
                        gCMotion.SyncParameter(stageNo).SetVelHigh(mVelHigh)
                        'Debug.Print("Path(Arc): " & gCMotion.SyncParameter(stageNo).Cmd & " , " & mVelHigh & " , " & gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisX) & " , " & gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisY) & " , " & gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisZ) & " , " & gCMotion.SyncParameter(stageNo).CenterPos(sAxis.AxisX) & " , " & gCMotion.SyncParameter(stageNo).CenterPos(sAxis.AxisY) & " , " & gCMotion.SyncParameter(stageNo).CenterPos(sAxis.AxisZ))
                        If gCMotion.GpAddArcPath(gCMotion.SyncParameter(stageNo), False) <> CommandStatus.Sucessed Then
                            Return False
                        Else
                            mPathCount = mPathCount + 1
                        End If
                        '20171102 增加 EndPath
                        gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisX) = motionDispPathList.Item(mI).Arc2D.EndPosX
                        gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisY) = motionDispPathList.Item(mI).Arc2D.EndPosY
                        gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisZ) = motionDispPathList.Item(mI).Arc2D.EndPosZ
                        gCMotion.SyncParameter(stageNo).CenterPos(sAxis.AxisX) = motionDispPathList.Item(mI).Arc2D.CenterPosX
                        gCMotion.SyncParameter(stageNo).CenterPos(sAxis.AxisY) = motionDispPathList.Item(mI).Arc2D.CenterPosY
                        gCMotion.SyncParameter(stageNo).CenterPos(sAxis.AxisZ) = motionDispPathList.Item(mI).Arc2D.CenterPosZ
                        gCMotion.SyncParameter(stageNo).SetVelLow(0)
                        gCMotion.SyncParameter(stageNo).SetVelHigh(mVelHigh)
                        'Debug.Print("Path(Arc): " & gCMotion.SyncParameter(stageNo).Cmd & " , " & mVelHigh & " , " & gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisX) & " , " & gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisY) & " , " & gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisZ) & " , " & gCMotion.SyncParameter(stageNo).CenterPos(sAxis.AxisX) & " , " & gCMotion.SyncParameter(stageNo).CenterPos(sAxis.AxisY) & " , " & gCMotion.SyncParameter(stageNo).CenterPos(sAxis.AxisZ))
                        If gCMotion.GpAddArcPath(gCMotion.SyncParameter(stageNo), True) = False Then
                            Return False
                        End If
                    End If

                Case ePathRegisterType.Dot3D
                    '[Note]:最後一筆連續移動的命令，需用End Path
                    mVelHigh = motionDispPathList.Item(mI).Dot3D.Velocity

                    '20171102
                    If mI = 0 Then
                        mVelLow = 0
                    Else
                        '20171016
                        mVelLow = motionDispPathList.Item(mI).Dot3D.StartVel
                        'OptimizationVelLow(mLastVelHigh, mVelHigh, mVelLow)
                    End If

                    mLastVelHigh = mVelHigh
                    If gCMotion.GpSetVelLow(gCMotion.SyncParameter(stageNo), mVelLow) <> CommandStatus.Sucessed Then
                        Return False
                    End If
                    If gCMotion.GpSetVelHigh(gCMotion.SyncParameter(stageNo), mVelHigh) <> CommandStatus.Sucessed Then
                        Return False
                    End If
                    If gCMotion.GpSetAcc(gCMotion.SyncParameter(stageNo), mAcc) <> CommandStatus.Sucessed Then
                        Return False
                    End If
                    If gCMotion.GpSetDec(gCMotion.SyncParameter(stageNo), mDec) <> CommandStatus.Sucessed Then
                        Return False
                    End If
                    gCMotion.SyncParameter(stageNo).Cmd = Advantech.Motion.PathCmd.Abs3DLine
                    gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisX) = motionDispPathList.Item(mI).Dot3D.PosX
                    gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisY) = motionDispPathList.Item(mI).Dot3D.PosY
                    gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisZ) = motionDispPathList.Item(mI).Dot3D.PosZ
                    gCMotion.SyncParameter(stageNo).SetVelLow(mVelLow)
                    gCMotion.SyncParameter(stageNo).SetVelHigh(mVelHigh)
                    'Debug.Print("Path(Dot): " & gCMotion.SyncParameter(stageNo).Cmd & " , " & mVelLow & "," & mVelHigh & " , " & gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisX) & " , " & gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisY) & " , " & gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisZ))
                    If gCMotion.GpAddDotPath(gCMotion.SyncParameter(stageNo), False) <> CommandStatus.Sucessed Then
                        Return False
                    Else
                        mPathCount = mPathCount + 1
                    End If
                  
                    If mI = motionDispPathList.Count - 1 Then 'And motionDispPathList.Count >= ProjectMotion.PathCountLimit Then
                        '[Note]:重新塞數值，不能刪
                        '20171102 新增最後一段path(初速為0)
                        gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisX) = motionDispPathList.Item(mI).Dot3D.PosX
                        gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisY) = motionDispPathList.Item(mI).Dot3D.PosY
                        gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisZ) = motionDispPathList.Item(mI).Dot3D.PosZ
                        gCMotion.SyncParameter(stageNo).SetVelLow(0)
                        gCMotion.SyncParameter(stageNo).SetVelHigh(mVelHigh)
                        'Debug.Print("Path(Dot): " & gCMotion.SyncParameter(stageNo).Cmd & " , " & mVelLow & "," & mVelHigh & " , " & gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisX) & " , " & gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisY) & " , " & gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisZ))
                        If gCMotion.GpAddDotPath(gCMotion.SyncParameter(stageNo), False) <> CommandStatus.Sucessed Then
                            Return False
                        Else
                            mPathCount = mPathCount + 1
                        End If
                        '20171102 增加 EndPath
                        gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisX) = motionDispPathList.Item(mI).Dot3D.PosX
                        gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisY) = motionDispPathList.Item(mI).Dot3D.PosY
                        gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisZ) = motionDispPathList.Item(mI).Dot3D.PosZ
                        gCMotion.SyncParameter(stageNo).SetVelLow(0)
                        gCMotion.SyncParameter(stageNo).SetVelHigh(mVelHigh)
                        'Debug.Print("Path(Dot): " & gCMotion.SyncParameter(stageNo).Cmd & " , " & mVelLow & "," & mVelHigh & " , " & gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisX) & " , " & gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisY) & " , " & gCMotion.SyncParameter(stageNo).TargetPos(sAxis.AxisZ))
                        If gCMotion.GpAddDotPath(gCMotion.SyncParameter(stageNo), True) = False Then
                            Return False
                        End If
                    End If

                Case ePathRegisterType.Wait
                    gCMotion.SyncParameter(stageNo).Cmd = Advantech.Motion.PathCmd.GPDELAY
                    gCMotion.SyncParameter(stageNo).GpDelay = motionDispPathList.Item(mI).Wait.DwellTimeInMs
                    If gCMotion.GpAddDwell(gCMotion.SyncParameter(stageNo)) <> CommandStatus.Sucessed Then
                        Return False
                    Else
                        mPathCount = mPathCount + 1
                    End If

            End Select
        Next


        Return True

    End Function

    ''' <summary>[取最佳化的初速度，使初速不為0]</summary>
    ''' <param name="lastVelHigh"></param>
    ''' <param name="nowVelHigh"></param>
    ''' <param name="nowVelLow"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function OptimizationVelLow(ByVal lastVelHigh As Decimal, ByVal nowVelHigh As Decimal, ByRef nowVelLow As Decimal) As Boolean
        If nowVelHigh > lastVelHigh Then
            If lastVelHigh = 0 Then
                '[Note]:初速為最大速的一半好了
                nowVelLow = nowVelHigh * 0.5
            Else
                nowVelLow = lastVelHigh
            End If
        Else
            '[Note]:初速為最大速的一半好了
            nowVelLow = nowVelHigh * 0.5
            If nowVelLow < 0 Then
                nowVelLow = 0
            End If
        End If
        Return True
    End Function

    

    Public mGpSCurve As eCurveMode = eCurveMode.SCurve
    
    ''' <summary>
    ''' S-Curve對加減速修正比率, 正常為0.5
    ''' </summary>
    ''' <remarks></remarks>
    Public mSCurveRatio As Decimal = 0.5
    Dim mNonHistoryStopWatch As New Stopwatch
    ''' <summary>[非Hisory Model點膠流程]</summary>
    ''' <param name="sys"></param>
    ''' <remarks></remarks>
    Private Sub DispNonHistoryModelAction(ByRef sys As sDispSysParam)

        Static mTransmissionResumingStopWatch(enmStage.Max) As Stopwatch        '[記錄資料續傳的時間]
        Static mTriggerIOStopWatch(enmStage.Max) As Stopwatch                   '[紀錄Trigger IO訊號反應時間]
        Static mProcessStopWatch(enmStage.Max) As Stopwatch
        Static mNextRoundDelayTime(enmStage.Max) As Stopwatch
        Static mWaitStopWatch(enmStage.Max) As Stopwatch                        '[等待用的(目前有用到ValveOnTime、)]
        Static mSettlingStopWatch(enmStage.Max) As Stopwatch                    '[Settling Time的計時]
        Static mValveCylStopWatch(enmStage.Max) As Stopwatch                    '[用來記錄B閥汽缸的TimeOut]
        Static mLastRoundProcessTime(enmStage.Max) As Long
        Static mDotWeight(enmStage.Max) As Decimal
        Static mDispFrontRoundTime(enmStage.Max) As Double                      '[前一輪完成的時間]
        Static mMeasurePitch(enmStage.Max) As Decimal                           '[Measure Picth]
        Static mMeasureLength(enmStage.Max) As Decimal                          '[Measure Length]
        Static mCycleTime(enmStage.Max) As Decimal                              '[點膠Cycle Time]
        Static mDotCounts(enmStage.Max) As Integer                              '[記錄這一Run點膠的顆數]
        Static mMaxDispenseSpeed(enmStage.Max) As Decimal                       '[紀錄點膠時的最大速度，用來計算Measure Picth]
        Static mSettlingTime(enmStage.Max) As Decimal                           '[Settling Time(ms)]
        Static mValveOnTime(enmStage.Max) As Decimal                            '[ValveOnTime(ms)-->Used in Dot]
        Static mRetractDistnace(enmStage.Max) As Decimal                        '[Retract Distance]
        Static mRetractAcc(enmStage.Max) As Decimal
        Static mDwellTime(enmStage.Max) As Decimal
        Static mRetractVelocity(enmStage.Max) As Decimal
        Static mRetractPosZ(enmStage.Max) As Decimal
        Static mMulitDotsDispensingTime(enmStage.Max) As Decimal                '[估算原地打點需要花的時間]
        Static mHeadNo(enmStage.Max) As eValveWorkMode                          '[紀錄多閥同時點膠，G cmd丟到哪一個]

        Const mTransmissionResumingTime As Decimal = 100                        '[續傳檢查約100ms]
        Const mTriggerIOTime As Decimal = 3                                     '[Trigger IO訊號約3ms]

        Dim mI(enmStage.Max) As Integer
        Dim mJ(enmStage.Max) As Integer
        Dim mAxisXState(enmStage.Max) As CommandStatus                          '[X軸的狀態]
        Dim mAxisYState(enmStage.Max) As CommandStatus                          '[Y軸的狀態]
        Dim mAxisZState(enmStage.Max) As CommandStatus                          '[Z軸的狀態]
        Dim mAxisBState(enmStage.Max) As CommandStatus                          '[Tilt軸的狀態]
        Dim mCommandPosB(enmStage.Max) As Decimal                               '[取出目前Tilt角度(Command Pos)]
        Dim mDispTimeForRound(enmStage.Max) As sDispenseTimeForRound
        Dim mVelLow(enmStage.Max) As Decimal
        Dim mVelHigh(enmStage.Max) As Decimal
        Dim mAcc(enmStage.Max) As Decimal
        Dim mDec(enmStage.Max) As Decimal
        Dim mTiggerDelayTime(enmStage.Max) As Decimal


        Dim mPosX As Decimal, mPosY As Decimal, mPosZ As Decimal
        Dim mRealX As Decimal, mRealY As Decimal, mRealZ As Decimal
        Dim mVelX As Decimal, mVelY As Decimal, mVelZ As Decimal
        gCMotion.GetCommandValue(sys.AxisX, mPosX)
        gCMotion.GetCommandValue(sys.AxisY, mPosY)
        gCMotion.GetCommandValue(sys.AxisZ, mPosZ)
        mRealX = gCMotion.GetPositionValue(sys.AxisX)
        mRealY = gCMotion.GetPositionValue(sys.AxisY)
        mRealZ = gCMotion.GetPositionValue(sys.AxisZ)
        gCMotion.GetCurrentVel(sys.AxisX, mVelX)
        gCMotion.GetCurrentVel(sys.AxisY, mVelY)
        gCMotion.GetCurrentVel(sys.AxisZ, mVelZ)
        gCMotion.CheckMotorStatus(sys.AxisX)
        gCMotion.CheckMotorStatus(sys.AxisY)
        gCMotion.CheckMotorStatus(sys.AxisZ)
        Debug.Print("SPS: ," & sys.SysNum & ", Cmd:," & mPosX & "," & mPosY & "," & mPosZ & ", Now: ," & mRealX & "," & mRealY & "," & mRealZ & ",Vel: ," & mVelX & "," & mVelY & "," & mVelZ & ",INP," & CInt(gCMotion.AxisParameter(sys.AxisX).MotionIOStatus.blnINP) & "," & CInt(gCMotion.AxisParameter(sys.AxisY).MotionIOStatus.blnINP) & "," & CInt(gCMotion.AxisParameter(sys.AxisZ).MotionIOStatus.blnINP) & "," & gDICollection.GetState(enmDI.TriggerBoardReady1, True))
        '---------------------------------------------------------------------------------------------------------------
        ' ''檔案路徑確認是否存在
        'Dim folderName As String
        'Dim fileName As String

        'folderName = "D:\PIIData\DataLog\" & Format(Now.Year, "0000") & Format(Now.Month, "00") & Format(Now.Day, "00") & "\"
        'If Not System.IO.Directory.Exists(folderName) Then
        '    System.IO.Directory.CreateDirectory(folderName)
        'End If
        'fileName = folderName & "Motion" & Format(Now.Year, "0000") & Format(Now.Month, "00") & Format(Now.Day, "00") & "_" & (sys.StageNo + 1) & "_" & ".csv"

        'Dim data As String = Format(ItemCount + 1, "00000") &
        '     "," & mPosX &
        '     "," & mPosY &
        '     "," & mPosZ &
        '     "," & mRealX &
        '     "," & mRealY &
        '     "," & mRealZ &
        '         ","

        'Dim sw As System.IO.StreamWriter
        'If System.IO.File.Exists(fileName) Then
        '    sw = New IO.StreamWriter(fileName, True)
        '    sw.WriteLineAsync(data)
        '    sw.Close()
        '    ItemCount += 1
        'Else
        '    '檔案不存在,另開新檔
        '    sw = New IO.StreamWriter(fileName, False)

        '    '1.Item(項目) 2.Times(紀錄時間) 3.DsipenserNo(閥編號) 4.Weight(重量) 5.Dots(重量) 6.RecipeWeighingWeight(重量) 6.RecipeWeighingTolerance(重量Ratio) 
        '    Dim header As String = "Item" & ",CmdX" & ",CmdY" & ",CmdZ" & ",NowX" & ",NowY" & ",NowZ"
        '    ItemCount = 0

        '    data = Format(ItemCount + 1, "00000") & "," & mPosX & "," & mPosY & "," & mPosZ & "," & mRealX & "," & mRealY & "," & mRealZ & ","

        '    sw.WriteLineAsync(header)
        '    sw.WriteLineAsync(data)
        '    sw.Close()
        '    ItemCount += 1
        'End If


        '---------------------------------------------------------------------------------------------------------------
        Select Case sys.SysNum
            Case sDispSysParam.SysLoopStart
                '[Note]:清空暫存座標
                Call gMotionPathList(sys.StageNo).Clear()



                If mTransmissionResumingStopWatch(sys.StageNo) Is Nothing Then
                    mTransmissionResumingStopWatch(sys.StageNo) = New Stopwatch
                End If

                If mTriggerIOStopWatch(sys.StageNo) Is Nothing Then
                    mTriggerIOStopWatch(sys.StageNo) = New Stopwatch
                End If

                If mProcessStopWatch(sys.StageNo) Is Nothing Then
                    mProcessStopWatch(sys.StageNo) = New Stopwatch
                End If

                If mNextRoundDelayTime(sys.StageNo) Is Nothing Then
                    mNextRoundDelayTime(sys.StageNo) = New Stopwatch
                End If

                If mWaitStopWatch(sys.StageNo) Is Nothing Then
                    mWaitStopWatch(sys.StageNo) = New Stopwatch
                End If

                If mSettlingStopWatch(sys.StageNo) Is Nothing Then
                    mSettlingStopWatch(sys.StageNo) = New Stopwatch
                End If

                If mValveCylStopWatch(sys.StageNo) Is Nothing Then
                    mValveCylStopWatch(sys.StageNo) = New Stopwatch
                End If
                mNonHistoryStopWatch.Restart()
                '[Note]:Dispenesing Trigger Off
                Call SetDispensingTrigger(sys.StageNo, sys.SelectValve, enmONOFF.eOff)
                gCMotion.SetCurve(sys.AxisX, eCurveMode.SCurve)
                gCMotion.SetCurve(sys.AxisY, eCurveMode.SCurve)
                gCMotion.SetCurve(sys.AxisZ, eCurveMode.SCurve)
                '[說明]:速度載入
                If gCMotion.SetVelAccDec(sys.AxisX) = False Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1030017", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1030017))
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1042017", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1042017))
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1060017", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1060017))
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1067017", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1067017))
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If
                If gCMotion.SetVelAccDec(sys.AxisY) = False Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1031017", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1031017))
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1043017", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1043017))
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1061017", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1061017))
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1068017", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1068017))
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If
                If gCMotion.SetVelAccDec(sys.AxisZ) = False Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1032017", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1032017))
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1044017", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1044017))
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1062017", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1062017))
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1069017", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1069017))
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If
                If gCMotion.SetVelAccDec(sys.AxisB) = False Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1034017", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1034017))
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1046017", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1046017))
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1064017", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1064017))
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1071017", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1071017))
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If

                '[Note]:若有切換Valve，則Z軸一定會先上升至Up位置，所以命令下了可以不用管汽缸到位了，最後才檢查
                If gSSystemParameter.MultiDispenseEnable = True Then
                    Call ValveCylinderAction(sys.StageNo, eValveWorkMode.Valve2, enmUpDown.Down, mValveCylStopWatch(sys.StageNo))
                Else
                    Call ValveCylinderAction(sys.StageNo, sys.SelectValve, enmUpDown.Down, mValveCylStopWatch(sys.StageNo))
                End If

                sys.SysNum = 1100

                '***************************************************************************************************************
                '****************************************************Tilt軸*****************************************************
                '***************************************************************************************************************
            Case 1100
                '[Note]:確認Tilt有無存在，存在則流程會增加Z軸上升-->Tilt旋轉
                If sys.AxisB <> -1 Then
                    gCMotion.GetCommandValue(sys.AxisB, mCommandPosB(sys.StageNo))
                    If mCommandPosB(sys.StageNo) = sys.DispParam.PosB Then
                        '[Note]:若角度相同，則Tilt不再做旋轉
                        sys.SysNum = 1600
                    Else
                        sys.SysNum = 1200
                    End If
                Else
                    sys.SysNum = 1600
                End If

            Case 1200
                '[Note]:先將Z軸升至安全位置
                'ReviseVelocity(sys.AxisZ, gSSystemParameter.Pos.TiltSafePosZ, gSSystemParameter.MaxCrossDeviceVelocity) 'Soni + 2017.08.23 修改速度為優化速度
                If gCMotion.AbsMove(sys.AxisZ, gSSystemParameter.Pos.TiltSafePosZ) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1032000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1032000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1044000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1044000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1062000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1062000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1069000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1069000), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If
                sys.SysNum = 1300

            Case 1300
                '[Note]:等待Table Stop
                mAxisZState(sys.StageNo) = gCMotion.MotionDone(sys.AxisZ)
                If mAxisZState(sys.StageNo) <> CommandStatus.Sucessed Then
                    If gCMotion.IsMoveTimeOut(sys.AxisZ) Then
                        Select Case sys.StageNo
                            Case 0
                                gEqpMsg.AddHistoryAlarm("Error_1032004", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1032004), eMessageLevel.Error)
                            Case 1
                                gEqpMsg.AddHistoryAlarm("Error_1044004", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1044004), eMessageLevel.Error)
                            Case 2
                                gEqpMsg.AddHistoryAlarm("Error_1062004", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1062004), eMessageLevel.Error)
                            Case 3
                                gEqpMsg.AddHistoryAlarm("Error_1069004", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1069004), eMessageLevel.Error)
                        End Select
                        sys.RunStatus = enmRunStatus.Alarm
                    End If
                    Exit Sub
                End If
                sys.SysNum = 1400

            Case 1400
                '[Note]:根據Recipe給的Tilt角度決定轉至該位置
                ReviseVelocity(sys.AxisB, sys.DispParam.PosB, gSSystemParameter.MaxCrossDeviceVelocity) 'Soni + 2017.08.23 修改速度為優化速度
                If gCMotion.AbsMove(sys.AxisB, sys.DispParam.PosB) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1034000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1034000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1046000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1046000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1064000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1064000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1071000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1071000), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If
                sys.SysNum = 1500

            Case 1500
                '[Note]:等待Table Stop
                mAxisBState(sys.StageNo) = gCMotion.MotionDone(sys.AxisB)
                If mAxisBState(sys.StageNo) <> CommandStatus.Sucessed Then
                    If gCMotion.IsMoveTimeOut(sys.AxisB) Then
                        Select Case sys.StageNo
                            Case 0
                                gEqpMsg.AddHistoryAlarm("Error_1034004", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1034004), eMessageLevel.Error)
                            Case 1
                                gEqpMsg.AddHistoryAlarm("Error_1046004", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1046004), eMessageLevel.Error)
                            Case 2
                                gEqpMsg.AddHistoryAlarm("Error_1064004", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1064004), eMessageLevel.Error)
                            Case 3
                                gEqpMsg.AddHistoryAlarm("Error_1071004", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1071004), eMessageLevel.Error)
                        End Select
                        sys.RunStatus = enmRunStatus.Alarm
                    End If
                    Exit Sub
                End If

                sys.SysNum = 1600
                '***************************************************************************************************************************

            Case 1600
                '[Note]:路徑串接(Motion)
                Call EditMotionPath(sys.DispParam, sys.DispPathRegister, mMotionDispPathRegister(sys.StageNo), mTriggerDispPathRegister(sys.StageNo), mMaxExtendDistance(sys.StageNo), mMaxBlendTime(sys.StageNo), mDotWeight(sys.StageNo), True, mCycleTime(sys.StageNo))
                '[Note]:將路徑轉成終端Motion要的資訊
                Call MotionPathCoversion(sys.DispParam.VelHigh, sys.DispParam.Acc, sys.DispParam.Dec, mMaxExtendDistance(sys.StageNo), mMaxBlendTime(sys.StageNo), mMotionDispPathRegister(sys.StageNo), gMotionPathList(sys.StageNo), m1stPath(sys.StageNo), mlastPath(sys.StageNo), mMaxDispenseSpeed(sys.StageNo))
                '[Note]:路徑數量檢察與保護
                'Call PathCheck(sys.DispParam.VelHigh, sys.DispParam.Acc, sys.DispParam.Dec, mMaxBlendTime(sys.StageNo), gMotionPathList(sys.StageNo))
                sys.SysNum = 1700

            Case 1700
                ''[說明]:載入移動-->移動到起始座標
                Dim mVelocity As Decimal = gCMotion.AxisParameter(sys.AxisX).Velocity.MaxVel

                If mGpSCurve = eCurveMode.SCurve Then
                    mAcc(sys.StageNo) = gCMotion.AxisParameter(sys.AxisX).Velocity.Acc * gCMotion.AxisParameter(sys.AxisX).Velocity.AccRatio * mSCurveRatio
                    mDec(sys.StageNo) = gCMotion.AxisParameter(sys.AxisX).Velocity.Dec * gCMotion.AxisParameter(sys.AxisX).Velocity.DecRatio * mSCurveRatio
                Else
                    mAcc(sys.StageNo) = gCMotion.AxisParameter(sys.AxisX).Velocity.Acc * gCMotion.AxisParameter(sys.AxisX).Velocity.AccRatio
                    mDec(sys.StageNo) = gCMotion.AxisParameter(sys.AxisX).Velocity.Dec * gCMotion.AxisParameter(sys.AxisX).Velocity.DecRatio
                End If


                With gCMotion.AxisParameter(sys.AxisX).Velocity
                    Dim mDeltaX As Decimal
                    Dim mDeltaY As Decimal
                    mDeltaX = m1stPath(sys.StageNo).PosX - gCMotion.GetPositionValue(sys.AxisX)
                    mDeltaY = m1stPath(sys.StageNo).PosY - gCMotion.GetPositionValue(sys.AxisY)

                    Dim mDistance As Decimal = Math.Sqrt(mDeltaX ^ 2 + mDeltaY ^ 2)

                    Premtek.CDispensingMath.GetCrossVelocity(gSSystemParameter.MaxCrossDeviceVelocity, mAcc(sys.StageNo), mDec(sys.StageNo), mDistance, 0, mVelocity)
                    'CDispensingMath.GetCrossVelocity(gSSystemParameter.MaxCrossDeviceVelocity, mAcc(sys.StageNo), mDec(sys.StageNo), mDistance, gSSystemParameter.CrossVerticalTime, mVelocity)
                    If mVelocity = 0 Then
                        mVelocity = gSSystemParameter.MaxCrossDeviceVelocity
                    End If
                    gCMotion.SyncParameter(sys.StageNo).TargetPos(0) = m1stPath(sys.StageNo).PosX
                    gCMotion.SyncParameter(sys.StageNo).TargetPos(1) = m1stPath(sys.StageNo).PosY
                    gCMotion.SyncParameter(sys.StageNo).TargetPos(2) = gCMotion.GetPositionValue(sys.AxisZ)
                    gCMotion.SyncParameter(sys.StageNo).Velocity.VelLow = 0

                    gCMotion.SyncParameter(sys.StageNo).Velocity.VelHigh = mVelocity
                    Debug.Print("抑振速度:" & mVelocity)
                    Debug.Print("平均加速度:" & mAcc(sys.StageNo) & "平均減速度:" & mDec(sys.StageNo))
                End With
                If gCMotion.GpSetVelLow(gCMotion.SyncParameter(sys.StageNo), 0) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1036014", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1036014), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1048014", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1048014), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1066014", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1066014), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1073014", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1073014), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If

                If gCMotion.GpSetVelHigh(gCMotion.SyncParameter(sys.StageNo), mVelocity) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1036013", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1036013), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1048013", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1048013), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1066013", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1066013), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1073013", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1073013), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If

                If gCMotion.GpSetAcc(gCMotion.SyncParameter(sys.StageNo), mAcc(sys.StageNo)) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1036011", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1036011), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1048011", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1048011), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1066011", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1066011), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1073011", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1073011), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If

                If gCMotion.GpSetDec(gCMotion.SyncParameter(sys.StageNo), mDec(sys.StageNo)) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1036012", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1036012), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1048012", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1048012), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1066012", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1066012), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1073012", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1073012), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If
                If gCMotion.GpSetCurve(gCMotion.SyncParameter(sys.StageNo), mGpSCurve) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1036010", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1036010), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1048010", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1048010), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1066010", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1066010), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1073010", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1073010), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If
                If gCMotion.GpMoveLinearAbsXYZ(gCMotion.SyncParameter(sys.StageNo)) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1036000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1036000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1048000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1048000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1066000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1066000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1073000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1073000), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If

                'gCMotion.SetCurve(sys.AxisX, eCurveMode.SCurve)
                'gCMotion.SetCurve(sys.AxisY, eCurveMode.SCurve)
                'If gCMotion.AbsMove(sys.AxisX, m1stPath(sys.StageNo).PosX) <> CommandStatus.Sucessed Then
                '    Select Case sys.StageNo
                '        Case 0
                '            gEqpMsg.AddHistoryAlarm("Error_1030000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1030000), eMessageLevel.Error)
                '        Case 1
                '            gEqpMsg.AddHistoryAlarm("Error_1042000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1042000), eMessageLevel.Error)
                '        Case 2
                '            gEqpMsg.AddHistoryAlarm("Error_1060000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1060000), eMessageLevel.Error)
                '        Case 3
                '            gEqpMsg.AddHistoryAlarm("Error_1067000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1067000), eMessageLevel.Error)
                '    End Select
                '    sys.RunStatus = enmRunStatus.Alarm
                '    Exit Sub
                'End If
                'ReviseVelocity(sys.AxisY, m1stPath(sys.StageNo).PosY, gSSystemParameter.MaxCrossDeviceVelocity) 'Soni + 2017.08.23 修改速度為優化速度
                'If gCMotion.AbsMove(sys.AxisY, m1stPath(sys.StageNo).PosY) <> CommandStatus.Sucessed Then
                '    Select Case sys.StageNo
                '        Case 0
                '            gEqpMsg.AddHistoryAlarm("Error_1031000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1031000), eMessageLevel.Error)
                '        Case 1
                '            gEqpMsg.AddHistoryAlarm("Error_1043000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1043000), eMessageLevel.Error)
                '        Case 2
                '            gEqpMsg.AddHistoryAlarm("Error_1061000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1061000), eMessageLevel.Error)
                '        Case 3
                '            gEqpMsg.AddHistoryAlarm("Error_1068000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1068000), eMessageLevel.Error)
                '    End Select
                '    sys.RunStatus = enmRunStatus.Alarm
                '    Exit Sub
                'End If
                sys.SysNum = 1800

            Case 1800
                '[Note]:路徑串接(Trigger Board)
                mTriggerDispPathIndex(sys.StageNo).Start = 0
                mTriggerDispPathIndex(sys.StageNo).Done = -1
                mDispType(sys.StageNo) = enmTriggerDispType.JetRecipe
                Call EstimateTriggerStep(mTriggerDispPathIndex(sys.StageNo).Start, mTriggerDispPathRegister(sys.StageNo), mTriggerDispPathIndex(sys.StageNo).Ending, mIsTransmissionResuming(sys.StageNo))
                Call EditTriggerPathByFCmd(sys.StageNo, sys.DispParam.Acc, sys.DispParam.Dec, sys.DispParam.VelHigh, mIsTransmissionResuming(sys.StageNo), mTriggerDispPathIndex(sys.StageNo).Start, mTriggerDispPathIndex(sys.StageNo).Ending, mDispType(sys.StageNo), mTriggerDispPathRegister(sys.StageNo), mDotWeight(sys.StageNo), mCycleTime(sys.StageNo), mDotCounts(sys.StageNo), mMulitDotsDispensingTime(sys.StageNo))
                sys.SysNum = 1900

            Case 1900
                '[Note]:(Step1.)Reset Alarm
                '               Check trigger board is ready before send command
                If IsTriggerBoardAlarm(sys.StageNo) = True Then
                    If IsTriggerBoardReady(sys.StageNo) = True Then
                        If gTriggerBoard.IsBusy(sys.StageNo) = False Then
                            If gTriggerBoard.SetResetAlarm(sys.StageNo, False) = True Then
                                sys.SysNum = 1950
                            End If
                        End If
                    End If
                Else
                    sys.SysNum = 2000
                End If

            Case 1950
                '[Note]:判斷資料接收完成了沒? & 是否 TimeOut
                If gTriggerBoard.IsBusy(sys.StageNo) = True Then
                    '[Note]:還在接收傳送資料中
                    If gTriggerBoard.IsTimeOut(sys.StageNo) = True Then
                        '[Note]:超過時間還沒處裡完-->在下一次
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Trigger Board Reset Alarm Command Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016001", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016001), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016101", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016101), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016201", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016201), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016301", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016301), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 1900
                        End If
                    End If
                Else
                    '[Note]:檢查接收資料
                    If gTriggerBoard.ResetAlarm(sys.StageNo).Status = True Then
                        mTriggerCmdFailCount(sys.StageNo) = 0
                        sys.SysNum = 2000
                    Else
                        '[Note]:查看收到的內容是????
                        Debug.Print("ResetAlarm: " & gTriggerBoard.ResetAlarm(sys.StageNo).STR)
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Trigger Board Reset Alarm Command Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016001", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016001), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016101", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016101), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016201", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016201), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016301", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016301), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 1900
                        End If
                    End If
                End If

            Case 2000
                '[Note]:(Step2.)Vavle Power On
                '               Check trigger board is ready before send command
                If IsTriggerBoardReady(sys.StageNo) = True Then
                    If gTriggerBoard.IsBusy(sys.StageNo) = False Then
                        If sys.IsMultiDispense = True Then
                            If gTriggerBoard.SetValvePower(sys.StageNo, eValveWorkMode.MultiValve, True) = True Then
                                sys.SysNum = 2050
                            End If
                        Else
                            If gTriggerBoard.SetValvePower(sys.StageNo, sys.SelectValve, True) = True Then
                                sys.SysNum = 2050
                            End If
                        End If
                    End If
                End If

            Case 2050
                '[Note]:判斷資料接收完成了沒? & 是否 TimeOut
                If gTriggerBoard.IsBusy(sys.StageNo) = True Then
                    '[Note]:還在接收傳送資料中
                    If gTriggerBoard.IsTimeOut(sys.StageNo) = True Then
                        '[Note]:超過時間還沒處裡完-->在下一次
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Trigger Board Set Valve Power Command Fail)_20170508
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016000), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016100", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016100), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016200", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016200), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016300", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016300), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 2000
                        End If
                    End If
                Else
                    '[Note]:檢查接收資料
                    If gTriggerBoard.Parameter(sys.StageNo).Status = True Then
                        mTriggerCmdFailCount(sys.StageNo) = 0
                        sys.SysNum = 2100
                    Else
                        '[Note]:查看收到的內容是????
                        Debug.Print("SetValvePower: " & gTriggerBoard.Parameter(sys.StageNo).STR)
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Trigger Board Reset Alarm Command Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016001", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016001), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016101", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016101), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016201", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016201), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016301", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016301), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 2000
                        End If
                    End If
                End If

            Case 2100
                '[Note]:判斷是否需要傳送Trigger cmd
                If IsPassTriggerCmd(mTriggerDispPathIndex(sys.StageNo).Start, mDispType(sys.StageNo), mTriggerDispPathRegister(sys.StageNo), mDotWeight(sys.StageNo), sys.IsNeedSendCmd, mTriggerPathMenory(sys.StageNo), gIsOnPurge(sys.StageNo)) = True Then
                    '[Note]:已完成了
                    mTriggerDispPathIndex(sys.StageNo).Done = mTriggerDispPathIndex(sys.StageNo).Ending
                    sys.SysNum = 3100
                Else
                    sys.SysNum = 2200
                End If

            Case 2200
                '[Note]:取出valve parameter
                If gJetValveDB.ContainsKey(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve)) = True Then
                    mTiggerDelayTime(sys.StageNo) = GetTriggerDelayTime(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve))
                    Call EstimateMeasurePitchLength(mMaxDispenseSpeed(sys.StageNo), mTiggerDelayTime(sys.StageNo), mMeasurePitch(sys.StageNo), mMeasureLength(sys.StageNo))
                    With mTriggerGCmdParameter(sys.StageNo)
                        .HeadNo = sys.SelectValve
                        .PulseTime = GetTriggerPulseTime(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve))
                        .JetTime = GetTriggerJetTime(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve))
                        .Stroke = GetTriggerStorke(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve))
                        .OpenTime = GetTriggerOpenTime(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve))
                        .CloseTime = GetTriggerCloseTime(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve))
                        .GluePressure = gCRecipe.StageParts(sys.StageNo).SyringePressure(sys.SelectValve)
                        .Tolerance = mMeasureLength(sys.StageNo)
                        .MeasureLength = mMeasureLength(sys.StageNo)
                        .MeasurePitch = mMeasurePitch(sys.StageNo)
                        '[Note]Non-history mode measure counts為 0
                        '          History mode measure counts不為0
                        .MeasureCounts = 0
                        .CloseVoltage = GetTriggerCloseVoltage(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve))
                        .JetPressure = GetTriggerJetPressure(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve))
                        '[Note]:ms-->us
                        .CycleTime = GetTriggerCycleTime(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve))
                    End With
                Else
                    '[Note]:若有表示資料異常，待查
                    'TODO:異常訊息(Jet valve DataBase Fail)
                    gEqpMsg.AddHistoryAlarm("Error_1019003", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019003), eMessageLevel.Error)
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If

                '[Note]:多閥同動點膠，G Cmd各個Valve都要丟，ValveNo1-->ValveNo2
                '       若多閥同動點膠，則一定是使用第一閥
                If sys.IsMultiDispense = True Then
                    mHeadNo(sys.StageNo) = eValveWorkMode.Valve1
                    mTriggerGCmdParameter(sys.StageNo).HeadNo = mHeadNo(sys.StageNo)
                End If
                mTriggerCmdFailCount(sys.StageNo) = 0
                sys.SysNum = 2300

            Case 2300
                '[Note]:(Step3.)Send G Cmd
                '               Check trigger board is ready before send command
                If IsTriggerBoardReady(sys.StageNo) = True Then
                    If gTriggerBoard.IsBusy(sys.StageNo) = False Then
                        If gTriggerBoard.SetJetParameter(sys.StageNo, mTriggerGCmdParameter(sys.StageNo), False) = True Then
                            sys.SysNum = 2400
                        End If
                    End If
                End If

            Case 2400
                '[Note]:判斷資料接收完成了沒? & 是否 TimeOut
                If gTriggerBoard.IsBusy(sys.StageNo) = True Then
                    '[Note]:還在接收傳送資料中
                    If gTriggerBoard.IsTimeOut(sys.StageNo) = True Then
                        '[Note]:超過時間還沒處裡完-->在下一次
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Trigger Board Set Jet Parameter Command Fail)_20170508
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1016003", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016003), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1016103", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016103), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1016203", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016203), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1016303", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016303), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 2300
                        End If
                    End If
                Else
                    '[Note]:檢查接收資料
                    If gTriggerBoard.JetParameter(sys.StageNo).Status = True Then
                        mTriggerCmdFailCount(sys.StageNo) = 0
                        sys.SysNum = 2450
                    Else
                        '[Note]:查看收到的內容是????
                        Debug.Print("JetParameter(G Cmd): " & gTriggerBoard.JetParameter(sys.StageNo).STR)
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Trigger Board Set Jet Parameter Command Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1016003", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016003), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1016103", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016103), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1016203", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016203), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1016303", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016303), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 2300
                        End If
                    End If
                End If


            Case 2450
                '[Note]:取出valve parameter
                If sys.IsMultiDispense = True Then
                    '[Note]:更換G cmd 
                    If gSSystemParameter.StageUseValveCount - 1 = mHeadNo(sys.StageNo) Then
                        '[Note]:All of Valve G cmd  updated
                        sys.SysNum = 2500
                    Else
                        mHeadNo(sys.StageNo) = mHeadNo(sys.StageNo) + 1
                        If gJetValveDB.ContainsKey(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(mHeadNo(sys.StageNo))) = True Then
                            With mTriggerGCmdParameter(sys.StageNo)
                                .HeadNo = mHeadNo(sys.StageNo)
                                .PulseTime = GetTriggerPulseTime(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(mHeadNo(sys.StageNo)))
                                .JetTime = GetTriggerJetTime(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(mHeadNo(sys.StageNo)))
                                .Stroke = GetTriggerStorke(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(mHeadNo(sys.StageNo)))
                                .OpenTime = GetTriggerOpenTime(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(mHeadNo(sys.StageNo)))
                                .CloseTime = GetTriggerCloseTime(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(mHeadNo(sys.StageNo)))
                                .GluePressure = gCRecipe.StageParts(sys.StageNo).SyringePressure(mHeadNo(sys.StageNo))
                                .CloseVoltage = GetTriggerCloseVoltage(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve))
                                .JetPressure = GetTriggerJetPressure(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve))
                                '[Note]:ms-->us
                                .CycleTime = GetTriggerCycleTime(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(eValveWorkMode.Valve1)) 'Soni / 2017.09.01 sys.SelectValve ->eValveWorkMode.Valve1 雙閥同動使用閥1的Cycle Time.
                            End With
                        Else
                            '[Note]:若有表示資料異常，待查
                            'TODO:異常訊息(Jet valve DataBase Fail)
                            gEqpMsg.AddHistoryAlarm("Error_1019003", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019003), eMessageLevel.Error)
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        End If
                        sys.SysNum = 2300
                    End If
                Else
                    sys.SysNum = 2500
                End If

            Case 2500
                '[Note]:(Step4.)Send F Cmd
                '               Check trigger board is ready before send command
                If IsTriggerBoardReady(sys.StageNo) = True Then
                    If gTriggerBoard.IsBusy(sys.StageNo) = False Then
                        If gTriggerBoard.SetJetRecipe(sys.StageNo, False) = True Then
                            '[Note]:已完成了
                            mTriggerDispPathIndex(sys.StageNo).Done = mTriggerDispPathIndex(sys.StageNo).Ending
                            '[Note]:下個從哪裡開始做
                            mTriggerDispPathIndex(sys.StageNo).Start = mTriggerDispPathIndex(sys.StageNo).Ending + 1
                            sys.SysNum = 2600
                        End If
                    End If
                End If

            Case 2600
                '[Note]:判斷資料接收完成了沒? & 是否 TimeOut
                If gTriggerBoard.IsBusy(sys.StageNo) = True Then
                    '[Note]:還在接收傳送資料中
                    If gTriggerBoard.IsTimeOut(sys.StageNo) = True Then
                        '[Note]:超過時間還沒處裡完-->在下一次
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Trigger Board Set Jet Recipe Command Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1016003", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016003), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1016103", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016103), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1016203", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016203), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1016303", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016303), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 2500
                        End If
                    End If
                Else
                    '[Note]:檢查接收資料
                    If gTriggerBoard.JetRecipe(sys.StageNo).Status = True Then
                        mTriggerCmdFailCount(sys.StageNo) = 0
                        sys.SysNum = 2700
                    Else
                        '[Note]:查看收到的內容是????
                        Debug.Print("JetRecipe(F Cmd): " & gTriggerBoard.JetRecipe(sys.StageNo).STR)
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Trigger Board Set Jet Recipe Command Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1016003", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016003), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1016103", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016103), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1016203", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016203), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1016303", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016303), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 2500
                        End If
                    End If
                End If

            Case 2700
                '[Note]:(Step5.)Send D Cmd
                '               Check trigger board is ready before send command
                If IsTriggerBoardReady(sys.StageNo) = True Then
                    If gTriggerBoard.IsBusy(sys.StageNo) = False Then
                        mDispType(sys.StageNo) = enmTriggerDispType.JetRecipe
                        If gTriggerBoard.SetDummyRun(sys.StageNo, mDispType(sys.StageNo), sys.SelectValve, 0, False) = True Then
                            sys.SysNum = 2800
                        End If
                    End If
                End If

            Case 2800
                '[Note]:判斷資料接收完成了沒? & 是否 TimeOut
                If gTriggerBoard.IsBusy(sys.StageNo) = True Then
                    '[Note]:還在接收傳送資料中
                    If gTriggerBoard.IsTimeOut(sys.StageNo) = True Then
                        '[Note]:超過時間還沒處裡完-->在下一次
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Trigger Board Set Dummy Run Command Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1016003", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016003), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1016103", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016103), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1016203", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016203), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1016303", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016303), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 2700
                        End If
                    End If
                Else
                    '[Note]:檢查接收資料
                    If gTriggerBoard.DummyRun(sys.StageNo).Status = True Then
                        mTriggerCmdFailCount(sys.StageNo) = 0
                        sys.SysNum = 2900
                    Else
                        '[Note]:查看收到的內容是????
                        Debug.Print("DummyRun(D Cmd): " & gTriggerBoard.DummyRun(sys.StageNo).STR)
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Trigger Board Set Dummy Run Command Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1016003", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016003), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1016103", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016103), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1016203", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016203), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1016303", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016303), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 2700
                        End If
                    End If
                End If

            Case 2900
                '[Note]:(Step6.)Send X Cmd
                If IsTriggerBoardReady(sys.StageNo) = True Then
                    If gTriggerBoard.IsBusy(sys.StageNo) = False Then
                        mDispType(sys.StageNo) = enmTriggerDispType.JetRecipe
                        If sys.IsMultiDispense = True Then
                            If gTriggerBoard.SetDispenseRun(sys.StageNo, mDispType(sys.StageNo), eValveWorkMode.MultiValve, 0, 0, False) = True Then
                                sys.SysNum = 3000
                            End If
                        Else
                            If gTriggerBoard.SetDispenseRun(sys.StageNo, mDispType(sys.StageNo), sys.SelectValve, 0, 0, False) = True Then
                                sys.SysNum = 3000
                            End If
                        End If
                    End If
                End If

            Case 3000
                '[Note]:判斷資料接收完成了沒? & 是否 TimeOut
                If gTriggerBoard.IsBusy(sys.StageNo) = True Then
                    '[Note]:還在接收傳送資料中
                    If gTriggerBoard.IsTimeOut(sys.StageNo) = True Then
                        '[Note]:超過時間還沒處裡完-->在下一次
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Trigger Board Set Dispense Run Command Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1016003", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016003), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1016103", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016103), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1016203", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016203), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1016303", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016303), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 2900
                        End If
                    End If
                Else
                    '[Note]:檢查接收資料
                    If gTriggerBoard.DispenseRun(sys.StageNo).Status = True Then
                        mTriggerCmdFailCount(sys.StageNo) = 0

                        ' Debug.Print("Computer Time(EditTriggerPath-->Trigger Board Cmd End): " & mComputerStopWatch(sys.StageNo).ElapsedMilliseconds)

                        sys.SysNum = 3100
                    Else
                        '[Note]:查看收到的內容是????
                        Debug.Print("DispenseRun(X Cmd): " & gTriggerBoard.DispenseRun(sys.StageNo).STR)
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Trigger Board Set Dispense Run Command Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1016003", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016003), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1016103", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016103), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1016203", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016203), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1016303", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016303), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 2900
                        End If
                    End If
                End If

            Case 3100
                If gCMotion.GpMoveDone(gCMotion.SyncParameter(sys.StageNo)) = CommandStatus.Sucessed Then
                    sys.SysNum = 3150
                End If
                'If gCMotion.MotionDone(sys.AxisX) = CommandStatus.Sucessed And gCMotion.MotionDone(sys.AxisY) = CommandStatus.Sucessed Then
                '    sys.SysNum = 3150
                'End If

            Case 3150
                '[Note]:檢查汽缸Sensor &汽缸動作是否逾時
                Dim mValve As eValveWorkMode = sys.SelectValve
                If gSSystemParameter.MultiDispenseEnable = True Then
                    mValve = eValveWorkMode.Valve2
                End If
                If ValveCylinderSensor(sys.StageNo, mValve, enmUpDown.Down) = True Then
                    sys.SysNum = 3200
                Else
                    If IsTimeOut(mValveCylStopWatch(sys.StageNo), gSSystemParameter.TimeOut2) = True Then
                        'TODO:Valve汽缸做動逾時
                        gEqpMsg.AddHistoryAlarm("Alarm_2004001", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2004001), eMessageLevel.Alarm)
                        sys.RunStatus = enmRunStatus.Alarm
                        Exit Sub
                    End If
                End If

            Case 3200
                '[Note]:Z軸下降速度、加速度、Settling Time、Valve On Time
                If GetPreDispenseParameter(m1stPath(sys.StageNo).ParameterType, m1stPath(sys.StageNo).ParameterName, mCycleTime(sys.StageNo), mVelHigh(sys.StageNo), mAcc(sys.StageNo), mSettlingTime(sys.StageNo), mValveOnTime(sys.StageNo)) = True Then
                    If GetPostDispenseParameter(mlastPath(sys.StageNo).ParameterType, mlastPath(sys.StageNo).ParameterName, mRetractVelocity(sys.StageNo), mRetractAcc(sys.StageNo), mRetractDistnace(sys.StageNo), mDwellTime(sys.StageNo)) = True Then
                        If gCMotion.SetVelAccDec(sys.AxisZ, 0, mVelHigh(sys.StageNo), mAcc(sys.StageNo), mAcc(sys.StageNo)) = True Then
                            sys.SysNum = 3300
                        Else
                            '增加Alarm 訊息
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1032017", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1032017), eMessageLevel.Error)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1044017", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1044017), eMessageLevel.Error)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1062017", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1062017), eMessageLevel.Error)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1069017", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1069017), eMessageLevel.Error)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                        End If
                    Else
                        '增加Alarm 訊息
                        gEqpMsg.AddHistoryAlarm("Error_1002010", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1002010), eMessageLevel.Alarm)
                        sys.RunStatus = enmRunStatus.Alarm
                        Exit Sub
                    End If
                Else '增加Alarm 訊息
                    gEqpMsg.AddHistoryAlarm("Error_1002010", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1002010), eMessageLevel.Alarm)
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If

            Case 3300
                '[Note]:Z軸下降
                ' ReviseVelocity(sys.AxisZ, m1stPath(sys.StageNo).PosZ, gSSystemParameter.MaxCrossDeviceVelocity) 'Soni + 2017.08.23 修改速度為優化速度
                If gCMotion.AbsMove(sys.AxisZ, m1stPath(sys.StageNo).PosZ) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1032000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1032000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1044000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1044000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1062000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1062000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1069000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1069000), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                Else
                    sys.SysNum = 3400
                End If

            Case 3400
                '[Note]:Need to check motion done & 將路徑塞給軸卡
                If gCMotion.MotionDone(sys.AxisX) = CommandStatus.Sucessed And gCMotion.MotionDone(sys.AxisY) = CommandStatus.Sucessed And gCMotion.MotionDone(sys.AxisZ) = CommandStatus.Sucessed Then
                    mSettlingStopWatch(sys.StageNo).Restart()

                    If SendPathToMotion(sys.StageNo, gMotionPathList(sys.StageNo), mMaxExtendDistance(sys.StageNo), mMaxBlendTime(sys.StageNo)) = True Then
                        sys.SysNum = 3500
                    Else
                        'TODO:異常訊息(路徑串接異常)
                        gEqpMsg.AddHistoryAlarm("Error_1000012", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1000012), eMessageLevel.Error)
                        sys.RunStatus = enmRunStatus.Alarm
                        Exit Sub
                    End If
                End If

            Case 3500
                '[Note]:Settling Time 
                If mSettlingStopWatch(sys.StageNo).ElapsedMilliseconds > mSettlingTime(sys.StageNo) Then
                    sys.SysNum = 4000
                End If

            Case 4000
                sys.IsCanPause = False
                Select Case sys.DispParam.ProcessTimeType
                    Case eProcessTimeType.None
                        sys.SysNum = 4100

                    Case eProcessTimeType.ReturnTime
                        'If sys.DispParam.RoundNo > 0 Then
                        '    '[Note]:紀錄前一Round完成時間~準備進入移動  這段時間差-->此即為運算的時間
                        '    '       紀錄的是進入這一輪的運算時間，所以不會有第一輪的計算時間，況且也不需要第一輪的計算時間
                        '    '       因為時間等待的是進入上一輪開始點到進入該輪的時間差，需要的是上一輪開始點~~進入這一輪且算完後準備點膠的這段時間

                        '    '[Note]:修改的是上一輪的資料(所以要-1)
                        '    'mDispTimeForRound(sys.StageNo) = mDispTimeForRoundList(sys.StageNo).Item(sys.DispParam.RoundNo - 1)
                        '    'mDispTimeForRound(sys.StageNo).NextRoundComputeTime = CDec(mProcessStopWatch(sys.StageNo).ElapsedMilliseconds - mDispFrontRoundTime(sys.StageNo))

                        '    ''[Note]:先去掉舊的，再把新的加上去
                        '    'mDispTimeForRoundList(sys.StageNo).RemoveAt(sys.DispParam.RoundNo - 1)
                        '    'mDispTimeForRoundList(sys.StageNo).Insert(sys.DispParam.RoundNo - 1, mDispTimeForRound(sys.StageNo))
                        '    'Debug.Print("( " & sys.StageNo & " ) Go Back To Start Pos): " & CDec(mProcessStopWatch(sys.StageNo).ElapsedMilliseconds - mDispFrontRoundTime(sys.StageNo)))
                        'End If
                        sys.SysNum = 4100

                    Case eProcessTimeType.NextRoundDelayTime
                        If sys.DispParam.RoundNo > 0 Then
                            '[Note]:DelayNextRoundTime，上一Round完成後，等待一段時間進入下一Round
                            '第一個Die 才需要delay TIME
                            If (sys.DispParam.DispDieType = enmDispMultiDie.SingleDie And sys.DispParam.SingleDieParam.DieIndex = 0) Or (sys.DispParam.DispDieType = enmDispMultiDie.MultiDie And sys.DispParam.MulitDieParam.Start = 0) Then
                                If mNextRoundDelayTime(sys.StageNo).ElapsedMilliseconds > (sys.DispParam.Pattern.Round(sys.DispParam.RoundNo - 1).ProcessTime * 1000) Then
                                    mNextRoundDelayTime(sys.StageNo).Stop()
                                    sys.SysNum = 4100
                                End If
                            Else
                                sys.SysNum = 4100
                            End If
                        Else
                            sys.SysNum = 4100
                        End If

                End Select

            Case 4100
                '[Note]:(Step7.)Dispenesing Trigger On
                If gMotionPathList(sys.StageNo).Count = 0 Then
                    mProcessStopWatch(sys.StageNo).Restart()
                    mWaitStopWatch(sys.StageNo).Restart()
                    '[Note]:Trigger Board Trigger On 切  Trigger Off需要超過TriggerBoard MCU一個Cycle的時間(這問題只會發生在打單點之情況)
                    '20171001
                    If gSSystemParameter.EnableDryRun = True Then
                    ElseIf gSSystemParameter.EnableDryRun = False Then
                        Call SetDispensingTrigger(sys.StageNo, sys.SelectValve, enmONOFF.eON)
                    End If
                    mTriggerIOStopWatch(sys.StageNo).Restart()
                    sys.SysNum = 4500
                Else
                    If sys.DispParam.RoundNo = 0 Then
                        '20171001
                        If gSSystemParameter.EnableDryRun = True Then
                        ElseIf gSSystemParameter.EnableDryRun = False Then
                            Call SetDispensingTrigger(sys.StageNo, sys.SelectValve, enmONOFF.eON)
                        End If
                        mTriggerIOStopWatch(sys.StageNo).Restart()
                        sys.SysNum = 4200

                    Else
                        If sys.DispParam.ProcessTimeType = eProcessTimeType.ReturnTime Then
                            If mProcessStopWatch(sys.StageNo).ElapsedMilliseconds > mLastRoundProcessTime(sys.StageNo) Then
                                'Debug.Print("( " & sys.StageNo & " )Round Process Time: " & mProcessStopWatch(sys.StageNo).ElapsedMilliseconds)
                                '20171001
                                If gSSystemParameter.EnableDryRun = True Then
                                ElseIf gSSystemParameter.EnableDryRun = False Then
                                    Call SetDispensingTrigger(sys.StageNo, sys.SelectValve, enmONOFF.eON)
                                End If
                                mTriggerIOStopWatch(sys.StageNo).Restart()
                                sys.SysNum = 4200

                            End If
                        Else
                            '20171001
                            If gSSystemParameter.EnableDryRun = True Then
                            ElseIf gSSystemParameter.EnableDryRun = False Then
                                Call SetDispensingTrigger(sys.StageNo, sys.SelectValve, enmONOFF.eON)
                            End If
                            mTriggerIOStopWatch(sys.StageNo).Restart()
                            sys.SysNum = 4200

                        End If
                    End If
                End If


            Case 4200
                '[Note]:(Step8.)畫膠移動
                If gCMotion.GpMoving(gCMotion.SyncParameter(sys.StageNo)) <> CommandStatus.Sucessed Then
                    'TODO:異常訊息(路徑移動異常)
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1036000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1036000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1048000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1048000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1066000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1066000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1073000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1073000), eMessageLevel.Error)
                    End Select

                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                Else

                    mProcessStopWatch(sys.StageNo).Restart()
                    sys.SysNum = 5000
                End If

            Case 4500
                '[Note]:特別流程(完全不走群組移動)、Dot專用
                If mWaitStopWatch(sys.StageNo).ElapsedMilliseconds > (mValveOnTime(sys.StageNo) + mMulitDotsDispensingTime(sys.StageNo) + gSSystemParameter.StableTime.TriggerBoardIOStableTime) Then
                    '[Note]:Trigger Board Trigger On 切  Trigger Off需要超過TriggerBoard MCU一個Cycle的時間
                    ' If mTriggerIOStopWatch(sys.StageNo).ElapsedMilliseconds > gSSystemParameter.StableTime.TriggerBoardIOStableTime Then
                    '[Note]:Dispenesing Trigger Off
                    'sys.IsCanPause = True
                    Call SetDispensingTrigger(sys.StageNo, sys.SelectValve, enmONOFF.eOff)
                    mTriggerIOStopWatch(sys.StageNo).Restart()
                    mWaitStopWatch(sys.StageNo).Restart()
                    'Debug.Print("( " & sys.StageNo & " ) Computer Time(GpMove-->GpMoveDone): " & mProcessStopWatch(sys.StageNo).ElapsedMilliseconds)
                    sys.SysNum = 6100
                    'End If
                End If

            Case 5000
                '[Note]:判斷已經將所有Trigger路徑資料
                '[Note]:判斷已經做完此Round的所有DispList
                If mTriggerDispPathIndex(sys.StageNo).Done = mTriggerDispPathRegister(sys.StageNo).Count - 1 Then
                    '[Note]:全部都丟完了
                    sys.SysNum = 6000
                    'mSettlingStopWatch(sys.StageNo).Restart()
                    ' sys.SysNum = 5300
                Else
                    '[Note]:路徑串接(Trigger Board)-->f Cmd
                    mDispType(sys.StageNo) = enmTriggerDispType.JetRecipe
                    Call EstimateTriggerStep(mTriggerDispPathIndex(sys.StageNo).Start, mTriggerDispPathRegister(sys.StageNo), mTriggerDispPathIndex(sys.StageNo).Ending, mIsTransmissionResuming(sys.StageNo))
                    Call EditTriggerPathByFCmd(sys.StageNo, sys.DispParam.Acc, sys.DispParam.Dec, sys.DispParam.VelHigh, mIsTransmissionResuming(sys.StageNo), mTriggerDispPathIndex(sys.StageNo).Start, mTriggerDispPathIndex(sys.StageNo).Ending, mDispType(sys.StageNo), mTriggerDispPathRegister(sys.StageNo), mDotWeight(sys.StageNo), mCycleTime(sys.StageNo), , mMulitDotsDispensingTime(sys.StageNo))
                    sys.SysNum = 5100
                End If

            Case 5100
                '[Note]:(Step9.)Send f Cmd(資料續傳)
                '               Check Trigger Board I/O is Busy
                If IsTriggerBoardReady(sys.StageNo) = True Then
                    If gTriggerBoard.IsBusy(sys.StageNo) = False Then
                        If gTriggerBoard.SetJetRecipeByTransmissionResuming(sys.StageNo, False) = True Then
                            '[Note]:已完成了
                            mTriggerDispPathIndex(sys.StageNo).Done = mTriggerDispPathIndex(sys.StageNo).Ending
                            '[Note]:下個從哪裡開始做
                            mTriggerDispPathIndex(sys.StageNo).Start = mTriggerDispPathIndex(sys.StageNo).Ending + 1
                            mTransmissionResumingStopWatch(sys.StageNo).Restart()
                            sys.SysNum = 5200
                        End If
                    End If
                End If

            Case 5200
                If mTransmissionResumingStopWatch(sys.StageNo).ElapsedMilliseconds > mTransmissionResumingTime Then
                    mTransmissionResumingStopWatch(sys.StageNo).Stop()
                    sys.SysNum = 5000
                End If

            Case 5300
                '[Note]:Settling Time 
                If mSettlingStopWatch(sys.StageNo).ElapsedMilliseconds > mSettlingTime(sys.StageNo) Then
                    sys.SysNum = 6000
                End If

            Case 6000
                '[Note]:(Step10.)等待劃膠移動停止
                sys.IsCanPause = False
                If gCMotion.GpMoveDone(gCMotion.SyncParameter(sys.StageNo)) = CommandStatus.Sucessed Then
                    '[Note]:Dispenesing Trigger Off

                    Call SetDispensingTrigger(sys.StageNo, sys.SelectValve, enmONOFF.eOff)
                    mTriggerIOStopWatch(sys.StageNo).Restart()
                    mWaitStopWatch(sys.StageNo).Restart()
                    'Debug.Print("( " & sys.StageNo & " ) Computer Time(GpMove-->GpMoveDone): " & mProcessStopWatch(sys.StageNo).ElapsedMilliseconds)
                    Select Case sys.DispParam.DispDieType
                        Case enmDispMultiDie.MultiDie
                            'MultiDie 先判斷是不是到最後一個Path
                            If sys.DispParam.MulitDieParam.Ending >= sys.DispParam.DispList.Count - 1 Then
                                sys.SysNum = 6100
                            Else
                                '還沒到最後一筆，跳過Retract動作
                                sys.SysNum = 6400
                            End If

                        Case enmDispMultiDie.SingleDie
                            sys.SysNum = 6100
                    End Select

                  

                End If
                Dim CmdX As Decimal, CmdY As Decimal, posX As Decimal, posY As Decimal
                gCMotion.GetCommandValue(sys.AxisX, CmdX)
                gCMotion.GetCommandValue(sys.AxisY, CmdY)
                posX = gCMotion.GetPositionValue(sys.AxisX)
                posY = gCMotion.GetPositionValue(sys.AxisY)
                ' Debug.Print("命令X(" & CmdX & "/回授X" & posX & ")命令Y(" & CmdY & "/回授Y" & posY & ")")
            Case 6100
                '[Note]:完成點膠後，Z軸上台的時間與等待時間
                If mWaitStopWatch(sys.StageNo).ElapsedMilliseconds > mDwellTime(sys.StageNo) Then
                    mWaitStopWatch(sys.StageNo).Stop()
                    '[Note]:Retract
                    If mRetractDistnace(sys.StageNo) = 0 Then
                        sys.SysNum = 6400
                    Else
                        mRetractPosZ(sys.StageNo) = CDec(gCMotion.GetPositionValue(sys.AxisZ)) + mRetractDistnace(sys.StageNo)
                        If gCMotion.SetVelAccDec(sys.AxisZ, 0, mRetractVelocity(sys.StageNo), mRetractAcc(sys.StageNo), mRetractAcc(sys.StageNo)) = True Then
                            sys.SysNum = 6200
                        End If
                    End If
                End If

            Case 6200
                '[Note]:Retract
                'ReviseVelocity(sys.AxisZ, mRetractPosZ(sys.StageNo), gSSystemParameter.MaxCrossDeviceVelocity) 'Soni + 2017.08.23 修改速度為優化速度
                If gCMotion.AbsMove(sys.AxisZ, mRetractPosZ(sys.StageNo)) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1032000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1032000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1044000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1044000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1062000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1062000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1069000", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1069000), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                Else
                    sys.SysNum = 6300
                End If

            Case 6300
                '[Note]:等待到位
                If gCMotion.MotionDone(sys.AxisZ) = CommandStatus.Sucessed Then
                    sys.SysNum = 6400
                End If

            Case 6400
                '[Note]:開始記錄到一Round開始的點膠時間
                If sys.DispParam.RoundNo <> sys.DispParam.Pattern.Round.Count - 1 Then
                    mNextRoundDelayTime(sys.StageNo).Restart()
                End If

                '[Note]:等待Trigger I/O訊號反應時間
                If mTriggerIOStopWatch(sys.StageNo).ElapsedMilliseconds > mTriggerIOTime Then
                    mTriggerIOStopWatch(sys.StageNo).Stop()
                    '[Note]:更新打點數量
                    '       打點數量改成抓預期要打的數量，非實際打的數量，藉此少掉通訊所耗掉的時間
                    'mDotCounts(sys.StageNo) = CInt(gTriggerBoard.DotCounts(sys.StageNo).Value)
                    gSSystemParameter.StageParts.PasteLifeTime(sys.StageNo).DotsCount(sys.SelectValve) = gSSystemParameter.StageParts.PasteLifeTime(sys.StageNo).DotsCount(sys.SelectValve) + mDotCounts(sys.StageNo)
                    sys.SysNum = 6500
                End If

            Case 6500
                '[Note]:檢查中途有無資料傳送異常
                If IsTriggerBoardAlarm(sys.StageNo) = True Then
                    '[Note]:資料有問題
                    Dim mErrorCode As String
                    mErrorCode = ""
                    If gTriggerBoard.GetErrorCode(sys.StageNo, True, mErrorCode) = True Then

                    End If
                    'TODO:異常訊息(Trigger Board Alarm)
                    Dim errorCodeTrigger As String
                    errorCodeTrigger = ""
                    errorCodeTrigger = trigger_error(sys.StageNo, mErrorCode)

                    gEqpMsg.AddHistoryAlarm("Alarm_" & errorCodeTrigger, "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(errorCodeTrigger), eMessageLevel.Alarm)
                    sys.RunStatus = enmRunStatus.Alarm

                    '[Note]:點膠異常，只要異常，該次作業的都視為異常
                    If mDispensingList(sys.StageNo).Count <> 0 Then
                        For mI(sys.StageNo) = 0 To mDispensingList(sys.StageNo).Count - 1
                            'gStageMap(sys.StageNo).Node(mDispensingList(sys.StageNo)(mI(sys.StageNo)).NodeName).Round(mDispensingList(sys.StageNo)(mI(sys.StageNo)).RoundNo).DispensingStatus(mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexX, mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexY) = eDispensingStatus.Fail
                            'Eason 20170302 Ticket:100090 , System Update Crash
                            gStageMap(sys.StageNo).Node(mDispensingList(sys.StageNo)(mI(sys.StageNo)).NodeName).Round(mDispensingList(sys.StageNo)(mI(sys.StageNo)).RoundNo).SetDispensingStatus(mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexX, mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexY, eDispensingStatus.Fail)
                            Call WriteDieStatusForMappingData("GG", eDataType.eDispensing, sys.StageNo, mDispensingList(sys.StageNo)(mI(sys.StageNo)).NodeName, mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexX, mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexY, eDispensingStatus.Fail)
                        Next
                    End If
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                Else
                    sys.SysNum = 6600
                End If

            Case 6600
                '[Note]:檢查路徑狀態
                Dim mRemainCount As Long
                If gCMotion.GpGetPathStatus(gCMotion.SyncParameter(sys.StageNo), mRemainCount) = CommandStatus.Sucessed Then
                    sys.SysNum = 9000
                Else
                    'TODO:異常訊息(路徑狀態異常)
                    gEqpMsg.AddHistoryAlarm("Error_1000012", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1000012), eMessageLevel.Alarm)

                    '[Note]:點膠異常，只要異常，該次作業的都視為異常
                    If mDispensingList(sys.StageNo).Count <> 0 Then
                        For mI(sys.StageNo) = 0 To mDispensingList(sys.StageNo).Count - 1
                            'gStageMap(sys.StageNo).Node(mDispensingList(sys.StageNo)(mI(sys.StageNo)).NodeName).Round(mDispensingList(sys.StageNo)(mI(sys.StageNo)).RoundNo).DispensingStatus(mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexX, mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexY) = eDispensingStatus.Fail
                            'Eason 20170302 Ticket:100090 , System Update Crash
                            gStageMap(sys.StageNo).Node(mDispensingList(sys.StageNo)(mI(sys.StageNo)).NodeName).Round(mDispensingList(sys.StageNo)(mI(sys.StageNo)).RoundNo).SetDispensingStatus(mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexX, mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexY, eDispensingStatus.Fail)
                            Call WriteDieStatusForMappingData("GG", eDataType.eDispensing, sys.StageNo, mDispensingList(sys.StageNo)(mI(sys.StageNo)).NodeName, mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexX, mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexY, eDispensingStatus.Fail)
                        Next
                    End If
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If

            Case 9000
                '[Note]:記錄上一Round回頭時間
                '       S-->ms
                mLastRoundProcessTime(sys.StageNo) = sys.DispParam.Pattern.Round(sys.DispParam.RoundNo).ProcessTime * 1000
                'Debug.Print("( " & sys.StageNo & " ) Round Time: " & mProcessStopWatch(sys.StageNo).ElapsedMilliseconds)

                '[Note]:紀錄這個Round從移動到離開此流程所花費的時間
                mDispFrontRoundTime(sys.StageNo) = mProcessStopWatch(sys.StageNo).ElapsedMilliseconds
                '[Note]:將點膠時間資料暫存()
                '       先取出暫存的資料，但最後一輪不用紀錄(估算時間只需要算前幾道回頭的時間，最後一道都做完了沒有回頭的需求，所以最後一道時間的估算就可省略)
                'If sys.DispParam.ProcessTimeType = eProcessTimeType.ReturnTime Then
                '    If sys.DispParam.RoundNo < sys.DispParam.Pattern.Round.Count - 1 Then
                '        mDispTimeForRound(sys.StageNo) = mDispTimeForRoundList(sys.StageNo).Item(sys.DispParam.RoundNo)
                '        mDispTimeForRound(sys.StageNo).RealValue = mProcessStopWatch(sys.StageNo).ElapsedMilliseconds

                '        '[Note]:先去掉舊的，再把新的加上去
                '        mDispTimeForRoundList(sys.StageNo).RemoveAt(sys.DispParam.RoundNo)
                '        mDispTimeForRoundList(sys.StageNo).Insert(sys.DispParam.RoundNo, mDispTimeForRound(sys.StageNo))
                '    Else
                '        '[Note]:走多Round的時候才需要計時
                '        If sys.DispParam.Pattern.Round.Count > 1 Then
                '            If IsNothing(mDispTimeList(sys.StageNo)) = True Then
                '                mDispTimeList(sys.StageNo) = New List(Of List(Of sDispenseTimeForRound))
                '            End If
                '            mDispTimeList(sys.StageNo).Capacity = mDispTimeList(sys.StageNo).Count + 1
                '            mDispTimeList(sys.StageNo).Add(mDispTimeForRoundList(sys.StageNo))
                '            If mDispTimeList(sys.StageNo).Count = 5 Then
                '                UpDateDispTimeCompenstion(sys.StageNo)
                '            End If
                '        End If
                '    End If
                'End If
                Debug.Print("NonHistory耗時:" & mNonHistoryStopWatch.ElapsedMilliseconds)
                sys.RunStatus = enmRunStatus.Finish
                Exit Sub

                '***********************************************************************************************************************************************************

        End Select

    End Sub

    ''' <summary>[History Model點膠流程]</summary>
    ''' <param name="sys"></param>
    ''' <remarks></remarks>
    Private Sub DispHistoryModelAction(ByRef sys As sDispSysParam)

        Static mTriggerIOStopWatch(enmStage.Max) As Stopwatch                       '[紀錄Trigger IO訊號反應時間]
        Static mDotWeight(enmStage.Max) As Decimal
        Static mIsDummyRunOK(enmStage.Max) As Boolean                               '[Dummy Run是否失敗]
        Static mMaxDispenseSpeed(enmStage.Max) As Decimal                           '[紀錄點膠時的最大速度，用來計算Measure Picth]
        Static mMeasurePitch(enmStage.Max) As Decimal                               '[Measure Picth]
        Static mMeasureLength(enmStage.Max) As Decimal                              '[Measure Length]
        Static mCycleTime(enmStage.Max) As Decimal                                  '[點膠Cycle Time]
        Static mDotCounts(enmStage.Max) As Integer                                  '[記錄這一Run點膠的顆數]
        Static mWaitStopWatch(enmStage.Max) As Stopwatch                            '[等待用的(目前有用到ValveOnTime、)]
        Static mSettlingStopWatch(enmStage.Max) As Stopwatch                        '[Settling Time的計時]
        Static mSettlingTime(enmStage.Max) As Decimal                               '[Settling Time(ms)]
        Static mValveOnTime(enmStage.Max) As Decimal                                '[ValveOnTime(ms)-->Used in Dot]
        Static mRetractDistnace(enmStage.Max) As Decimal                            '[Retract Distance]
        Static mRetractAcc(enmStage.Max) As Decimal
        Static mDwellTime(enmStage.Max) As Decimal
        Static mRetractVelocity(enmStage.Max) As Decimal
        Static mRetractPosZ(enmStage.Max) As Decimal
        Static mValveCylStopWatch(enmStage.Max) As Stopwatch                        '[用來記錄B閥汽缸的TimeOut]
        Static mMulitDotsDispensingTime(enmStage.Max) As Decimal                    '[估算原地打點需要花的時間]
        Const mTriggerIOTime As Decimal = 3                                         '[Trigger IO訊號約3ms]

        Dim mI(enmStage.Max) As Integer
        Dim mJ(enmStage.Max) As Integer
        Dim mAxisXState(enmStage.Max) As CommandStatus                              '[X軸的狀態]
        Dim mAxisYState(enmStage.Max) As CommandStatus                              '[Y軸的狀態]
        Dim mAxisZState(enmStage.Max) As CommandStatus                              '[Z軸的狀態]
        Dim mAxisBState(enmStage.Max) As CommandStatus                              '[Tilt軸的狀態]
        Dim mCommandPosB(enmStage.Max) As Decimal                                   '[取出目前Tilt角度(Command Pos)]
        Dim mVelLow(enmStage.Max) As Decimal
        Dim mVelHigh(enmStage.Max) As Decimal
        Dim mAcc(enmStage.Max) As Decimal
        Dim mDec(enmStage.Max) As Decimal
        Dim mTiggerDelayTime(enmStage.Max) As Decimal


        Select Case sys.SysNum
            Case sDispSysParam.SysLoopStart
                If mTriggerIOStopWatch(sys.StageNo) Is Nothing Then
                    mTriggerIOStopWatch(sys.StageNo) = New Stopwatch
                End If

                If mWaitStopWatch(sys.StageNo) Is Nothing Then
                    mWaitStopWatch(sys.StageNo) = New Stopwatch
                End If

                If mSettlingStopWatch(sys.StageNo) Is Nothing Then
                    mSettlingStopWatch(sys.StageNo) = New Stopwatch
                End If

                If mValveCylStopWatch(sys.StageNo) Is Nothing Then
                    mValveCylStopWatch(sys.StageNo) = New Stopwatch
                End If

                '[Note]:清空暫存座標
                Call gMotionPathList(sys.StageNo).Clear()

                '[說明]:速度載入
                If gCMotion.SetVelAccDec(sys.AxisX) = False Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1030017", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1030017), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1042017", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1042017), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1060017", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1060017), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1067017", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1067017), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                    UpdatePatternByDummyRunStatus(sys.StageNo)
                    Exit Sub
                End If
                If gCMotion.SetVelAccDec(sys.AxisY) = False Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1031017", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1031017), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1043017", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1043017), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1061017", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1061017), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1068017", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1068017), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                    UpdatePatternByDummyRunStatus(sys.StageNo)
                    Exit Sub
                End If
                If gCMotion.SetVelAccDec(sys.AxisZ) = False Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1032017", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1032017), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1044017", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1044017), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1062017", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1062017), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1069017", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1069017), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                    UpdatePatternByDummyRunStatus(sys.StageNo)
                    Exit Sub
                End If
                If gCMotion.SetVelAccDec(sys.AxisB) = False Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1034017", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1034017), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1046017", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1046017), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1064017", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1064017), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1071017", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1071017), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                    UpdatePatternByDummyRunStatus(sys.StageNo)
                    Exit Sub
                End If
                '[Note]:汽缸升降
                If gSSystemParameter.MultiDispenseEnable = True Then '雙閥同動時, 第二閥氣缸下降, 其他靠機構調. 改這邊是因為, 校正會指定閥下降,但流程內都指定第一閥..
                    Call ValveCylinderAction(sys.StageNo, eValveWorkMode.Valve2, enmUpDown.Down, mValveCylStopWatch(sys.StageNo))
                Else
                    Call ValveCylinderAction(sys.StageNo, sys.SelectValve, enmUpDown.Down, mValveCylStopWatch(sys.StageNo))
                End If

                sys.SysNum = 1100


                '***************************************************************************************************************
                '****************************************************Tilt軸*****************************************************
                '***************************************************************************************************************
            Case 1100
                '[Note]:確認Tilt有無存在，存在則流程會增加Z軸上升-->Tilt旋轉
                If sys.AxisB <> -1 Then
                    gCMotion.GetCommandValue(sys.AxisB, mCommandPosB(sys.StageNo))
                    If mCommandPosB(sys.StageNo) = sys.DispParam.PosB Then
                        '[Note]:若角度相同，則Tilt不再做旋轉
                        sys.SysNum = 1600
                    Else
                        sys.SysNum = 1200
                    End If
                Else
                    sys.SysNum = 1600
                End If

            Case 1200
                '[Note]:先將Z軸升至安全位置
                If gCMotion.AbsMove(sys.AxisZ, gSSystemParameter.Pos.TiltSafePosZ) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1032000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1032000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1044000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1044000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1062000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1062000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1069000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1069000), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                    UpdatePatternByDummyRunStatus(sys.StageNo)
                    Exit Sub
                End If
                sys.SysNum = 1300

            Case 1300
                '[Note]:等待Table Stop
                mAxisZState(sys.StageNo) = gCMotion.MotionDone(sys.AxisZ)
                If mAxisZState(sys.StageNo) <> CommandStatus.Sucessed Then
                    If gCMotion.IsMoveTimeOut(sys.AxisZ) Then
                        Select Case sys.StageNo
                            Case 0
                                gEqpMsg.AddHistoryAlarm("Error_1032004", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1032004), eMessageLevel.Error)
                            Case 1
                                gEqpMsg.AddHistoryAlarm("Error_1044004", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1044004), eMessageLevel.Error)
                            Case 2
                                gEqpMsg.AddHistoryAlarm("Error_1062004", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1062004), eMessageLevel.Error)
                            Case 3
                                gEqpMsg.AddHistoryAlarm("Error_1069004", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1069004), eMessageLevel.Error)
                        End Select
                        sys.RunStatus = enmRunStatus.Alarm
                        '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                        UpdatePatternByDummyRunStatus(sys.StageNo)
                    End If
                    Exit Sub
                End If
                sys.SysNum = 1400

            Case 1400
                '[Note]:根據Recipe給的Tilt角度決定轉至該位置
                ReviseVelocity(sys.AxisB, sys.DispParam.PosB, gSSystemParameter.MaxCrossDeviceVelocity) 'Soni + 2017.08.23 修改速度為優化速度
                If gCMotion.AbsMove(sys.AxisB, sys.DispParam.PosB) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1034000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1034000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1046000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1046000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1064000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1064000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1071000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1071000), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                    UpdatePatternByDummyRunStatus(sys.StageNo)
                    Exit Sub
                End If
                sys.SysNum = 1500

            Case 1500
                '[Note]:等待Table Stop
                mAxisBState(sys.StageNo) = gCMotion.MotionDone(sys.AxisB)
                If mAxisZState(sys.StageNo) <> CommandStatus.Sucessed Then
                    If gCMotion.IsMoveTimeOut(sys.AxisB) Then
                        Select Case sys.StageNo
                            Case 0
                                gEqpMsg.AddHistoryAlarm("Error_1034004", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1034004), eMessageLevel.Error)
                            Case 1
                                gEqpMsg.AddHistoryAlarm("Error_1046004", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1046004), eMessageLevel.Error)
                            Case 2
                                gEqpMsg.AddHistoryAlarm("Error_1064004", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1064004), eMessageLevel.Error)
                            Case 3
                                gEqpMsg.AddHistoryAlarm("Error_1071004", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1071004), eMessageLevel.Error)
                        End Select
                        sys.RunStatus = enmRunStatus.Alarm
                        '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                        UpdatePatternByDummyRunStatus(sys.StageNo)
                    End If
                    Exit Sub
                End If
                sys.SysNum = 1600

                '***************************************************************************************************************************

            Case 1600
                '[Note]:路徑串接(Motion)
                Call EditMotionPath(sys.DispParam, sys.DispPathRegister, mMotionDispPathRegister(sys.StageNo), mTriggerDispPathRegister(sys.StageNo), mMaxExtendDistance(sys.StageNo), mMaxBlendTime(sys.StageNo), mDotWeight(sys.StageNo), True, mCycleTime(sys.StageNo))
                '[Note]:轉成終端Motion要的資訊
                Call MotionPathCoversion(sys.DispParam.VelHigh, sys.DispParam.Acc, sys.DispParam.Dec, mMaxExtendDistance(sys.StageNo), mMaxBlendTime(sys.StageNo), mMotionDispPathRegister(sys.StageNo), gMotionPathList(sys.StageNo), m1stPath(sys.StageNo), mlastPath(sys.StageNo), mMaxDispenseSpeed(sys.StageNo))
                sys.SysNum = 1700

            Case 1700
                '[說明]:載入移動-->移動到起始座標
                ReviseVelocity(sys.AxisX, m1stPath(sys.StageNo).PosX, gSSystemParameter.MaxCrossDeviceVelocity) 'Soni + 2017.08.23 修改速度為優化速度
                If gCMotion.AbsMove(sys.AxisX, m1stPath(sys.StageNo).PosX) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1030000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1030000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1042000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1042000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1060000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1060000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1067000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1067000), eMessageLevel.Error)
                    End Select
                    'gEqpMsg.AddHistoryAlarm("Error_1030000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1030000), eMessageLevel.Error)
                    sys.RunStatus = enmRunStatus.Alarm
                    '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                    UpdatePatternByDummyRunStatus(sys.StageNo)
                    Exit Sub
                End If
                ReviseVelocity(sys.AxisY, m1stPath(sys.StageNo).PosY, gSSystemParameter.MaxCrossDeviceVelocity) 'Soni + 2017.08.23 修改速度為優化速度
                If gCMotion.AbsMove(sys.AxisY, m1stPath(sys.StageNo).PosY) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1031000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1031000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1043000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1043000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1061000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1061000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1068000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1068000), eMessageLevel.Error)
                    End Select
                    'gEqpMsg.AddHistoryAlarm("Error_1031000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1031000), eMessageLevel.Error)
                    sys.RunStatus = enmRunStatus.Alarm
                    '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                    UpdatePatternByDummyRunStatus(sys.StageNo)
                    Exit Sub
                End If
                sys.SysNum = 1800

            Case 1800
                '[Note]:路徑串接(Trigger Board)
                mTriggerDispPathIndex(sys.StageNo).Start = 0
                mTriggerDispPathIndex(sys.StageNo).Ending = mTriggerDispPathRegister(sys.StageNo).Count - 1
                mTriggerDispPathIndex(sys.StageNo).Done = -1
                mDispType(sys.StageNo) = enmTriggerDispType.JetRecipe
                Call EditTriggerPathByFCmd(sys.StageNo, sys.DispParam.Acc, sys.DispParam.Dec, sys.DispParam.VelHigh, False, mTriggerDispPathIndex(sys.StageNo).Start, mTriggerDispPathIndex(sys.StageNo).Ending, mDispType(sys.StageNo), mTriggerDispPathRegister(sys.StageNo), mDotWeight(sys.StageNo), mCycleTime(sys.StageNo), mDotCounts(sys.StageNo), mMulitDotsDispensingTime(sys.StageNo))
                sys.SysNum = 1900

            Case 1900
                '[Note]:(Step1.)Reset Alarm
                '               Check trigger board is ready before send command
                If IsTriggerBoardAlarm(sys.StageNo) = True Then
                    If IsTriggerBoardReady(sys.StageNo) = True Then
                        If gTriggerBoard.IsBusy(sys.StageNo) = False Then
                            If gTriggerBoard.SetResetAlarm(sys.StageNo, False) = True Then
                                sys.SysNum = 2000
                            End If
                        End If
                    End If
                Else
                    ''[Note]:若不須Dummy Run，則不須下G Cmd，直接跳過去
                    'If sys.IsNeedDummyRun = True Or mIsDummyRunOK(sys.StageNo) = False Then
                    '    sys.SysNum = 2200
                    'Else
                    '    sys.SysNum = 2500
                    'End If
                End If

            Case 2000
                '[Note]:判斷資料接收完成了沒? & 是否 TimeOut
                If gTriggerBoard.IsBusy(sys.StageNo) = True Then
                    '[Note]:還在接收傳送資料中
                    If gTriggerBoard.IsTimeOut(sys.StageNo) = True Then
                        '[Note]:超過時間還沒處裡完-->在下一次
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Jet valve Reset Alarm Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016001", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016001), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016101", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016101), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016201", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016201), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016301", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016301), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                            UpdatePatternByDummyRunStatus(sys.StageNo)
                            Exit Sub
                        Else
                            sys.SysNum = 1900
                        End If
                    End If
                Else
                    '[Note]:檢查接收資料
                    If gTriggerBoard.ResetAlarm(sys.StageNo).Status = True Then
                        mTriggerCmdFailCount(sys.StageNo) = 0
                        ''[Note]:若不須Dummy Run，則不須下G Cmd，直接跳過去
                        'If sys.IsNeedDummyRun = True Or mIsDummyRunOK(sys.StageNo) = False Then
                        '    sys.SysNum = 2200
                        'Else
                        '    sys.SysNum = 2500
                        'End If
                    Else
                        '[Note]:查看收到的內容是????
                        Debug.Print("ResetAlarm: " & gTriggerBoard.ResetAlarm(sys.StageNo).STR)
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Jet valve Reset Alarm Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016001", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016001), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016101", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016101), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016201", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016201), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016301", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016301), eMessageLevel.Alarm)
                            End Select
                            'gEqpMsg.AddHistoryAlarm("Error_1016003", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016003), eMessageLevel.Error)
                            sys.RunStatus = enmRunStatus.Alarm
                            '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                            UpdatePatternByDummyRunStatus(sys.StageNo)
                            Exit Sub
                        Else
                            sys.SysNum = 1900
                        End If
                    End If
                End If

            Case 2100
                '[Note]:(Step2.)Vavle Power On
                '               Check trigger board is ready before send command
                If IsTriggerBoardReady(sys.StageNo) = True Then
                    If gTriggerBoard.IsBusy(sys.StageNo) = False Then
                        If gTriggerBoard.SetValvePower(sys.StageNo, sys.SelectValve, True) = True Then
                            sys.SysNum = 2150
                        End If
                    End If
                End If

            Case 2150
                '[Note]:判斷資料接收完成了沒? & 是否 TimeOut
                If gTriggerBoard.IsBusy(sys.StageNo) = True Then
                    '[Note]:還在接收傳送資料中
                    If gTriggerBoard.IsTimeOut(sys.StageNo) = True Then
                        '[Note]:超過時間還沒處裡完-->在下一次
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Jet valve Reset Alarm Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016001", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016001), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016101", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016101), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016201", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016201), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016301", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016301), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                            UpdatePatternByDummyRunStatus(sys.StageNo)
                            Exit Sub
                        Else
                            sys.SysNum = 2100
                        End If
                    End If
                Else
                    '[Note]:檢查接收資料
                    If gTriggerBoard.Parameter(sys.StageNo).Status = True Then
                        mTriggerCmdFailCount(sys.StageNo) = 0
                        '[Note]:若不須Dummy Run，則不須下G Cmd，直接跳過去
                        If sys.IsNeedDummyRun = True Or mIsDummyRunOK(sys.StageNo) = False Then
                            sys.SysNum = 2200
                        Else
                            sys.SysNum = 2500
                        End If
                    Else
                        '[Note]:查看收到的內容是????
                        Debug.Print("SetValvePower: " & gTriggerBoard.Parameter(sys.StageNo).STR)
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Jet valve Reset Alarm Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016001", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016001), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016101", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016101), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016201", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016201), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Alarm_2016301", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016301), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                            UpdatePatternByDummyRunStatus(sys.StageNo)
                            Exit Sub
                        Else
                            sys.SysNum = 2100
                        End If
                    End If
                End If

            Case 2200
                '[Note]:取出valve parameter
                'TODO:後續再追加自動估算(MeasureLength、MeasurePitch、MeasureCounts)
                If gJetValveDB.ContainsKey(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve)) = True Then
                    mTiggerDelayTime(sys.StageNo) = GetTriggerDelayTime(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve))
                    Call EstimateMeasurePitchLength(mMaxDispenseSpeed(sys.StageNo), mTiggerDelayTime(sys.StageNo), mMeasurePitch(sys.StageNo), mMeasureLength(sys.StageNo))
                    With mTriggerGCmdParameter(sys.StageNo)
                        .HeadNo = sys.SelectValve
                        .PulseTime = GetTriggerPulseTime(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve))
                        .JetTime = GetTriggerJetTime(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve)) '450
                        .Stroke = GetTriggerStorke(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve))
                        .OpenTime = GetTriggerOpenTime(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve))
                        .CloseTime = GetTriggerCloseTime(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve))
                        .GluePressure = gCRecipe.StageParts(sys.StageNo).SyringePressure(sys.SelectValve)
                        .Tolerance = mMeasureLength(sys.StageNo)
                        .MeasureLength = mMeasureLength(sys.StageNo)
                        .MeasurePitch = mMeasurePitch(sys.StageNo)
                        '[Note]Non-history mode measure counts為 0
                        '          History mode measure counts不為0
                        .MeasureCounts = 6
                        .CloseVoltage = GetTriggerCloseVoltage(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve))
                        .JetPressure = GetTriggerJetPressure(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve))
                        .CycleTime = GetTriggerCycleTime(sys.DispParam.Recipe.StageParts(sys.StageNo).ValveName(sys.SelectValve))
                    End With
                Else
                    '[Note]:若有表示資料異常，待查
                    'TODO:異常訊息(Jet valve DataBase Fail)
                    gEqpMsg.AddHistoryAlarm("Error_1019003", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019003), eMessageLevel.Error)
                    sys.RunStatus = enmRunStatus.Alarm
                    '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                    UpdatePatternByDummyRunStatus(sys.StageNo)
                    Exit Sub
                End If
                mTriggerCmdFailCount(sys.StageNo) = 0
                sys.SysNum = 2300

            Case 2300
                '[Note]:(Step2.)Send G Cmd
                '               Check trigger board is ready before send command
                If IsTriggerBoardReady(sys.StageNo) = True Then
                    If gTriggerBoard.IsBusy(sys.StageNo) = False Then
                        If gTriggerBoard.SetJetParameter(sys.StageNo, mTriggerGCmdParameter(sys.StageNo), False) = True Then
                            sys.SysNum = 2400
                        End If
                    End If
                End If

            Case 2400
                '[Note]:判斷資料接收完成了沒? & 是否 TimeOut
                If gTriggerBoard.IsBusy(sys.StageNo) = True Then
                    '[Note]:還在接收傳送資料中
                    If gTriggerBoard.IsTimeOut(sys.StageNo) = True Then
                        '[Note]:超過時間還沒處裡完-->在下一次
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Jet valve Set Jet Parameter Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1016003", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016003), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1016103", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016103), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1016203", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016203), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1016303", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016303), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                            UpdatePatternByDummyRunStatus(sys.StageNo)
                            Exit Sub
                        Else
                            sys.SysNum = 2300
                        End If
                    End If
                Else
                    '[Note]:檢查接收資料
                    If gTriggerBoard.JetParameter(sys.StageNo).Status = True Then
                        mTriggerCmdFailCount(sys.StageNo) = 0
                        sys.SysNum = 2500
                    Else
                        '[Note]:查看收到的內容是????
                        Debug.Print("JetParameter(G Cmd): " & gTriggerBoard.JetParameter(sys.StageNo).STR)
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Jet valve Set Jet Parameter Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1016003", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016003), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1016103", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016103), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1016203", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016203), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1016303", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016303), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                            UpdatePatternByDummyRunStatus(sys.StageNo)
                            Exit Sub
                        Else
                            sys.SysNum = 2300
                        End If
                    End If
                End If

            Case 2500
                '[Note]:(Step3.)Send F Cmd
                '               Check trigger board is ready before send command
                If IsTriggerBoardReady(sys.StageNo) = True Then
                    If gTriggerBoard.IsBusy(sys.StageNo) = False Then
                        If gTriggerBoard.SetJetRecipe(sys.StageNo, False) = True Then
                            '[Note]:已完成了
                            mTriggerDispPathIndex(sys.StageNo).Done = mTriggerDispPathIndex(sys.StageNo).Ending
                            '[Note]:下個從哪裡開始做
                            mTriggerDispPathIndex(sys.StageNo).Start = mTriggerDispPathIndex(sys.StageNo).Ending + 1
                            sys.SysNum = 2600
                        End If
                    End If
                End If

            Case 2600
                '[Note]:判斷資料接收完成了沒? & 是否 TimeOut
                If gTriggerBoard.IsBusy(sys.StageNo) = True Then
                    '[Note]:還在接收傳送資料中
                    If gTriggerBoard.IsTimeOut(sys.StageNo) = True Then
                        '[Note]:超過時間還沒處裡完-->在下一次
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Jet valve Set Jet Recipe Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1016003", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016003), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1016103", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016103), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1016203", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016203), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1016303", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016303), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                            UpdatePatternByDummyRunStatus(sys.StageNo)
                            Exit Sub
                        Else
                            sys.SysNum = 2500
                        End If
                    End If
                Else
                    '[Note]:檢查接收資料
                    If gTriggerBoard.JetRecipe(sys.StageNo).Status = True Then
                        mTriggerCmdFailCount(sys.StageNo) = 0
                        sys.SysNum = 2700
                    Else
                        '[Note]:查看收到的內容是????
                        Debug.Print("JetRecipe(F Cmd): " & gTriggerBoard.JetRecipe(sys.StageNo).STR)
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Jet valve Set Jet Recipe Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1016003", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016003), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1016103", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016103), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1016203", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016203), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1016303", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016303), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                            UpdatePatternByDummyRunStatus(sys.StageNo)
                            Exit Sub
                        Else
                            sys.SysNum = 2500
                        End If
                    End If
                End If

            Case 2700
                '[Note]:(Step4.)Send D Cmd
                '               Check trigger board is ready before send command
                If IsTriggerBoardReady(sys.StageNo) = True Then
                    If gTriggerBoard.IsBusy(sys.StageNo) = False Then
                        mDispType(sys.StageNo) = enmTriggerDispType.JetRecipe
                        If gTriggerBoard.SetDummyRun(sys.StageNo, mDispType(sys.StageNo), sys.SelectValve, 0, False) = True Then
                            sys.SysNum = 2800
                        End If
                    End If
                End If

            Case 2800
                '[Note]:判斷資料接收完成了沒? & 是否 TimeOut
                If gTriggerBoard.IsBusy(sys.StageNo) = True Then
                    '[Note]:還在接收傳送資料中
                    If gTriggerBoard.IsTimeOut(sys.StageNo) = True Then
                        '[Note]:超過時間還沒處裡完-->在下一次
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Jet valve Set Dummy Run Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1016003", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016003), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1016103", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016103), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1016203", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016203), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1016303", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016303), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                            UpdatePatternByDummyRunStatus(sys.StageNo)
                            Exit Sub
                        Else
                            sys.SysNum = 2700
                        End If
                    End If
                Else
                    '[Note]:檢查接收資料
                    If gTriggerBoard.DummyRun(sys.StageNo).Status = True Then
                        mTriggerCmdFailCount(sys.StageNo) = 0
                        If sys.IsNeedDummyRun = True Then
                            '[Note]:Dummy Run
                            sys.SysNum = 3000
                        Else
                            '[Note]:直接跳過Dummy Dun
                            sys.SysNum = 5000
                        End If
                    Else
                        '[Note]:查看收到的內容是????
                        Debug.Print("DummyRun(D Cmd): " & gTriggerBoard.DummyRun(sys.StageNo).STR)
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Jet valve Set Dummy Run Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1016003", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016003), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1016103", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016103), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1016203", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016203), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1016303", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016303), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                            UpdatePatternByDummyRunStatus(sys.StageNo)
                            Exit Sub
                        Else
                            sys.SysNum = 2700
                        End If
                    End If
                End If

            Case 3000
                If gCMotion.MotionDone(sys.AxisX) = CommandStatus.Sucessed And gCMotion.MotionDone(sys.AxisY) = CommandStatus.Sucessed Then
                    sys.SysNum = 3050
                End If

            Case 3050
                '[Note]:檢查汽缸Sensor &汽缸動作是否逾時
                Dim mValve As Integer = sys.SelectValve
                If gSSystemParameter.MultiDispenseEnable = True Then
                    mValve = eValveWorkMode.Valve2
                End If
                If ValveCylinderSensor(sys.StageNo, sys.SelectValve, enmUpDown.Down) = True Then
                    sys.SysNum = 3100
                Else
                    If IsTimeOut(mValveCylStopWatch(sys.StageNo), gSSystemParameter.TimeOut2) = True Then
                        'TODO:Valve汽缸做動逾時

                        gEqpMsg.AddHistoryAlarm("Alarm_2004001", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2004001), eMessageLevel.Alarm)

                        sys.RunStatus = enmRunStatus.Alarm
                        Exit Sub
                    End If
                End If

            Case 3100
                '[Note]:Z軸下降速度、加速度、Settling Time、Valve On Time
                If GetPreDispenseParameter(m1stPath(sys.StageNo).ParameterType, m1stPath(sys.StageNo).ParameterName, mCycleTime(sys.StageNo), mVelHigh(sys.StageNo), mAcc(sys.StageNo), mSettlingTime(sys.StageNo), mValveOnTime(sys.StageNo)) = True Then
                    If GetPostDispenseParameter(mlastPath(sys.StageNo).ParameterType, mlastPath(sys.StageNo).ParameterName, mRetractVelocity(sys.StageNo), mRetractAcc(sys.StageNo), mRetractDistnace(sys.StageNo), mDwellTime(sys.StageNo)) = True Then
                        If gCMotion.SetVelAccDec(sys.AxisZ, 0, mVelHigh(sys.StageNo), mAcc(sys.StageNo), mAcc(sys.StageNo)) = True Then
                            sys.SysNum = 3200
                        Else
                            '增加Alarm 訊息
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1032017", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1032017), eMessageLevel.Error)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1044017", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1044017), eMessageLevel.Error)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1062017", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1062017), eMessageLevel.Error)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1069017", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1069017), eMessageLevel.Error)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                        End If
                    Else
                        '增加Alarm 訊息
                        gEqpMsg.AddHistoryAlarm("Error_1002010", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1002010), eMessageLevel.Alarm)
                        sys.RunStatus = enmRunStatus.Alarm
                        Exit Sub
                    End If
                Else '增加Alarm 訊息
                    gEqpMsg.AddHistoryAlarm("Error_1002010", "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1002010), eMessageLevel.Alarm)
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If

            Case 3200
                '[Note]:Z軸下降
                If gCMotion.AbsMove(sys.AxisZ, m1stPath(sys.StageNo).PosZ) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1032000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1032000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1044000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1044000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1062000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1062000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1069000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1069000), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    '[Note]:若空跑完沒完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                    UpdatePatternByDummyRunStatus(sys.StageNo)
                    Exit Sub
                Else
                    sys.SysNum = 3300
                End If

            Case 3300
                '[Note]:Need to check motion done & 將路徑塞給軸卡
                If gCMotion.MotionDone(sys.AxisX) = CommandStatus.Sucessed And gCMotion.MotionDone(sys.AxisY) = CommandStatus.Sucessed And gCMotion.MotionDone(sys.AxisZ) = CommandStatus.Sucessed Then
                    mSettlingStopWatch(sys.StageNo).Restart()
                    If SendPathToMotion(sys.StageNo, gMotionPathList(sys.StageNo), mMaxExtendDistance(sys.StageNo), mMaxBlendTime(sys.StageNo)) = True Then
                        sys.SysNum = 3400
                    Else
                        'TODO:異常訊息(路徑串接異常)
                        gEqpMsg.AddHistoryAlarm("Error_1000012", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1000012), eMessageLevel.Error)
                        sys.RunStatus = enmRunStatus.Alarm
                        '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                        UpdatePatternByDummyRunStatus(sys.StageNo)
                        Exit Sub
                    End If
                End If

            Case 3400
                '[Note]:Settling Time 
                If mSettlingStopWatch(sys.StageNo).ElapsedMilliseconds > mSettlingTime(sys.StageNo) Then
                    sys.SysNum = 3500
                End If

            Case 3500
                '[Note]:(Step5.)Dispenesing Trigger On
                sys.IsCanPause = False
                '20171001
                If gSSystemParameter.EnableDryRun = True Then
                ElseIf gSSystemParameter.EnableDryRun = False Then
                    Call SetDispensingTrigger(sys.StageNo, sys.SelectValve, enmONOFF.eON)
                End If
                sys.SysNum = 3600

            Case 3600
                '[Note]:(Step6.)畫膠移動
                If gCMotion.GpMoving(gCMotion.SyncParameter(sys.StageNo)) <> CommandStatus.Sucessed Then
                    'TODO:異常訊息(路徑移動異常)
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1036000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1036000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1048000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1048000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1066000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1066000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1073000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1073000), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                    UpdatePatternByDummyRunStatus(sys.StageNo)
                    Exit Sub
                Else
                    sys.SysNum = 3700
                End If

            Case 3700
                '[Note]:(Step7.)等待劃膠移動停止 & Dispenesing Trigger Off
                If gCMotion.GpMoveDone(gCMotion.SyncParameter(sys.StageNo)) = CommandStatus.Sucessed Then
                    'sys.IsCanPause = True
                    '[Note]:Dispenesing Trigger Off
                    Call SetDispensingTrigger(sys.StageNo, sys.SelectValve, enmONOFF.eOff)
                    mTriggerIOStopWatch(sys.StageNo).Restart()
                    mWaitStopWatch(sys.StageNo).Restart()
                    sys.SysNum = 3800
                End If

            Case 3800
                '[Note]:完成點膠後，Z軸上台的時間與等待時間
                If mWaitStopWatch(sys.StageNo).ElapsedMilliseconds > mDwellTime(sys.StageNo) Then
                    mWaitStopWatch(sys.StageNo).Stop()
                    '[Note]:Retract
                    If mRetractDistnace(sys.StageNo) = 0 Then
                        sys.SysNum = 4100
                    Else
                        mRetractPosZ(sys.StageNo) = CDec(gCMotion.GetPositionValue(sys.AxisZ)) + mRetractDistnace(sys.StageNo)
                        If gCMotion.SetVelAccDec(sys.AxisZ, 0, mRetractVelocity(sys.StageNo), mRetractAcc(sys.StageNo), mRetractAcc(sys.StageNo)) = True Then
                            sys.SysNum = 3900
                        End If
                    End If
                End If

            Case 3900
                '[Note]:Retract
                If gCMotion.AbsMove(sys.AxisZ, mRetractPosZ(sys.StageNo)) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1032000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1032000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1044000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1044000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1062000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1062000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1069000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1069000), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                Else
                    sys.SysNum = 4000
                End If

            Case 4000
                '[Note]:等待到位
                If gCMotion.MotionDone(sys.AxisZ) = CommandStatus.Sucessed Then
                    sys.SysNum = 4100
                End If

            Case 4100
                '[Note]:等待Trigger I/O訊號反應時間
                If mTriggerIOStopWatch(sys.StageNo).ElapsedMilliseconds > mTriggerIOTime Then
                    mTriggerIOStopWatch(sys.StageNo).Stop()
                    sys.SysNum = 4200
                End If

            Case 4200
                '[Note]:檢查中途有無資料傳送異常
                If IsTriggerBoardAlarm(sys.StageNo) = True Then
                    '[Note]:資料有問題
                    Dim mErrorCode As String
                    mErrorCode = ""
                    If gTriggerBoard.GetErrorCode(sys.StageNo, True, mErrorCode) = True Then

                    End If
                    Debug.Print("Error Code: " & mErrorCode)
                    'TODO:異常訊息(Trigger Board Alarm)

                    Dim errorCodeTrigger As String
                    errorCodeTrigger = ""
                    errorCodeTrigger = trigger_error(sys.StageNo, mErrorCode)

                    gEqpMsg.AddHistoryAlarm("Alarm_" & errorCodeTrigger, "DispNonHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(errorCodeTrigger), eMessageLevel.Alarm)

                    'TODO:異常訊息(Trigger Board Alarm)
                    'Select Case sys.StageNo
                    '    Case 0
                    '        gEqpMsg.AddHistoryAlarm("Alarm_2016002", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016002), eMessageLevel.Alarm)
                    '    Case 1
                    '        gEqpMsg.AddHistoryAlarm("Alarm_2016102", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016102), eMessageLevel.Alarm)
                    '    Case 2
                    '        gEqpMsg.AddHistoryAlarm("Alarm_2016202", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016202), eMessageLevel.Alarm)
                    '    Case 3
                    '        gEqpMsg.AddHistoryAlarm("Alarm_2016302", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016302), eMessageLevel.Alarm)
                    'End Select

                    sys.RunStatus = enmRunStatus.Alarm
                    '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                    UpdatePatternByDummyRunStatus(sys.StageNo)
                    Exit Sub
                Else
                    '[Note]:完成Dummy Run並且沒發生異常
                    mIsDummyRunOK(sys.StageNo) = True
                    sys.SysNum = 4300
                End If

            Case 4300
                '[Note]:檢查路徑狀態
                Dim mRemainCount As Long
                If gCMotion.GpGetPathStatus(gCMotion.SyncParameter(sys.StageNo), mRemainCount) = CommandStatus.Sucessed Then
                    sys.SysNum = 5000
                Else
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Alarm_2016000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016000), eMessageLevel.Alarm)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Alarm_2016100", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016100), eMessageLevel.Alarm)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Alarm_2016200", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016200), eMessageLevel.Alarm)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Alarm_2016300", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016300), eMessageLevel.Alarm)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    '[Note]:若空跑完完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑
                    UpdatePatternByDummyRunStatus(sys.StageNo)
                    Exit Sub
                End If

            Case 5000
                '[Note]:(Step8.)重新載入移動-->移動到起始座標
                If gCMotion.AbsMove(sys.AxisX, m1stPath(sys.StageNo).PosX) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1030000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1030000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1042000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1042000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1060000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1060000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1067000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1067000), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If
                If gCMotion.AbsMove(sys.AxisY, m1stPath(sys.StageNo).PosY) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1031000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1031000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1043000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1043000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1061000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1061000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1068000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1068000), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If
                sys.SysNum = 5100

            Case 5100
                '[Note]:(Step9.)Send X Cmd
                If IsTriggerBoardReady(sys.StageNo) = True Then
                    If gTriggerBoard.IsBusy(sys.StageNo) = False Then
                        mDispType(sys.StageNo) = enmTriggerDispType.JetRecipe
                        If gTriggerBoard.SetDispenseRun(sys.StageNo, mDispType(sys.StageNo), sys.SelectValve, 0, 0, False) = True Then
                            sys.SysNum = 5200
                        End If
                    End If
                End If

            Case 5200
                '[Note]:判斷資料接收完成了沒? & 是否 TimeOut
                If gTriggerBoard.IsBusy(sys.StageNo) = True Then
                    '[Note]:還在接收傳送資料中
                    If gTriggerBoard.IsTimeOut(sys.StageNo) = True Then
                        '[Note]:超過時間還沒處裡完-->在下一次
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Jet valve Set Dispense Run Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1016003", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016003), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1016103", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016103), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1016203", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016203), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1016303", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016303), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 5100
                        End If
                    End If
                Else
                    '[Note]:檢查接收資料
                    If gTriggerBoard.DispenseRun(sys.StageNo).Status = True Then
                        mTriggerCmdFailCount(sys.StageNo) = 0
                        sys.SysNum = 5300
                    Else
                        '[Note]:查看收到的內容是????
                        Debug.Print("DispenseRun(X Cmd): " & gTriggerBoard.DispenseRun(sys.StageNo).STR)
                        mTriggerCmdFailCount(sys.StageNo) = mTriggerCmdFailCount(sys.StageNo) + 1
                        If mTriggerCmdFailCount(sys.StageNo) > gTriggerCmdMaxFailCounts Then
                            'TODO:異常訊息(Jet valve Set Dispense Run Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1016003", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016003), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1016103", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016103), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1016203", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016203), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1016303", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1016303), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 5100
                        End If
                    End If
                End If

            Case 5300
                If gCMotion.MotionDone(sys.AxisX) = CommandStatus.Sucessed And gCMotion.MotionDone(sys.AxisY) = CommandStatus.Sucessed Then
                    sys.SysNum = 5400
                End If

            Case 5400
                '[Note]:Z軸下降速度、加速度、Settling Time、Valve On Time
                If GetPreDispenseParameter(m1stPath(sys.StageNo).ParameterType, m1stPath(sys.StageNo).ParameterName, mCycleTime(sys.StageNo), mVelHigh(sys.StageNo), mAcc(sys.StageNo), mSettlingTime(sys.StageNo), mValveOnTime(sys.StageNo)) = True Then
                    If GetPostDispenseParameter(mlastPath(sys.StageNo).ParameterType, mlastPath(sys.StageNo).ParameterName, mRetractVelocity(sys.StageNo), mRetractAcc(sys.StageNo), mRetractDistnace(sys.StageNo), mDwellTime(sys.StageNo)) = True Then
                        If gCMotion.SetVelAccDec(sys.AxisZ, 0, mVelHigh(sys.StageNo), mAcc(sys.StageNo), mAcc(sys.StageNo)) = True Then
                            sys.SysNum = 5500
                        End If
                    End If
                End If

            Case 5500
                '[Note]:Z軸下降
                If gCMotion.AbsMove(sys.AxisZ, m1stPath(sys.StageNo).PosZ) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1032000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1032000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1044000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1044000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1062000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1062000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1069000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1069000), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                Else
                    sys.SysNum = 6000
                End If

            Case 6000
                '[Note]:Need to check motion done & 將路徑塞給軸卡
                If gCMotion.MotionDone(sys.AxisX) = CommandStatus.Sucessed And gCMotion.MotionDone(sys.AxisY) = CommandStatus.Sucessed And gCMotion.MotionDone(sys.AxisZ) = CommandStatus.Sucessed Then
                    mSettlingStopWatch(sys.StageNo).Restart()
                    If SendPathToMotion(sys.StageNo, gMotionPathList(sys.StageNo), mMaxExtendDistance(sys.StageNo), mMaxBlendTime(sys.StageNo)) = True Then
                        sys.SysNum = 6100
                    Else
                        'TODO:異常訊息(路徑串接異常)
                        gEqpMsg.AddHistoryAlarm("Error_1000012", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1000012), eMessageLevel.Error)
                        sys.RunStatus = enmRunStatus.Alarm
                        Exit Sub
                    End If
                End If

            Case 6100
                '[Note]:Settling Time 
                If mSettlingStopWatch(sys.StageNo).ElapsedMilliseconds > mSettlingTime(sys.StageNo) Then
                    sys.SysNum = 6200
                End If

            Case 6200
                sys.IsCanPause = False
                '[Note]:(Step10.)Dispenesing Trigger On
                '20171001
                If gSSystemParameter.EnableDryRun = True Then
                ElseIf gSSystemParameter.EnableDryRun = False Then
                    Call SetDispensingTrigger(sys.StageNo, sys.SelectValve, enmONOFF.eON)
                End If
                sys.SysNum = 6300

            Case 6300
                '[Note]:(Step11.)畫膠移動
                If gCMotion.GpMoving(gCMotion.SyncParameter(sys.StageNo)) <> CommandStatus.Sucessed Then
                    'TODO:異常訊息(路徑移動異常)
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1036000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1036000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1048000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1048000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1066000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1066000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1073000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1073000), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                Else
                    sys.SysNum = 6400
                End If

            Case 6400
                '[Note]:(Step12.)等待劃膠移動停止
                If gCMotion.GpMoveDone(gCMotion.SyncParameter(sys.StageNo)) = CommandStatus.Sucessed Then
                    'sys.IsCanPause = True
                    '[Note]:Dispenesing Trigger Off
                    Call SetDispensingTrigger(sys.StageNo, sys.SelectValve, enmONOFF.eOff)
                    mTriggerIOStopWatch(sys.StageNo).Restart()
                    mWaitStopWatch(sys.StageNo).Restart()
                    sys.SysNum = 6500
                End If

            Case 6500
                '[Note]:完成點膠後，Z軸上台的時間與等待時間
                If mWaitStopWatch(sys.StageNo).ElapsedMilliseconds > mDwellTime(sys.StageNo) Then
                    mWaitStopWatch(sys.StageNo).Stop()
                    '[Note]:Retract
                    If mRetractDistnace(sys.StageNo) = 0 Then
                        sys.SysNum = 6800
                    Else
                        mRetractPosZ(sys.StageNo) = CDec(gCMotion.GetPositionValue(sys.AxisZ)) + mRetractDistnace(sys.StageNo)
                        If gCMotion.SetVelAccDec(sys.AxisZ, 0, mRetractVelocity(sys.StageNo), mRetractAcc(sys.StageNo), mRetractAcc(sys.StageNo)) = True Then
                            sys.SysNum = 6600
                        End If
                    End If
                End If

            Case 6600
                '[Note]:Retract
                If gCMotion.AbsMove(sys.AxisZ, mRetractPosZ(sys.StageNo)) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1032000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1032000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1044000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1044000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1062000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1062000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1069000", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1069000), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                Else
                    sys.SysNum = 6700
                End If

            Case 6700
                '[Note]:等待到位
                If gCMotion.MotionDone(sys.AxisZ) = CommandStatus.Sucessed Then
                    sys.SysNum = 6800
                End If

            Case 6800
                '[Note]:等待Trigger I/O訊號反應時間
                If mTriggerIOStopWatch(sys.StageNo).ElapsedMilliseconds > mTriggerIOTime Then
                    mTriggerIOStopWatch(sys.StageNo).Stop()
                    '[Note]:更新打點數量
                    '       打點數量改成抓預期要打的數量，非實際打的數量，藉此少掉通訊所耗掉的時間
                    gSSystemParameter.StageParts.PasteLifeTime(sys.StageNo).DotsCount(sys.SelectValve) = gSSystemParameter.StageParts.PasteLifeTime(sys.StageNo).DotsCount(sys.SelectValve) + mDotCounts(sys.StageNo)
                    sys.SysNum = 6900
                End If

            Case 6900
                '[Note]:檢查中途有無資料傳送異常
                If IsTriggerBoardAlarm(sys.StageNo) = True Then
                    '[Note]:資料有問題
                    Dim mErrorCode As String
                    mErrorCode = ""
                    If gTriggerBoard.GetErrorCode(sys.StageNo, True, mErrorCode) = True Then

                    End If
                    Debug.Print("Error Code: " & mErrorCode)

                    Dim errorCodeTrigger As String
                    errorCodeTrigger = ""
                    errorCodeTrigger = trigger_error(sys.StageNo, mErrorCode)

                    gEqpMsg.AddHistoryAlarm("Alarm_" & errorCodeTrigger, "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(errorCodeTrigger), eMessageLevel.Alarm)

                    sys.RunStatus = enmRunStatus.Alarm
                    'Select Case sys.StageNo
                    '    Case 0
                    '        gEqpMsg.AddHistoryAlarm("Alarm_2016002", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016002), eMessageLevel.Alarm)
                    '    Case 1
                    '        gEqpMsg.AddHistoryAlarm("Alarm_2016102", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016102), eMessageLevel.Alarm)
                    '    Case 2
                    '        gEqpMsg.AddHistoryAlarm("Alarm_2016202", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016202), eMessageLevel.Alarm)
                    '    Case 3
                    '        gEqpMsg.AddHistoryAlarm("Alarm_2016302", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016302), eMessageLevel.Alarm)
                    'End Select

                    '[Note]:點膠異常，只要異常，該次作業的都是為異常
                    If mDispensingList(sys.StageNo).Count <> 0 Then
                        For mI(sys.StageNo) = 0 To mDispensingList(sys.StageNo).Count - 1
                            'gStageMap(sys.StageNo).Node(mDispensingList(sys.StageNo)(mI(sys.StageNo)).NodeName).Round(mDispensingList(sys.StageNo)(mI(sys.StageNo)).RoundNo).DispensingStatus(mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexX, mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexY) = eDispensingStatus.Fail
                            'Eason 20170302 Ticket:100090 , System Update Crash
                            gStageMap(sys.StageNo).Node(mDispensingList(sys.StageNo)(mI(sys.StageNo)).NodeName).Round(mDispensingList(sys.StageNo)(mI(sys.StageNo)).RoundNo).SetDispensingStatus(mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexX, mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexY, eDispensingStatus.Fail)
                        Next
                    End If
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                Else
                    sys.SysNum = 7000
                End If

            Case 7000
                '[Note]:檢查路徑狀態
                Dim mRemainCount As Long
                If gCMotion.GpGetPathStatus(gCMotion.SyncParameter(sys.StageNo), mRemainCount) = CommandStatus.Sucessed Then
                    sys.SysNum = 9000
                Else
                    'TODO:異常訊息(路徑狀態異常)
                    gEqpMsg.AddHistoryAlarm("Error_1000012", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Error_1000012), eMessageLevel.Error)
                    '[Note]:點膠異常，只要異常，該次作業的都是為異常
                    If mDispensingList(sys.StageNo).Count <> 0 Then
                        For mI(sys.StageNo) = 0 To mDispensingList(sys.StageNo).Count - 1
                            'gStageMap(sys.StageNo).Node(mDispensingList(sys.StageNo)(mI(sys.StageNo)).NodeName).Round(mDispensingList(sys.StageNo)(mI(sys.StageNo)).RoundNo).DispensingStatus(mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexX, mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexY) = eDispensingStatus.Fail
                            'Eason 20170302 Ticket:100090 , System Update Crash
                            gStageMap(sys.StageNo).Node(mDispensingList(sys.StageNo)(mI(sys.StageNo)).NodeName).Round(mDispensingList(sys.StageNo)(mI(sys.StageNo)).RoundNo).SetDispensingStatus(mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexX, mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexY, eDispensingStatus.Fail)
                        Next
                    End If
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If

            Case 9000
                '[Note]:記錄上一Round回頭時間
                '       S-->ms
                sys.RunStatus = enmRunStatus.Finish
                Exit Sub

                '***********************************************************************************************************************************************************

        End Select

    End Sub

    ''' <summary>[計算Measure Pitch、Length]</summary>
    ''' <param name="maxDispenseSpeed"></param>
    ''' <param name="DelayTime"></param>
    ''' <param name="measurePitch"></param>
    ''' <param name="measureLength"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Function EstimateMeasurePitchLength(ByVal maxDispenseSpeed As Decimal, ByVal DelayTime As Decimal, ByRef measurePitch As Decimal, ByRef measureLength As Decimal) As Boolean

        Dim mMeasureDistance As Decimal

        'mMeasureDistance = (maxDispenseSpeed * DelayTime) / 1000
        'measurePitch = (mMeasureDistance / 5) + 5
        'If measurePitch < 20 Then
        '    measurePitch = 20
        'End If
        'measureLength = measurePitch * 10


        ''[Note]:單位全都轉成um
        'measureLength = measureLength + (gSSystemParameter.TriggerTolerance * 1000)

        ''=====================================================================================
        'measureLength = (gSSystemParameter.RanTriggerTolerance * 1000) + (gSSystemParameter.TriggerTolerance * 1000)
        mMeasureDistance = (maxDispenseSpeed * DelayTime)

        If mMeasureDistance < (gSSystemParameter.TriggerTolerance * 1000) + (gSSystemParameter.PrecisionTolerance * 1000) Then
            measureLength = (gSSystemParameter.TriggerTolerance * 1000) + (gSSystemParameter.PrecisionTolerance * 1000)
        ElseIf mMeasureDistance > (gSSystemParameter.TriggerTolerance * 1000) Then
            measureLength = mMeasureDistance + 100
        End If

        Return True
    End Function

    ''' <summary>[若空跑沒有完成，則清除暫存在記憶體內的資料，這樣下次進入時才會再做一次空跑]</summary>
    ''' <param name="stageNo"></param>
    ''' <remarks></remarks>
    Sub UpdatePatternByDummyRunStatus(ByVal stageNo As enmStage)
        mDispPatternMemory(stageNo) = Nothing
        mDispPatternMemoryList(stageNo) = Nothing
    End Sub

    ''' <summary>[比對位置是否落在安全範圍內]</summary>
    ''' <param name="stageNo"></param>
    ''' <param name="dispProtect">[另一側的資料]</param>
    ''' <param name="estimatePos">[目標位置(估測)]</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Function IsSafePos(ByVal stageNo As enmStage, ByRef dispProtect As sProtectData, ByVal estimatePos As Premtek.sPos) As Boolean

        '[Note]:比對是否超出保護框架
        Select Case stageNo
            Case enmStage.No1
                If mStageState(enmStage.No2) = False Then
                    Return True
                End If
                '[說明]:更新另一側的目前座標
                dispProtect.NowPos.PosX = CDec(gCMotion.GetPositionValue(gSYS(eSys.DispStage2).AxisX))
                dispProtect.NowPos.PosY = CDec(gCMotion.GetPositionValue(gSYS(eSys.DispStage2).AxisY))
                '[Note]:先檢查X方向，Y方向視情況再決定要不要加
                '       跨距-L+R(Now)>S
                If gSSystemParameter.MachineSafeData(enmMachineStation.MachineA).SpreadX - estimatePos.PosX + dispProtect.NowPos.PosX >= gSSystemParameter.MachineSafeData(enmMachineStation.MachineA).SafeDistanceX Then
                    '[Note]:跨距-L+R(Target)>S
                    If gSSystemParameter.MachineSafeData(enmMachineStation.MachineA).SpreadX - estimatePos.PosX + dispProtect.TargetPos.PosX >= gSSystemParameter.MachineSafeData(enmMachineStation.MachineA).SafeDistanceX Then
                        Return True
                    Else
                        Debug.Print("OOOOOOO" & gSSystemParameter.MachineSafeData(enmMachineStation.MachineA).SpreadX - estimatePos.PosX + dispProtect.TargetPos.PosX)
                        Debug.Print("XXXXXXX" & gSSystemParameter.MachineSafeData(enmMachineStation.MachineA).SafeDistanceX)
                    End If
                End If

            Case enmStage.No2
                If mStageState(enmStage.No1) = False Then
                    Return True
                End If
                dispProtect.NowPos.PosX = CDec(gCMotion.GetPositionValue(gSYS(eSys.DispStage1).AxisX))
                dispProtect.NowPos.PosY = CDec(gCMotion.GetPositionValue(gSYS(eSys.DispStage1).AxisY))
                '[Note]:先檢查X方向，Y方向視情況再決定要不要加
                '       跨距-L(Now)+R>S
                If gSSystemParameter.MachineSafeData(enmMachineStation.MachineA).SpreadX + estimatePos.PosX - dispProtect.NowPos.PosX >= gSSystemParameter.MachineSafeData(enmMachineStation.MachineA).SafeDistanceX Then
                    '[Note]:跨距-L(Target)+R>S
                    If gSSystemParameter.MachineSafeData(enmMachineStation.MachineA).SpreadX + estimatePos.PosX - dispProtect.TargetPos.PosX >= gSSystemParameter.MachineSafeData(enmMachineStation.MachineA).SafeDistanceX Then
                        Return True
                    End If
                End If

            Case enmStage.No3
                If mStageState(enmStage.No4) = False Then
                    Return True
                End If
                dispProtect.NowPos.PosX = CDec(gCMotion.GetPositionValue(gSYS(eSys.DispStage4).AxisX))
                dispProtect.NowPos.PosY = CDec(gCMotion.GetPositionValue(gSYS(eSys.DispStage4).AxisY))
                '[Note]:先檢查X方向，Y方向視情況再決定要不要加
                '       跨距-L+R(Now)>S
                If gSSystemParameter.MachineSafeData(enmMachineStation.MachineB).SpreadX - estimatePos.PosX + dispProtect.NowPos.PosX >= gSSystemParameter.MachineSafeData(enmMachineStation.MachineB).SafeDistanceX Then
                    '[Note]:跨距-L+R(Target)>S
                    If gSSystemParameter.MachineSafeData(enmMachineStation.MachineB).SpreadX - estimatePos.PosX + dispProtect.TargetPos.PosX >= gSSystemParameter.MachineSafeData(enmMachineStation.MachineB).SafeDistanceX Then
                        Return True
                    End If
                End If

            Case enmStage.No4
                If mStageState(enmStage.No3) = False Then
                    Return True
                End If
                dispProtect.NowPos.PosX = CDec(gCMotion.GetPositionValue(gSYS(eSys.DispStage3).AxisX))
                dispProtect.NowPos.PosY = CDec(gCMotion.GetPositionValue(gSYS(eSys.DispStage3).AxisY))
                '[Note]:先檢查X方向，Y方向視情況再決定要不要加
                '       跨距-L+R(Now)>S
                If gSSystemParameter.MachineSafeData(enmMachineStation.MachineB).SpreadX + estimatePos.PosX - dispProtect.NowPos.PosX >= gSSystemParameter.MachineSafeData(enmMachineStation.MachineB).SafeDistanceX Then
                    '[Note]:跨距-L+R(Target)>S
                    If gSSystemParameter.MachineSafeData(enmMachineStation.MachineB).SpreadX + estimatePos.PosX - dispProtect.TargetPos.PosX >= gSSystemParameter.MachineSafeData(enmMachineStation.MachineB).SafeDistanceX Then
                        Return True
                    End If
                End If

        End Select

        Return False

    End Function

    ''' <summary>[估算要走到哪一顆(一次點多顆之條件式)]</summary>
    ''' <param name="stageNo"></param>
    ''' <param name="dispParam"></param>
    ''' <param name="maxIndex"></param>
    ''' <param name="endIndex"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function EstimateDispMultiDie(ByVal stageNo As enmStage, ByVal dispParam As sDispParam, ByVal maxIndex As Integer, ByRef endIndex As Integer) As Boolean

        Dim mDispParam As sDispParam
        Dim mI As Integer
        Dim mDieCount As Integer
        Dim mLimitPos As Premtek.sPos
        Const mMaxPathLimite As Integer = 333           '資料比數的上限(333，因為同動路徑上限為1000，一組路徑約產出3組同動路徑)
        Dim mPathCounts As Integer
        Dim mTotalCounts As Integer

        '[Note]:先檢查相關的安全防護，再執行下個步驟
        '[Note]:估算極限位置
        mPathCounts = 0
        mTotalCounts = 0
        mDieCount = 0
        mDispParam = dispParam
        For mI = dispParam.MulitDieParam.Start To maxIndex
            mDispParam.MulitDieParam.Start = mI
            mDispParam.MulitDieParam.Ending = mI
            '[Note]:串列出所有的Path & 目標極限位置
            Call GetLimitPos(mDispParam, mLimitPos, mPathCounts)
            mTotalCounts = mTotalCounts + mPathCounts
            '[Note]:比對是否超出一次可以使用的數量
            If mTotalCounts > mMaxPathLimite Then
                Exit For
            End If
            '[Note]:比對是否超出保護框架
            Select Case stageNo
                Case enmStage.No1
                    If IsSafePos(stageNo, gProtectData(enmStage.No2), mLimitPos) = False Then
                        Exit For
                    End If

                Case enmStage.No2
                    If IsSafePos(stageNo, gProtectData(enmStage.No1), mLimitPos) = False Then
                        Exit For
                    End If

                Case enmStage.No3
                    If IsSafePos(stageNo, gProtectData(enmStage.No4), mLimitPos) = False Then
                        Exit For
                    End If

                Case enmStage.No4
                    If IsSafePos(stageNo, gProtectData(enmStage.No3), mLimitPos) = False Then
                        Exit For
                    End If
            End Select
            mDieCount = mDieCount + 1
        Next

        endIndex = mDieCount + dispParam.MulitDieParam.Start - 1

        '[Note]:若都沒過就等吧
        If mDieCount = 0 Then
            Return False
        Else
            Return True
        End If

    End Function


    ''' <summary>[估算要走到哪一顆(多道點膠一次點多顆之條件式)]</summary>
    ''' <param name="stageNo"></param>
    ''' <param name="dispParam"></param>
    ''' <param name="maxIndex"></param>
    ''' <param name="endIndex"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function EstimateDispMultiDieMultiRound(ByVal stageNo As enmStage, ByVal dispParam As sDispParam, ByVal maxIndex As Integer, ByRef endIndex As Integer) As Boolean

        Dim mDispParam As sDispParam
        Dim mI As Integer
        Dim mDieCount As Integer
        Dim mLimitPos As Premtek.sPos
        Const mMaxPathLimite As Integer = 333           '資料比數的上限(333，因為同動路徑上限為1000，一組路徑約產出3組同動路徑)
        Dim mPathCounts As Integer
        Dim mTotalCounts As Integer
        Dim mRoundNo As Integer

        '[Note]:先檢查相關的安全防護，再執行下個步驟
        '[Note]:估算極限位置
        mPathCounts = 0
        mTotalCounts = 0
        mDieCount = 0
        mDispParam = dispParam
        For mI = dispParam.MulitDieParam.Start To maxIndex
            mDispParam.MulitDieParam.Start = mI
            mDispParam.MulitDieParam.Ending = mI

            For mRoundNo = 0 To mDispParam.Pattern.Round.Count - 1
                mDispParam.RoundNo = mRoundNo
                '[Note]:串列出所有的Path & 目標極限位置
                Call GetLimitPos(mDispParam, mLimitPos, mPathCounts)
                mTotalCounts = mTotalCounts + mPathCounts
                '[Note]:比對是否超出一次可以使用的數量
                If mTotalCounts > mMaxPathLimite Then
                    Exit For
                End If
            Next

            '[Note]:比對是否超出一次可以使用的數量
            If mTotalCounts > mMaxPathLimite Then
                Exit For
            End If

            '[Note]:比對是否超出保護框架
            Select Case stageNo
                Case enmStage.No1
                    If IsSafePos(stageNo, gProtectData(enmStage.No2), mLimitPos) = False Then
                        Exit For
                    End If

                Case enmStage.No2
                    If IsSafePos(stageNo, gProtectData(enmStage.No1), mLimitPos) = False Then
                        Exit For
                    End If

                Case enmStage.No3
                    If IsSafePos(stageNo, gProtectData(enmStage.No4), mLimitPos) = False Then
                        Exit For
                    End If

                Case enmStage.No4
                    If IsSafePos(stageNo, gProtectData(enmStage.No3), mLimitPos) = False Then
                        Exit For
                    End If
            End Select
            mDieCount = mDieCount + 1
        Next

        endIndex = mDieCount + dispParam.MulitDieParam.Start - 1
        '[Note]:若都沒過就等吧
        If mDieCount = 0 Then
            Return False
        Else
            Return True
        End If

    End Function

    Dim mStopWatch As New Stopwatch
    Sub DispStage_DispensingAction(ByRef sys As sSysParam)

        Static mSYS(enmStage.Max) As sDispSysParam                                          '[點膠動作模組參數 用於動作命令下達]
        Static mDispList(,) As List(Of sDispArrayIndex)                                     '[排列出點膠順序(Array)]
        Static mDispNodeIndex(enmStage.Max) As sIndex                                       '[紀錄執行到哪一個Node]
        Static mDispPattern(enmStage.Max) As CRecipePattern                                 '[紀錄目前Node之Pattern]
        Static mDispMultiDie(enmStage.Max) As enmDispMultiDie                               '[紀錄點膠方式(單顆單顆點或一次點多顆)]
        Static mDispRound(enmStage.Max) As Integer                                          '[紀錄目前Round]
        Static mDispListIndex(enmStage.Max) As sIndex                                       '[紀錄目前Array Index]
        Static mDispStepIndex(enmStage.Max) As sIndex                                       '[紀錄目前Step]
        Static mNodeName(enmStage.Max) As String
        Static mPatternName(enmStage.Max) As String
        Static mDispParamList(enmStage.Max) As List(Of sDispParam)                          '[紀錄暫存資料(跨節點資料串接專用)]
        Static mDispParam(enmStage.Max) As sDispParam                                       '[記錄暫存資料]
        Static mDispPathRegister(enmStage.Max) As List(Of sPatternPath)
        Static mLastSelectValve(enmStage.Max) As eValveWorkMode                             '[紀錄上次使用Stage內的第幾組閥]
        Static mSubDispStageNo1(enmMachineStation.MaxMachine) As Integer                    '[紀錄左側Stage對應的esys.SubDisp]
        Static mSubDispStageNo2(enmMachineStation.MaxMachine) As Integer                    '[紀錄右側Stage對應的esys.SubDisp]
        Static mIsNeedFlowRate(enmMachineStation.MaxMachine) As Boolean                     '[紀錄需不需要做秤重]
        Static mIsPurgeSubDispStageNo1(enmMachineStation.MaxMachine) As Boolean             '[紀錄左側Stage是否需要做Purge]
        Static mIsPurgeSubDispStageNo2(enmMachineStation.MaxMachine) As Boolean             '[紀錄右側Stage是否需要做Purge]
        Static mIsWorkBusy(enmStage.Max) As Boolean                                         '[目前各Stage點膠派工狀態] 
        Static mIsPurge(enmStage.Max) As Boolean
        Static mSubDispStage(enmStage.Max) As Integer
        Static mMaxRound As Integer
        Static mbUseStageNo(enmStage.Max) As Boolean
        Static mMaxExtendDistance(enmStage.Max) As Decimal
        Static mRoundLevel(enmStage.Max) As Integer
        Static mIsFristRun(enmStage.Max) As Boolean                                         '[判斷是否為點膠的第一筆子流程]
        Static mPurgeValveNo(enmStage.Max) As eValveWorkMode                                '[Purge做到哪一隻閥(用於多閥同動點膠)]
        Static mValveController(enmStage.Max) As Integer                                    '[閥體控制器]
        Static mControllerCount(enmStage.Max) As Integer
        Static mNozzleNo(enmStage.Max) As enmTemp                                           '[取加熱時對應的NozzleNo]

        Dim mTargetPos(enmStage.Max) As Premtek.sPos
        Dim mPos(enmStage.Max) As Premtek.sPos
        Dim mI(enmStage.Max) As Integer
        Dim mJ(enmStage.Max) As Integer
        Dim mAxisXState(enmStage.Max) As CommandStatus                                      '[X軸的狀態]
        Dim mAxisYState(enmStage.Max) As CommandStatus                                      '[Y軸的狀態]
        Dim mAxisZState(enmStage.Max) As CommandStatus                                      '[Z軸的狀態]
        Dim mAxisBState(enmStage.Max) As CommandStatus                                      '[B軸的狀態(Tilt)]
        Dim mMaxRoundCount(enmStage.Max) As Integer                                         '[紀錄最大的Round數量]
        Dim mCommandPosB(enmStage.Max) As Decimal                                           '[取出目前Tilt角度(Command Pos)]

        Static CheckList As Boolean = False                                                    '[ReRun 補Round 用]

        If IsNothing(mSYS(sys.StageNo)) Then
            mSYS(sys.StageNo) = New sDispSysParam
        End If

        Static old_sys(enmStage.Max) As Integer
        'Static oldEM As Long = 0
        If old_sys(sys.StageNo) <> sys.SysNum Then
            'mStopWatch.Start()
            'Debug.Print("點膠流程:" & sys.SysNum & " " & (mStopWatch.ElapsedMilliseconds - oldEM))
            'oldEM = mStopWatch.ElapsedMilliseconds
            old_sys(sys.StageNo) = sys.SysNum
        End If


        Select Case sys.SysNum
            Case sSysParam.SysLoopStart
                If IsNothing(mDispensingList(sys.StageNo)) = True Then
                    mDispensingList(sys.StageNo) = New List(Of sDispensingDie)
                End If
                mStopWatch.Restart()
                mLastSelectValve(sys.StageNo) = eValveWorkMode.None
                mIsExtendOn(sys.StageNo) = True '預設延伸路徑開啟

                '[Note]:Node順序排列
                Call DispenseRecipeNodeSort(gCRecipe, sys.StageNo)

                Call GetMaxRoundCount(gCRecipe, mMaxRound)
                mDispNodeIndex(sys.StageNo).Done = -1
                mDispNodeIndex(sys.StageNo).Start = -1
                mDispNodeIndex(sys.StageNo).Ending = -1

                '[Note]:先塞群組之加減速  
                With mDispParam(sys.StageNo)
                    .Acc = gCMotion.SyncParameter(sys.StageNo).Velocity.Acc * gCMotion.SyncParameter(sys.StageNo).Velocity.AccRatio
                    .Dec = gCMotion.SyncParameter(sys.StageNo).Velocity.Dec * gCMotion.SyncParameter(sys.StageNo).Velocity.DecRatio
                    .VelHigh = IIf(gSSystemParameter.MaxCrossDeviceVelocity > 0, gSSystemParameter.MaxCrossDeviceVelocity, 600) 'Soni + 2017.08.14 跨元件速度上限

                End With

                Call AdapterUsedStageNo(sys.MachineNo, mSubDispStageNo1, mSubDispStageNo2)

                '[Note]:一樣將資料存在這邊(藉由ValveNo來切)
                '[Note]:清空存
                With mSYS(sys.StageNo)
                    '[Note]:先切換成Valve2再切回Valve1，反正只是取出對應的值，但對外部而言是切換回預設的Valve1
                    .StageNo = sys.StageNo
                    .AxisX = sys.AxisX
                    .AxisY = sys.AxisY
                    .AxisZ = sys.AxisZ
                    .AxisA = sys.AxisA
                    .AxisB = sys.AxisB
                    .AxisC = sys.AxisC
                    .RunStatus = enmRunStatus.None
                    .SysNum = sSysParam.SysLoopStart
                    .CCDNo = sys.CCDNo
                    .BalanceNo = sys.BalanceNo
                    .PinNo = sys.PinNo
                    .FMCSNo = sys.FMCSNo
                    .ClearNo = sys.ClearNo
                    .LaserNo = sys.LaserNo
                    .ConveyorNo = sys.ConveyorNo
                    .Tag = sys.Tag
                End With

                mIsFristRun(sys.StageNo) = True
                mValveCmdFailCount(sys.StageNo) = 0
                gNodeLevel(sys.StageNo) = 1
                mRoundLevel(sys.StageNo) = 0
                mControllerCount(sys.StageNo) = 0

                If IsNeedDispeningProcess(sys) = True Then
                    mIsWorkBusy(sys.StageNo) = True
                    '[Note]:判斷點膠時，有沒有使用到第一組控制器(控制器跟閥不一定是綁一起的)
                    If gIsUseValveNo1(sys.StageNo) = True Then
                        mValveController(sys.StageNo) = sys.ValveControllerNo1
                        mControllerCount(sys.StageNo) = 1
                        sys.SysNum = 1100
                    Else
                        sys.SysNum = 1280
                    End If
                Else
                    If sys.StageNo = enmStage.No2 Or sys.StageNo = enmStage.No4 Then
                        gIsLSideWorking(sys.MachineNo) = True
                    End If
                    '[Note]:若有一側不用作業，則直接給NodeLevel至Max(應該不可能大於9999層)
                    gNodeLevel(sys.StageNo) = 9999
                    mIsWorkBusy(sys.StageNo) = False
                    sys.SysNum = 9000
                End If


                If gSSystemParameter.EnableVideoRun Then '[Note]視覺膠路需開燈
                    Call gSysAdapter.SetLightOnOff(gSysAdapter.CCDLightMapping(sys.CCDNo, enmValveLight.No1), enmONOFF.eON)
                    Call gSysAdapter.SetLightOnOff(gSysAdapter.CCDLightMapping(sys.CCDNo, enmValveLight.No2), enmONOFF.eON)
                    Call gSysAdapter.SetLightOnOff(gSysAdapter.CCDLightMapping(sys.CCDNo, enmValveLight.No3), enmONOFF.eON)
                    Call gSysAdapter.SetLightOnOff(gSysAdapter.CCDLightMapping(sys.CCDNo, enmValveLight.No4), enmONOFF.eON)
                End If

                '*********************************************************************************************
                '***************************Case 1100~1399:更新ValveController資訊****************************
                '*********************************************************************************************
            Case 1100
                '[Note]:Power On
                '       Check trigger board is ready before send command
                If gValvecontrollerCollection.IsBusy(mValveController(sys.StageNo)) = False Then
                    If gValvecontrollerCollection.SetValvePower(mValveController(sys.StageNo), True) = enmCommandState.Success Then
                        sys.SysNum = 1110
                    End If
                End If

            Case 1110
                '[Note]:判斷資料接收完成了沒? & 是否 TimeOut
                If gValvecontrollerCollection.IsBusy(mValveController(sys.StageNo)) = True Then
                    '[Note]:超過時間還沒處裡完-->在下一次
                    If gValvecontrollerCollection.IsTimeOut(mValveController(sys.StageNo)) = True Then
                        '[Note]:超過時間還沒處裡完-->在下一次
                        mValveCmdFailCount(sys.StageNo) = mValveCmdFailCount(sys.StageNo) + 1
                        If mValveCmdFailCount(sys.StageNo) > gVavleCmdMaxFailCounts Then
                            'TODO:異常訊息(Valve Controller Power On Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Alarm_2019002", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2019002), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Alarm_2019102", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2019102), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Alarm_2019202", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2019202), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Alarm_2019302", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2019302), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 1100
                        End If
                    End If
                Else
                    '[Note]:檢查接收資料
                    mValveRespose(mValveController(sys.StageNo)) = gValvecontrollerCollection.GetCommandResponseValvePower(mValveController(sys.StageNo))
                    If mValveRespose(mValveController(sys.StageNo)).Status = True Then
                        mValveCmdFailCount(sys.StageNo) = 0
                        sys.SysNum = 1120
                    Else
                        '[Note]:查看收到的內容是????
                        'Debug.Print("Power On: " & mValveRespose(mValveController(sys.StageNo)).STR)
                        mValveCmdFailCount(sys.StageNo) = mValveCmdFailCount(sys.StageNo) + 1
                        If mValveCmdFailCount(sys.StageNo) > gVavleCmdMaxFailCounts Then
                            'TODO:異常訊息(Valve Controller Power On Fail)
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Alarm_2019002", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2019002), eMessageLevel.Alarm)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Alarm_2019102", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2019102), eMessageLevel.Alarm)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Alarm_2019202", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2019202), eMessageLevel.Alarm)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Alarm_2019302", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2019302), eMessageLevel.Alarm)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 1100
                        End If
                    End If
                End If

            Case 1120
                '[Note]:Valve Mode
                '       Check trigger board is ready before send command
                If gValvecontrollerCollection.IsBusy(mValveController(sys.StageNo)) = False Then
                    If gValvecontrollerCollection.SetValveMode(mValveController(sys.StageNo), enmValveModeType.Timed) = enmCommandState.Success Then
                        sys.SysNum = 1130
                    End If
                End If

            Case 1130
                '[Note]:判斷資料接收完成了沒? & 是否 TimeOut
                If gValvecontrollerCollection.IsBusy(mValveController(sys.StageNo)) = True Then
                    '[Note]:超過時間還沒處裡完-->在下一次
                    If gValvecontrollerCollection.IsTimeOut(mValveController(sys.StageNo)) = True Then
                        '[Note]:超過時間還沒處裡完-->在下一次
                        mValveCmdFailCount(sys.StageNo) = mValveCmdFailCount(sys.StageNo) + 1
                        If mValveCmdFailCount(sys.StageNo) > gVavleCmdMaxFailCounts Then
                            'TODO:異常訊息(Valve Controller Set Valve Mode Fail)
                            gEqpMsg.AddHistoryAlarm("Alarm_2024002", "DispHistoryModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2024002), eMessageLevel.Alarm)
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 1120
                        End If
                    End If
                Else
                    '[Note]:檢查接收資料
                    mValveRespose(mValveController(sys.StageNo)) = gValvecontrollerCollection.GetCommandResponseValveMode(mValveController(sys.StageNo))
                    If mValveRespose(mValveController(sys.StageNo)).Status = True Then
                        mValveCmdFailCount(sys.StageNo) = 0
                        sys.SysNum = 1140
                    Else
                        '[Note]:查看收到的內容是????
                        'Debug.Print("Valve Mode: " & mValveRespose(mValveController(sys.StageNo)).STR)
                        mValveCmdFailCount(sys.StageNo) = mValveCmdFailCount(sys.StageNo) + 1
                        If mValveCmdFailCount(sys.StageNo) > gVavleCmdMaxFailCounts Then
                            'TODO:異常訊息(Valve Controller Set Valve Mode Fail)
                            gEqpMsg.AddHistoryAlarm("Error_1019004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019004), eMessageLevel.Error)
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 1120
                        End If
                    End If
                End If

            Case 1140
                '[Note]:Count
                '       Check trigger board is ready before send command
                If gValvecontrollerCollection.IsBusy(mValveController(sys.StageNo)) = False Then
                    If gValvecontrollerCollection.SetValveDispenseCount(mValveController(sys.StageNo), 1) = enmCommandState.Success Then
                        sys.SysNum = 1150
                    End If
                End If

            Case 1150
                '[Note]:判斷資料接收完成了沒? & 是否 TimeOut
                If gValvecontrollerCollection.IsBusy(mValveController(sys.StageNo)) = True Then
                    '[Note]:超過時間還沒處裡完-->在下一次
                    If gValvecontrollerCollection.IsTimeOut(mValveController(sys.StageNo)) = True Then
                        '[Note]:超過時間還沒處裡完-->在下一次
                        mValveCmdFailCount(sys.StageNo) = mValveCmdFailCount(sys.StageNo) + 1
                        If mValveCmdFailCount(sys.StageNo) > gVavleCmdMaxFailCounts Then
                            'TODO:異常訊息(Valve Controller Set Valve Dispense Count Fail)
                            gEqpMsg.AddHistoryAlarm("Error_1019004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019004), eMessageLevel.Error)
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 1140
                        End If
                    End If
                Else
                    '[Note]:檢查接收資料
                    mValveRespose(mValveController(sys.StageNo)) = gValvecontrollerCollection.GetCommandResponseValveDispenseCount(mValveController(sys.StageNo))
                    If mValveRespose(mValveController(sys.StageNo)).Status = True Then
                        mValveCmdFailCount(sys.StageNo) = 0
                        sys.SysNum = 1200
                    Else
                        '[Note]:查看收到的內容是????
                        'Debug.Print("Count: " & mValveRespose(mValveController(sys.StageNo)).STR)
                        mValveCmdFailCount(sys.StageNo) = mValveCmdFailCount(sys.StageNo) + 1
                        If mValveCmdFailCount(sys.StageNo) > gVavleCmdMaxFailCounts Then
                            'TODO:異常訊息(Valve Controller Set Valve Dispense Count Fail)
                            gEqpMsg.AddHistoryAlarm("Error_1019004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019004), eMessageLevel.Error)
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 1140
                        End If
                    End If
                End If

            Case 1200
                '[Note]:Setting Valve No1 Parameter
                '[Note]:Open Time(ms)
                '       Check trigger board is ready before send command
                If gJetValveDB.ContainsKey(gCRecipe.StageParts(sys.StageNo).ValveName(sys.SelectValve)) = True Then
                    If gValvecontrollerCollection.IsBusy(mValveController(sys.StageNo)) = False Then
                        '[Note]:根據使用閥的種類轉換對應的數值
                        Select Case gValvecontrollerCollection.ConnectionParameter(mValveController(sys.StageNo)).DeviceType
                            Case enmValvecontrollerType.PicoTouch
                                Select Case gJetValveDB(gCRecipe.StageParts(sys.StageNo).ValveName(sys.SelectValve)).ValveModel
                                    Case eValveModel.PicoPulse
                                        '[Note]:ms-->us
                                        mOpenTime(mValveController(sys.StageNo)) = gJetValveDB(gCRecipe.StageParts(sys.StageNo).ValveName(sys.SelectValve)).PicoTouch.OpenTime * 1000

                                    Case eValveModel.Advanjet
                                        'TODO:異常訊息(Valve Controller Set Valve Rising Time Fail)
                                        gEqpMsg.AddHistoryAlarm("Error_1019002", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019002), eMessageLevel.Error)
                                        sys.RunStatus = enmRunStatus.Alarm
                                        Exit Sub
                                End Select

                            Case enmValvecontrollerType.Virtual
                                mOpenTime(mValveController(sys.StageNo)) = 0

                        End Select

                        If gValvecontrollerCollection.SetOpenTime(mValveController(sys.StageNo), mOpenTime(mValveController(sys.StageNo))) = enmCommandState.Success Then
                            sys.SysNum = 1210
                        Else
                            'TODO:異常訊息(Valve Controller Set Valve Rising Time Fail)
                            gEqpMsg.AddHistoryAlarm("Error_1019002", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019002), eMessageLevel.Error)
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        End If
                    End If
                Else
                    'TODO:異常訊息(Jet Valve Data Base Fail)
                    gEqpMsg.AddHistoryAlarm("Error_1019003", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019003), eMessageLevel.Error)
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If

            Case 1210
                '[Note]:判斷資料接收完成了沒? & 是否 TimeOut
                If gValvecontrollerCollection.IsBusy(mValveController(sys.StageNo)) = True Then
                    '[Note]:超過時間還沒處裡完-->在下一次
                    If gValvecontrollerCollection.IsTimeOut(mValveController(sys.StageNo)) = True Then
                        '[Note]:超過時間還沒處裡完-->在下一次
                        mValveCmdFailCount(sys.StageNo) = mValveCmdFailCount(sys.StageNo) + 1
                        If mValveCmdFailCount(sys.StageNo) > gVavleCmdMaxFailCounts Then
                            'TODO:異常訊息(Valve Controller Set Valve Rising Time Fail)
                            gEqpMsg.AddHistoryAlarm("Error_1019004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019004), eMessageLevel.Error)
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 1200
                        End If
                    End If
                Else
                    '[Note]:檢查接收資料
                    mValveRespose(mValveController(sys.StageNo)) = gValvecontrollerCollection.GetCommandResponseOpenTime(mValveController(sys.StageNo))
                    If mValveRespose(mValveController(sys.StageNo)).Status = True Then
                        mValveCmdFailCount(sys.StageNo) = 0
                        sys.SysNum = 1220
                    Else
                        '[Note]:查看收到的內容是????
                        'Debug.Print("OpenTime: " & mValveRespose(mValveController(sys.StageNo)).STR)
                        mValveCmdFailCount(sys.StageNo) = mValveCmdFailCount(sys.StageNo) + 1
                        If mValveCmdFailCount(sys.StageNo) > gVavleCmdMaxFailCounts Then
                            'TODO:異常訊息(Valve Controller Set Valve Rising Time Fail)
                            gEqpMsg.AddHistoryAlarm("Error_1019004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019004), eMessageLevel.Error)
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 1200
                        End If
                    End If
                End If

            Case 1220
                '[Note]:Valve On Time(ms) 
                '       Check trigger board is ready before send command
                If gJetValveDB.ContainsKey(gCRecipe.StageParts(sys.StageNo).ValveName(sys.SelectValve)) = True Then
                    If gValvecontrollerCollection.IsBusy(mValveController(sys.StageNo)) = False Then
                        '[Note]:根據使用閥的種類轉換對應的數值
                        Select Case gValvecontrollerCollection.ConnectionParameter(mValveController(sys.StageNo)).DeviceType
                            Case enmValvecontrollerType.PicoTouch
                                Select Case gJetValveDB(gCRecipe.StageParts(sys.StageNo).ValveName(sys.SelectValve)).ValveModel
                                    Case eValveModel.PicoPulse
                                        '[Note]:ms
                                        mValveOnTime(mValveController(sys.StageNo)) = gJetValveDB(gCRecipe.StageParts(sys.StageNo).ValveName(sys.SelectValve)).PicoTouch.ValveOnTime

                                    Case eValveModel.Advanjet
                                        '[Note]:檔案錯誤，Load錯Recipe
                                        'TODO:異常訊息(Valve Controller Set Valve Rising Time Fail)
                                        gEqpMsg.AddHistoryAlarm("Error_1019002", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019002), eMessageLevel.Error)
                                        sys.RunStatus = enmRunStatus.Alarm
                                        Exit Sub
                                End Select

                            Case enmValvecontrollerType.Virtual
                                mValveOnTime(mValveController(sys.StageNo)) = 0

                        End Select

                        If gValvecontrollerCollection.SetValveOnTime(mValveController(sys.StageNo), mValveOnTime(mValveController(sys.StageNo))) = enmCommandState.Success Then
                            sys.SysNum = 1230
                        Else
                            'TODO:異常訊息(Valve Controller Set Valve Open Time Fail)
                            gEqpMsg.AddHistoryAlarm("Error_1019002", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019002), eMessageLevel.Error)
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        End If
                    End If
                Else
                    'TODO:異常訊息(Jet Valve Data Base Fail)
                    gEqpMsg.AddHistoryAlarm("Error_1019003", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019003), eMessageLevel.Error)
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If

            Case 1230
                '[Note]:判斷資料接收完成了沒? & 是否 TimeOut
                If gValvecontrollerCollection.IsBusy(mValveController(sys.StageNo)) = True Then
                    '[Note]:超過時間還沒處裡完-->在下一次
                    If gValvecontrollerCollection.IsTimeOut(mValveController(sys.StageNo)) = True Then
                        '[Note]:超過時間還沒處裡完-->在下一次
                        mValveCmdFailCount(sys.StageNo) = mValveCmdFailCount(sys.StageNo) + 1
                        If mValveCmdFailCount(sys.StageNo) > gVavleCmdMaxFailCounts Then
                            'TODO:異常訊息(Valve Controller Set Valve Open Time Fail)
                            gEqpMsg.AddHistoryAlarm("Error_1019004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019004), eMessageLevel.Error)
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 1220
                        End If
                    End If
                Else
                    '[Note]:檢查接收資料
                    mValveRespose(mValveController(sys.StageNo)) = gValvecontrollerCollection.GetCommandResponseValveOnTime(mValveController(sys.StageNo))
                    If mValveRespose(mValveController(sys.StageNo)).Status = True Then
                        mValveCmdFailCount(sys.StageNo) = 0
                        sys.SysNum = 1240
                    Else
                        '[Note]:查看收到的內容是????
                        'Debug.Print("Valve On Time: " & mValveRespose(mValveController(sys.StageNo)).STR)
                        mValveCmdFailCount(sys.StageNo) = mValveCmdFailCount(sys.StageNo) + 1
                        If mValveCmdFailCount(sys.StageNo) > gVavleCmdMaxFailCounts Then
                            'TODO:異常訊息(Valve Controller Set Valve Open Time Fail)
                            gEqpMsg.AddHistoryAlarm("Error_1019004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019004), eMessageLevel.Error)
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 1220
                        End If
                    End If
                End If

            Case 1240
                '[Note]:Close Time(ms)
                '       Check trigger board is ready before send command
                If gJetValveDB.ContainsKey(gCRecipe.StageParts(sys.StageNo).ValveName(sys.SelectValve)) = True Then
                    If gValvecontrollerCollection.IsBusy(mValveController(sys.StageNo)) = False Then
                        '[Note]:根據使用閥的種類轉換對應的數值
                        Select Case gValvecontrollerCollection.ConnectionParameter(mValveController(sys.StageNo)).DeviceType
                            Case enmValvecontrollerType.PicoTouch
                                Select Case gJetValveDB(gCRecipe.StageParts(sys.StageNo).ValveName(sys.SelectValve)).ValveModel
                                    Case eValveModel.PicoPulse
                                        '[Note]:ms-->us
                                        mCloseTime(mValveController(sys.StageNo)) = gJetValveDB(gCRecipe.StageParts(sys.StageNo).ValveName(sys.SelectValve)).PicoTouch.CloseTime * 1000

                                    Case eValveModel.Advanjet
                                        '[Note]:檔案錯誤，Load錯Recipe
                                        'TODO:異常訊息(Valve Controller Set Valve Rising Time Fail)
                                        gEqpMsg.AddHistoryAlarm("Error_1019002", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019002), eMessageLevel.Error)
                                        sys.RunStatus = enmRunStatus.Alarm
                                        Exit Sub

                                End Select

                            Case enmValvecontrollerType.Virtual
                                mCloseTime(mValveController(sys.StageNo)) = 0

                        End Select
                        If gValvecontrollerCollection.SetCloseTime(mValveController(sys.StageNo), mCloseTime(mValveController(sys.StageNo))) = enmCommandState.Success Then
                            sys.SysNum = 1250
                        Else
                            'TODO:異常訊息(Valve Controller Set Valve falling Time Fail)
                            gEqpMsg.AddHistoryAlarm("Error_1019002", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019002), eMessageLevel.Error)
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        End If
                    End If
                Else
                    'TODO:異常訊息(Jet Valve Data Base Fail)
                    gEqpMsg.AddHistoryAlarm("Error_1019003", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019003), eMessageLevel.Error)
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If

            Case 1250
                '[Note]:判斷資料接收完成了沒? & 是否 TimeOut
                If gValvecontrollerCollection.IsBusy(mValveController(sys.StageNo)) = True Then
                    '[Note]:超過時間還沒處裡完-->在下一次
                    If gValvecontrollerCollection.IsTimeOut(mValveController(sys.StageNo)) = True Then
                        '[Note]:超過時間還沒處裡完-->在下一次
                        mValveCmdFailCount(sys.StageNo) = mValveCmdFailCount(sys.StageNo) + 1
                        If mValveCmdFailCount(sys.StageNo) > gVavleCmdMaxFailCounts Then
                            'TODO:異常訊息(Valve Controller Set Valve falling Time Fail)
                            gEqpMsg.AddHistoryAlarm("Error_1019004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019004), eMessageLevel.Error)
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 1240
                        End If
                    End If
                Else
                    '[Note]:檢查接收資料
                    mValveRespose(mValveController(sys.StageNo)) = gValvecontrollerCollection.GetCommandResponseCloseTime(mValveController(sys.StageNo))
                    If mValveRespose(mValveController(sys.StageNo)).Status = True Then
                        mValveCmdFailCount(sys.StageNo) = 0
                        sys.SysNum = 1260
                    Else
                        '[Note]:查看收到的內容是????
                        Debug.Print("Close Time: " & mValveRespose(mValveController(sys.StageNo)).STR)
                        mValveCmdFailCount(sys.StageNo) = mValveCmdFailCount(sys.StageNo) + 1
                        If mValveCmdFailCount(sys.StageNo) > gVavleCmdMaxFailCounts Then
                            'TODO:異常訊息(Valve Controller Set Valve falling Time Fail)
                            gEqpMsg.AddHistoryAlarm("Error_1019004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019004), eMessageLevel.Error)
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 1240
                        End If
                    End If
                End If

            Case 1260
                '[Note]:Valve Off Time(ms)
                '       Check trigger board is ready before send command
                If gJetValveDB.ContainsKey(gCRecipe.StageParts(sys.StageNo).ValveName(sys.SelectValve)) = True Then
                    If gValvecontrollerCollection.IsBusy(mValveController(sys.StageNo)) = False Then
                        '[Note]:根據使用閥的種類轉換對應的數值
                        Select Case gValvecontrollerCollection.ConnectionParameter(mValveController(sys.StageNo)).DeviceType
                            Case enmValvecontrollerType.PicoTouch
                                Select Case gJetValveDB(gCRecipe.StageParts(sys.StageNo).ValveName(sys.SelectValve)).ValveModel
                                    Case eValveModel.PicoPulse
                                        '[Note]:ms
                                        mValveOffTime(mValveController(sys.StageNo)) = gJetValveDB(gCRecipe.StageParts(sys.StageNo).ValveName(sys.SelectValve)).PicoTouch.ValveOffTime

                                    Case eValveModel.Advanjet
                                        '[Note]:檔案錯誤，Load錯Recipe
                                        'TODO:異常訊息(Valve Controller Set Valve Rising Time Fail)
                                        gEqpMsg.AddHistoryAlarm("Error_1019002", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019002), eMessageLevel.Error)
                                        sys.RunStatus = enmRunStatus.Alarm
                                        Exit Sub

                                End Select

                            Case enmValvecontrollerType.Virtual
                                mValveOffTime(mValveController(sys.StageNo)) = 0

                        End Select
                        If gValvecontrollerCollection.SetValveOffTime(mValveController(sys.StageNo), mValveOffTime(mValveController(sys.StageNo))) = enmCommandState.Success Then
                            sys.SysNum = 1270
                        Else
                            'TODO:異常訊息(Valve Controller Set Valve Delay Time Fail)
                            gEqpMsg.AddHistoryAlarm("Error_1019002", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019002), eMessageLevel.Error)
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        End If
                    End If
                Else
                    'TODO:異常訊息(Jet Valve Data Base Fail)
                    gEqpMsg.AddHistoryAlarm("Error_1019003", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019003), eMessageLevel.Error)
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If

            Case 1270
                '[Note]:判斷資料接收完成了沒? & 是否 TimeOut
                If gValvecontrollerCollection.IsBusy(mValveController(sys.StageNo)) = True Then
                    '[Note]:超過時間還沒處裡完-->在下一次
                    If gValvecontrollerCollection.IsTimeOut(mValveController(sys.StageNo)) = True Then
                        '[Note]:超過時間還沒處裡完-->在下一次
                        mValveCmdFailCount(sys.StageNo) = mValveCmdFailCount(sys.StageNo) + 1
                        If mValveCmdFailCount(sys.StageNo) > gVavleCmdMaxFailCounts Then
                            'TODO:異常訊息(Valve Controller Set Valve Delay Time Fail)
                            gEqpMsg.AddHistoryAlarm("Error_1019004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019004), eMessageLevel.Error)
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 1260
                        End If
                    End If
                Else
                    '[Note]:檢查接收資料
                    mValveRespose(mValveController(sys.StageNo)) = gValvecontrollerCollection.GetCommandResponseValveOffTime(mValveController(sys.StageNo))
                    If mValveRespose(mValveController(sys.StageNo)).Status = True Then
                        mValveCmdFailCount(sys.StageNo) = 0
                        sys.SysNum = 1280
                    Else
                        '[Note]:查看收到的內容是????
                        'Debug.Print("Valve Off Time: " & mValveRespose(mValveController(sys.StageNo)).STR)
                        mValveCmdFailCount(sys.StageNo) = mValveCmdFailCount(sys.StageNo) + 1
                        If mValveCmdFailCount(sys.StageNo) > gVavleCmdMaxFailCounts Then
                            'TODO:異常訊息(Valve Controller Set Valve Delay Time Fail)
                            gEqpMsg.AddHistoryAlarm("Error_1019004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1019004), eMessageLevel.Error)
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        Else
                            sys.SysNum = 1260
                        End If
                    End If
                End If

            Case 1280
                '[Note]:判斷點膠時，有沒有使用到第二組控制器(控制器跟閥不一定是綁一起的)
                If mControllerCount(sys.StageNo) = gSSystemParameter.StageUseValveCount Then
                    sys.SysNum = 1500
                Else
                    If gIsUseValveNo2(sys.StageNo) = True Then
                        mValveController(sys.StageNo) = sys.ValveControllerNo2
                        mControllerCount(sys.StageNo) = mControllerCount(sys.StageNo) + 1
                        sys.SysNum = 1100
                    Else
                        sys.SysNum = 1500
                    End If
                End If


            Case 1500
                '[Note]:閥體溫度檢查
                If gTempDB.ContainsKey(gCRecipe.TempName) = True Then
                    If gIsUseValveNo1(sys.StageNo) = True Then
                        GetValveIndex(sys.StageNo, eValveWorkMode.Valve1, mNozzleNo(sys.StageNo))
                        If gTempDB(gCRecipe.TempName).TempParam(mNozzleNo(sys.StageNo)).Enabled = CheckState.Checked Then
                            If Math.Abs(gCRecipe.StageParts(sys.StageNo).NozzleTemperature(eValveWorkMode.Valve1) - gTempDB(gCRecipe.TempName).TempParam(mNozzleNo(sys.StageNo)).SetValue) > gSSystemParameter.TemperatureTolerance Then
                                'TODO:顯示info
                                gEqpMsg.AddHistoryAlarm("INFO_6001075", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(INFO_6001075), eMessageLevel.Information)
                                Exit Sub
                            End If
                        End If
                    End If

                    If gIsUseValveNo2(sys.StageNo) = True Then
                        GetValveIndex(sys.StageNo, eValveWorkMode.Valve2, mNozzleNo(sys.StageNo))
                        If gTempDB(gCRecipe.TempName).TempParam(mNozzleNo(sys.StageNo)).Enabled = CheckState.Checked Then
                            If Math.Abs(gCRecipe.StageParts(sys.StageNo).NozzleTemperature(eValveWorkMode.Valve2) - gTempDB(gCRecipe.TempName).TempParam(mNozzleNo(sys.StageNo)).SetValue) > gSSystemParameter.TemperatureTolerance Then
                                'TODO:顯示info
                                gEqpMsg.AddHistoryAlarm("INFO_6001075", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(INFO_6001075), eMessageLevel.Information)
                                Exit Sub
                            End If
                        End If
                    End If
                End If
                sys.SysNum = 1600


                '***********************************************************************
                '***********************************************************************
                '***********************************************************************
            Case 1600
                '[Note]:確認R側已經開始作業後，L側才可以開始作業
                Select Case sys.StageNo
                    Case enmStage.No1, enmStage.No3
                        If gIsLSideWorking(sys.MachineNo) = True Then
                            sys.SysNum = 1700
                        End If

                    Case Else
                        sys.SysNum = 1700

                End Select

                '***********************************************************************
                '***********************************************************************
                '***********************************************************************
            Case 1700
                '[Note]:判斷是否已跑完所有Node
                If mDispNodeIndex(sys.StageNo).Done = DispenseRelationshipList(sys.StageNo).Count - 1 And CheckList = False Then
                    '[Note]:完成所有Node
                    sys.SysNum = 9000
                Else
                    '[Note]:取下一個Node
                    '[Note]:基本上都是一個Node做完之後才在做下一個Node-->1800
                    '[Note]:不正常-->節點串接(必須全部都串接)-->1750
                    If CheckList = True Then '重新計算list
                        mDispNodeIndex(sys.StageNo).Done = -1
                        mDispNodeIndex(sys.StageNo).Start = 0
                        mDispNodeIndex(sys.StageNo).Ending = -1
                    Else
                        mDispNodeIndex(sys.StageNo).Start = mDispNodeIndex(sys.StageNo).Ending + 1
                    End If
                    'mDispNodeIndex(sys.StageNo).Start = mDispNodeIndex(sys.StageNo).Ending + 1
                    If gCRecipe.Node(sys.StageNo)(DispenseRelationshipList(sys.StageNo)(mDispNodeIndex(sys.StageNo).Start).NodeName).IsNodeConnect = True Then
                        mDispNodeIndex(sys.StageNo).Ending = DispenseRelationshipList(sys.StageNo).Count - 1
                        sys.SysNum = 3500
                    Else
                        mDispNodeIndex(sys.StageNo).Ending = mDispNodeIndex(sys.StageNo).Ending + 1
                        sys.SysNum = 1800
                    End If
                End If

            Case 1800
                '[Note]:將資料串接起來
                '       根據Node Name找出對應節點
                With DispenseRelationshipList(sys.StageNo)(mDispNodeIndex(sys.StageNo).Start)
                    mNodeName(sys.StageNo) = .NodeName
                    mPatternName(sys.StageNo) = .PatternName
                    gNodeLevel(sys.StageNo) = .NodeLevel
                End With
                mDispPattern(sys.StageNo) = gCRecipe.Pattern(mPatternName(sys.StageNo))

                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item
                ReDim Preserve mDispList(gSSystemParameter.StageCount - 1, mMaxRound - 1)

                For mI(sys.StageNo) = 0 To gCRecipe.Pattern(mPatternName(sys.StageNo)).Round.Count - 1
                    mDispList(sys.StageNo, mI(sys.StageNo)) = New List(Of sDispArrayIndex)
                    mDispList(sys.StageNo, mI(sys.StageNo)).Capacity = 1
                Next
                Call DispenseSortList(gCRecipe, sys.StageNo, mNodeName(sys.StageNo), mPatternName(sys.StageNo), mDispList)

                '[Note]:先列出該次要點膠的項次後，再決定要走哪種精度點膠
                mDispParam(sys.StageNo).ProcessTimeType = HaveProcessTimeCondition(mDispPattern(sys.StageNo))

                Select Case mDispParam(sys.StageNo).ProcessTimeType
                    Case eProcessTimeType.None
                        '[Note]:無時間限制型點膠流程
                        sys.SysNum = 2000

                    Case eProcessTimeType.ReturnTime
                        '[Note]:時間限制型點膠流程(ReturnTime)
                        CheckList = False
                        For i = 0 To mDispPattern(sys.StageNo).Round.Count - 2
                            If mDispList(sys.StageNo, i).Count <> mDispList(sys.StageNo, i + 1).Count Then
                                CheckList = True
                            End If
                        Next
                        If CheckList = True Then
                            sys.SysNum = 2400
                        Else
                            sys.SysNum = 2500
                        End If

                    Case eProcessTimeType.NextRoundDelayTime
                        '[Note]:時間限制型點膠流程(NextRoundDelayTime)

                        sys.SysNum = 2000 'Toby Retract 修改

                        'sys.SysNum = 3000

                End Select

                '*********************************************************************************************
                '****************************Case 2000~2499:無時間限制型點膠流程******************************
                '*********************************************************************************************
            Case 2000
                '[Note]:無時效性的點膠流程
                '[Note]:判斷單顆單顆做或多顆一次做
                'Call DetermineDispenseMultiDieMode(mDispPattern(sys.StageNo), mDispMultiDie(sys.StageNo))
                mDispRound(sys.StageNo) = -1
                mRoundLevel(sys.StageNo) = -1
                sys.SysNum = 2100

            Case 2100
                '[Note]:判斷所有Round都完成了
                If mDispRound(sys.StageNo) = mDispPattern(sys.StageNo).Round.Count - 1 Then
                    '[Note]:完成所有Round-->準備接下個Node
                    mDispNodeIndex(sys.StageNo).Done = mDispNodeIndex(sys.StageNo).Ending
                    sys.SysNum = 1700
                Else
                    '[Note]:換下個Round
					Call DetermineDispenseMultiDieMode(mDispPattern(sys.StageNo), mDispMultiDie(sys.StageNo), mDispRound(sys.StageNo)) 'Toby 原本在case 2000判斷式
                    mDispRound(sys.StageNo) = mDispRound(sys.StageNo) + 1
                    mDispListIndex(sys.StageNo).Start = -1
                    mDispListIndex(sys.StageNo).Ending = -1
                    mDispListIndex(sys.StageNo).Done = -1
                    mDispStepIndex(sys.StageNo).Start = -1
                    mDispStepIndex(sys.StageNo).Ending = -1
                    mDispStepIndex(sys.StageNo).Done = -1

                    mRoundLevel(sys.StageNo) = mDispRound(sys.StageNo)

                    With mDispParam(sys.StageNo)
                        .StageNo = sys.StageNo
                        .Recipe = gCRecipe
                        .Pattern = mDispPattern(sys.StageNo)
                        .RoundNo = mDispRound(sys.StageNo)
                    End With
                    If IsDispRound(mDispParam(sys.StageNo)) = True Then
                        sys.SysNum = 2200
                    Else
                        '[Note]:進到下個Round
                    End If
                End If

            Case 2200
                '[Note]:判斷已經做完此Round的所有DispList
                ' If mDispListIndex(sys.StageNo).Done = mDispList(sys.StageNo, mDispRound(sys.StageNo)).Count - 1 Then

                If mDispListIndex(sys.StageNo).Ending = mDispList(sys.StageNo, mDispRound(sys.StageNo)).Count - 1 Then
                    '[Note]:完成此Round-->準備接下個Round
                    sys.SysNum = 2100
                Else
                    mDispListIndex(sys.StageNo).Start = mDispListIndex(sys.StageNo).Ending + 1
                    mDispListIndex(sys.StageNo).Ending = mDispListIndex(sys.StageNo).Ending + 1
                    mDispStepIndex(sys.StageNo).Start = -1
                    mDispStepIndex(sys.StageNo).Ending = -1
                    mDispStepIndex(sys.StageNo).Done = -1

                    Select Case mDispMultiDie(sys.StageNo)
                        Case enmDispMultiDie.SingleDie
                            '[Note]:換下一個 DispListIndex(一次取一個)
                            sys.SysNum = 2300

                        Case enmDispMultiDie.MultiDie
                            '[Note]:做多顆，估算可以做幾顆(根據極限保護)
                            With mDispParam(sys.StageNo)
                                .ValveNo1 = mSYS(sys.StageNo).ValveNo1
                                .ValveNo2 = mSYS(sys.StageNo).ValveNo2
                                .StageNo = sys.StageNo
                                .Recipe = gCRecipe
                                .NodeName = mNodeName(sys.StageNo)
                                .Pattern = mDispPattern(sys.StageNo)
                                .RoundNo = mDispRound(sys.StageNo)
                                .DispList = mDispList(sys.StageNo, mDispRound(sys.StageNo))
                                .DispDieType = enmDispMultiDie.MultiDie
                                .MulitDieParam.Start = mDispListIndex(sys.StageNo).Start
                                GetSelectValve(mDispParam(sys.StageNo).Pattern, mDispParam(sys.StageNo).RoundNo, 0, .SelectValve, .PosB)
                            End With
                            If EstimateDispMultiDie(sys.StageNo, mDispParam(sys.StageNo), mDispList(sys.StageNo, mDispRound(sys.StageNo)).Count - 1, mDispListIndex(sys.StageNo).Ending) Then
                                sys.SysNum = 2300
                            End If
                            'Call EstimateDispMultiDie(sys.StageNo, mDispParam(sys.StageNo), mDispList(sys.StageNo, mDispRound(sys.StageNo)).Count - 1, mDispListIndex(sys.StageNo).Ending)
                            'sys.SysNum = 2300

                    End Select
                End If

            Case 2300
                '[Note]:判斷單顆作業還是多顆作業
                '           單顆-->無時間限制-->可能一次只有幾個Step
                '           多顆-->無時間限制
                Select Case mDispMultiDie(sys.StageNo)
                    Case enmDispMultiDie.SingleDie
                        '[Note]:判斷已經做完此顆的所有Step
                        If mDispStepIndex(sys.StageNo).Done = mDispPattern(sys.StageNo).Round(mDispRound(sys.StageNo)).StepCount - 1 Then
                            '[Note]:完成此顆的Step-->準備接下一顆
                            mDispListIndex(sys.StageNo).Done = mDispListIndex(sys.StageNo).Ending
                            sys.SysNum = 2200
                        Else
                            'Start step 0 
                            mDispStepIndex(sys.StageNo).Start = mDispStepIndex(sys.StageNo).Ending + 1
                            mDispStepIndex(sys.StageNo).Done = mDispStepIndex(sys.StageNo).Ending

                            '[Note]:取這次要從哪個Step做到哪個Step
                            Call EstimateStep(mDispPattern(sys.StageNo), mDispRound(sys.StageNo), mDispStepIndex(sys.StageNo).Done, mDispStepIndex(sys.StageNo).Start, mDispStepIndex(sys.StageNo).Ending)
                            '[Note]:CreateDispList
                            With mDispParam(sys.StageNo)
                                .ValveNo1 = mSYS(sys.StageNo).ValveNo1
                                .ValveNo2 = mSYS(sys.StageNo).ValveNo2
                                .StageNo = sys.StageNo
                                .Recipe = gCRecipe
                                .NodeName = mNodeName(sys.StageNo)
                                .Pattern = mDispPattern(sys.StageNo)
                                .RoundNo = mDispRound(sys.StageNo)
                                .DispList = mDispList(sys.StageNo, mDispRound(sys.StageNo))
                                '[Note]:單一顆流程(mDispListIndex(sys.StageNo).Start=Ending)
                                .DispDieType = enmDispMultiDie.SingleDie
                                .SingleDieParam.DieIndex = mDispListIndex(sys.StageNo).Start
                                .SingleDieParam.StartStep = mDispStepIndex(sys.StageNo).Start
                                .SingleDieParam.EndStep = mDispStepIndex(sys.StageNo).Ending
                                GetSelectValve(mDispParam(sys.StageNo).Pattern, mDispParam(sys.StageNo).RoundNo, mDispParam(sys.StageNo).SingleDieParam.StartStep, .SelectValve, .PosB)
                            End With
                            '[Note]:串列出所有的Path & 更新目標極限位置
                            mDispensingList(sys.StageNo).Clear()
                            Call CreateDispList(mDispParam(sys.StageNo), mDispPathRegister(sys.StageNo), mDispProtect(sys.StageNo).TargetPos, mDispensingList(sys.StageNo))
                            '[Note]:判斷跑哪種類型的點膠
                            mDispensingHistoryModel(sys.StageNo) = EstimateDispHistoryModel(mDispParam(sys.StageNo))
                            If mDispensingHistoryModel(sys.StageNo) = eDispHistoryModel.DispHistory Then
                                mSYS(sys.StageNo).IsNeedDummyRun = IsNeedDummyRunByPattern(mDispParam(sys.StageNo), mDispPatternMemory(sys.StageNo))
                            Else
                                mDispPatternMemory(sys.StageNo) = Nothing
                            End If
                            With mSYS(sys.StageNo)
                                .SelectValve = mDispParam(sys.StageNo).SelectValve
                                .DispPathRegister = mDispPathRegister(sys.StageNo)
                                .DispParam = mDispParam(sys.StageNo)
                                .DispParam.Recipe.DispHistory = gCRecipe.DispHistory
                                .DispHistoryModel = mDispensingHistoryModel(sys.StageNo)
                            End With
                            sys.SysNum = 4000
                        End If

                    Case enmDispMultiDie.MultiDie
                        '[Note]:CreateDispList
                        With mDispParam(sys.StageNo)
                            .ValveNo1 = mSYS(sys.StageNo).ValveNo1
                            .ValveNo2 = mSYS(sys.StageNo).ValveNo2
                            .StageNo = sys.StageNo
                            .Recipe = gCRecipe
                            .NodeName = mNodeName(sys.StageNo)
                            .Pattern = mDispPattern(sys.StageNo)
                            .RoundNo = mDispRound(sys.StageNo)
                            .DispList = mDispList(sys.StageNo, mDispRound(sys.StageNo))
                            '[Note]:多顆流程(mDispListIndex(sys.StageNo).Start<>Ending)
                            .DispDieType = enmDispMultiDie.MultiDie
                            .MulitDieParam.Start = mDispListIndex(sys.StageNo).Start
                            .MulitDieParam.Ending = mDispListIndex(sys.StageNo).Ending
                            GetSelectValve(mDispParam(sys.StageNo).Pattern, mDispParam(sys.StageNo).RoundNo, 0, .SelectValve, .PosB)
                        End With
                        '[Note]串列出所有的Path  & 更新目標極限位置
                        mDispensingList(sys.StageNo).Clear()
                        Call CreateDispList(mDispParam(sys.StageNo), mDispPathRegister(sys.StageNo), mDispProtect(sys.StageNo).TargetPos, mDispensingList(sys.StageNo))
                        '[Note]:判斷跑哪種類型的點膠
                        mDispensingHistoryModel(sys.StageNo) = EstimateDispHistoryModel(mDispParam(sys.StageNo))
                        If mDispensingHistoryModel(sys.StageNo) = eDispHistoryModel.DispHistory Then
                            mSYS(sys.StageNo).IsNeedDummyRun = IsNeedDummyRunByPattern(mDispParam(sys.StageNo), mDispPatternMemory(sys.StageNo))
                        Else
                            mDispPatternMemory(sys.StageNo) = Nothing
                        End If

                        With mSYS(sys.StageNo)
                            .SelectValve = mDispParam(sys.StageNo).SelectValve
                            .DispPathRegister = mDispPathRegister(sys.StageNo)
                            .DispParam = mDispParam(sys.StageNo)
                            .DispParam.Recipe.DispHistory = gCRecipe.DispHistory
                            .DispHistoryModel = mDispensingHistoryModel(sys.StageNo)
                        End With
                        sys.SysNum = 4000

                End Select

                '*********************************************************************************************
                '**********************Case 2400~2999:有時間限制型點膠流程(ReturnTime)************************
                '*********************************************************************************************
            Case 2400

                Dim min As Integer
                min = Int32.MaxValue
                For i = 0 To mDispPattern(sys.StageNo).Round.Count - 1
                    If mDispList(sys.StageNo, i).Count < min Then
                        min = mDispList(sys.StageNo, i).Count
                    End If
                Next
                '先將mDispList 清除_找出沒打完的Round
                For i = 0 To mDispPattern(sys.StageNo).Round.Count - 1
                    mDispList(sys.StageNo, i).RemoveRange(mDispList(sys.StageNo, i).Count - min, min)
                Next
                '將有問題的沒打完的die round 填成 OK
                For i = 0 To mDispPattern(sys.StageNo).Round.Count - 1
                    For J = 0 To mDispList(sys.StageNo, i).Count - 1
                        gStageMap(sys.StageNo).Node(mNodeName(sys.StageNo)).Round(i).SetDispensingStatus(mDispList(sys.StageNo, i).Item(J).IndexX, mDispList(sys.StageNo, i).Item(J).IndexY, eDispensingStatus.OK)
                        'gStageMap(sys.StageNo).Node(mNodeName(sys.StageNo)).Round(i).DispensingStatus(mDispList(sys.StageNo, i).Item(J).IndexX, mDispList(sys.StageNo, i).Item(J).IndexY) = eDispensingStatus.OK
                    Next
                Next
                sys.SysNum = 1700


            Case 2500
                'CheckList = False
                '[Note]::有時效性的點膠流程
                mDispListIndex(sys.StageNo).Start = 0
                mDispListIndex(sys.StageNo).Ending = 0
                mDispListIndex(sys.StageNo).Done = -1
                mDispRound(sys.StageNo) = 0

                '[Note]:只需StageNo、Pattern
                With mDispParam(sys.StageNo)
                    .ValveNo1 = mSYS(sys.StageNo).ValveNo1
                    .ValveNo2 = mSYS(sys.StageNo).ValveNo2
                    .RoundNo = mDispRound(sys.StageNo)
                    .StageNo = sys.StageNo
                    .Recipe = gCRecipe
                    .Pattern = mDispPattern(sys.StageNo)
                    GetSelectValve(mDispParam(sys.StageNo).Pattern, mDispParam(sys.StageNo).RoundNo, 0, .SelectValve, .PosB)
                End With
                If IsResetEstimateTimeByPattern(mDispParam(sys.StageNo), mDispTimePatternMemory(sys.StageNo)) = True Then
                    mDispTimeCompensation(sys.StageNo) = Nothing
                    mDispTimeList(sys.StageNo) = Nothing
                End If
                sys.SysNum = 2600

            Case 2600
                '[Note]:判斷已經做完所有DispList
                If mDispListIndex(sys.StageNo).Done = mDispList(sys.StageNo, mDispRound(sys.StageNo)).Count - 1 Then
                    '[Note]:完成此DieDispList-->準備接下個Node
                    mDispNodeIndex(sys.StageNo).Done = mDispNodeIndex(sys.StageNo).Ending
                    sys.SysNum = 1700
                Else
                    '[Note]:估測從哪顆做到哪顆(只限用在有時間限制型點膠)
                    mDispRound(sys.StageNo) = 0
                    With mDispParam(sys.StageNo)
                        .ValveNo1 = mSYS(sys.StageNo).ValveNo1
                        .ValveNo2 = mSYS(sys.StageNo).ValveNo2
                        .StageNo = sys.StageNo
                        .Recipe = gCRecipe
                        .NodeName = mNodeName(sys.StageNo)
                        .Pattern = mDispPattern(sys.StageNo)
                        .RoundNo = mDispRound(sys.StageNo)
                        .DispList = mDispList(sys.StageNo, mDispRound(sys.StageNo))
                        .DispDieType = enmDispMultiDie.MultiDie
                        .MulitDieParam.Start = mDispListIndex(sys.StageNo).Start
                        .MulitDieParam.Ending = mDispListIndex(sys.StageNo).Ending
                        GetSelectValve(mDispParam(sys.StageNo).Pattern, mDispParam(sys.StageNo).RoundNo, 0, .SelectValve, .PosB)
                    End With
                    sys.SysNum = 2700
                End If

            Case 2700
                '[Note]:取出這次點膠時的極限
                '[Note]:CreateDispList-->單純只取出極限位置
                With mDispParam(sys.StageNo)
                    .ValveNo1 = mSYS(sys.StageNo).ValveNo1
                    .ValveNo2 = mSYS(sys.StageNo).ValveNo2
                    .StageNo = sys.StageNo
                    .Recipe = gCRecipe
                    .NodeName = mNodeName(sys.StageNo)
                    .Pattern = mDispPattern(sys.StageNo)
                    .DispDieType = enmDispMultiDie.MultiDie
                    .MulitDieParam.Start = mDispListIndex(sys.StageNo).Start
                    If mDispListIndex(sys.StageNo).Start + (mDispPattern(sys.StageNo).Diecount - 1) > (mDispParam(sys.StageNo).DispList.Count - 1) Then
                        .MulitDieParam.Ending = (mDispParam(sys.StageNo).DispList.Count - 1)
                    Else
                        .MulitDieParam.Ending = mDispListIndex(sys.StageNo).Start + (mDispPattern(sys.StageNo).Diecount - 1)
                    End If
                    mDispListIndex(sys.StageNo).Start = .MulitDieParam.Start
                    mDispListIndex(sys.StageNo).Ending = .MulitDieParam.Ending

                    GetSelectValve(mDispParam(sys.StageNo).Pattern, mDispParam(sys.StageNo).RoundNo, 0, .SelectValve, .PosB)
                End With

                mTargetPos(sys.StageNo).PosX = 0
                mTargetPos(sys.StageNo).PosY = 0
                mTargetPos(sys.StageNo).PosZ = 0
                mTargetPos(sys.StageNo).PosB = 0
                mTargetPos(sys.StageNo).PosC = 0

                For mI(sys.StageNo) = 0 To mDispPattern(sys.StageNo).Round.Count - 1
                    With mDispParam(sys.StageNo)
                        .RoundNo = mI(sys.StageNo)
                        .DispList = mDispList(sys.StageNo, mI(sys.StageNo))
                    End With
                    mDispensingList(sys.StageNo).Clear()
                    Call CreateDispList(mDispParam(sys.StageNo), mDispPathRegister(sys.StageNo), mPos(sys.StageNo), mDispensingList(sys.StageNo), True, True)
                    '[Note]:更新極限位置
                    Select Case sys.StageNo
                        Case enmStage.No1, enmStage.No3
                            '[Note]:取X最大值
                            If mTargetPos(sys.StageNo).PosX < mPos(sys.StageNo).PosX Then
                                mTargetPos(sys.StageNo).PosX = mPos(sys.StageNo).PosX
                            End If
                        Case enmStage.No2, enmStage.No4
                            '[Note]:取X最小值
                            If mTargetPos(sys.StageNo).PosX > mPos(sys.StageNo).PosX Then
                                mTargetPos(sys.StageNo).PosX = mPos(sys.StageNo).PosX
                            End If
                    End Select
                    If mTargetPos(sys.StageNo).PosY > mPos(sys.StageNo).PosY Then
                        mTargetPos(sys.StageNo).PosY = mPos(sys.StageNo).PosY
                    End If
                Next
                mDispProtect(sys.StageNo).TargetPos = mTargetPos(sys.StageNo)
                mDispRound(sys.StageNo) = -1
                sys.SysNum = 2800

            Case 2800
                '[Note]:判斷所有Round都完成了
                If mDispRound(sys.StageNo) = mDispPattern(sys.StageNo).Round.Count - 1 Then
                    '[Note]:完成所有Round-->準備接下個批
                    mDispListIndex(sys.StageNo).Done = mDispListIndex(sys.StageNo).Ending
                    If mDispListIndex(sys.StageNo).Done <> mDispList(sys.StageNo, mDispRound(sys.StageNo)).Count - 1 Then
                        mDispListIndex(sys.StageNo).Start = mDispListIndex(sys.StageNo).Ending + 1
                    End If
                    sys.SysNum = 2600
                Else
                    '[Note]:換下個Round
                    mDispRound(sys.StageNo) = mDispRound(sys.StageNo) + 1
                    '[Note]:CreateDispList
                    With mDispParam(sys.StageNo)
                        .ValveNo1 = mSYS(sys.StageNo).ValveNo1
                        .ValveNo2 = mSYS(sys.StageNo).ValveNo2
                        .StageNo = sys.StageNo
                        .Recipe = gCRecipe
                        .NodeName = mNodeName(sys.StageNo)
                        .Pattern = mDispPattern(sys.StageNo)
                        .RoundNo = mDispRound(sys.StageNo)
                        .DispList = mDispList(sys.StageNo, mDispRound(sys.StageNo))
                        .DispDieType = enmDispMultiDie.MultiDie
                        .MulitDieParam.Start = mDispListIndex(sys.StageNo).Start
                        If mDispListIndex(sys.StageNo).Start + (mDispPattern(sys.StageNo).Diecount - 1) > (mDispParam(sys.StageNo).DispList.Count - 1) Then
                            .MulitDieParam.Ending = (mDispParam(sys.StageNo).DispList.Count - 1)
                        Else
                            .MulitDieParam.Ending = mDispListIndex(sys.StageNo).Start + (mDispPattern(sys.StageNo).Diecount - 1)
                        End If
                        '.MulitDieParam.Ending = mDispListIndex(sys.StageNo).Start + (mDispPattern(sys.StageNo).Diecount - 1)
                        GetSelectValve(mDispParam(sys.StageNo).Pattern, mDispParam(sys.StageNo).RoundNo, 0, .SelectValve, .PosB)
                    End With

                    If IsDispRound(mDispParam(sys.StageNo)) = True Then
                        '[Note]串列出所有的Path(以顆為單位) ，這裡不需要更新極限位置，因為前面已經將極限位置取出來了
                        mDispensingList(sys.StageNo).Clear()
                        Call CreateDispList(mDispParam(sys.StageNo), mDispPathRegister(sys.StageNo), mTargetPos(sys.StageNo), mDispensingList(sys.StageNo))
                        '[Note]:判斷跑哪種類型的點膠
                        mDispensingHistoryModel(sys.StageNo) = EstimateDispHistoryModel(mDispParam(sys.StageNo))
                        If mDispensingHistoryModel(sys.StageNo) = eDispHistoryModel.DispHistory Then
                            mSYS(sys.StageNo).IsNeedDummyRun = IsNeedDummyRunByPattern(mDispParam(sys.StageNo), mDispPatternMemory(sys.StageNo))
                        Else
                            mDispPatternMemory(sys.StageNo) = Nothing
                        End If
                        With mSYS(sys.StageNo)
                            .SelectValve = mDispParam(sys.StageNo).SelectValve
                            .DispPathRegister = mDispPathRegister(sys.StageNo)
                            .DispParam = mDispParam(sys.StageNo)
                            .DispParam.Recipe.DispHistory = gCRecipe.DispHistory
                            .DispHistoryModel = mDispensingHistoryModel(sys.StageNo)
                        End With
                        sys.SysNum = 4000
                    Else
                        '[Note]:換下個Round
                    End If
                End If


                '*********************************************************************************************
                '*************Case 3000~3499:有時間限制型點膠流程(NextRoundDelayTime)*************************
                '*********************************************************************************************
            Case 3000
                '[Note]::有時效性的點膠流程
                mDispListIndex(sys.StageNo).Start = 0
                mDispListIndex(sys.StageNo).Ending = 0
                mDispListIndex(sys.StageNo).Done = -1
                mDispRound(sys.StageNo) = 0
                sys.SysNum = 3100

            Case 3100
                '[Note]:判斷已經做完所有DispList
                If mDispListIndex(sys.StageNo).Done = mDispList(sys.StageNo, mDispRound(sys.StageNo)).Count - 1 Then
                    '[Note]:完成此DieDispList-->準備接下個Node
                    mDispNodeIndex(sys.StageNo).Done = mDispNodeIndex(sys.StageNo).Ending
                    sys.SysNum = 1700
                Else
                    '[Note]:做多顆，估算從哪一顆做到哪一顆(多道點膠之條件下)(根據極限保護)
                    With mDispParam(sys.StageNo)
                        .ValveNo1 = mSYS(sys.StageNo).ValveNo1
                        .ValveNo2 = mSYS(sys.StageNo).ValveNo2
                        .StageNo = sys.StageNo
                        .Recipe = gCRecipe
                        .NodeName = mNodeName(sys.StageNo)
                        .Pattern = mDispPattern(sys.StageNo)
                        .RoundNo = mDispRound(sys.StageNo)
                        .DispList = mDispList(sys.StageNo, mDispRound(sys.StageNo))
                        .DispDieType = enmDispMultiDie.MultiDie
                        .MulitDieParam.Start = mDispListIndex(sys.StageNo).Start
                        GetSelectValve(mDispParam(sys.StageNo).Pattern, mDispParam(sys.StageNo).RoundNo, 0, .SelectValve, .PosB)
                    End With
                    If EstimateDispMultiDieMultiRound(sys.StageNo, mDispParam(sys.StageNo), mDispList(sys.StageNo, mDispRound(sys.StageNo)).Count - 1, mDispListIndex(sys.StageNo).Ending) = True Then
                        sys.SysNum = 3200
                    End If
                End If

            Case 3200
                '[Note]:取出這次點膠時的極限
                '[Note]:CreateDispList-->單純只取出極限位置
                With mDispParam(sys.StageNo)
                    .ValveNo1 = mSYS(sys.StageNo).ValveNo1
                    .ValveNo2 = mSYS(sys.StageNo).ValveNo2
                    .StageNo = sys.StageNo
                    .Recipe = gCRecipe
                    .NodeName = mNodeName(sys.StageNo)
                    .Pattern = mDispPattern(sys.StageNo)
                    .DispDieType = enmDispMultiDie.MultiDie
                    .MulitDieParam.Start = mDispListIndex(sys.StageNo).Start
                    .MulitDieParam.Ending = mDispListIndex(sys.StageNo).Ending
                    GetSelectValve(mDispParam(sys.StageNo).Pattern, mDispParam(sys.StageNo).RoundNo, 0, .SelectValve, .PosB)
                End With
                mTargetPos(sys.StageNo).PosX = 0
                mTargetPos(sys.StageNo).PosY = 0
                mTargetPos(sys.StageNo).PosZ = 0
                mTargetPos(sys.StageNo).PosB = 0
                mTargetPos(sys.StageNo).PosC = 0

                For mI(sys.StageNo) = 0 To mDispPattern(sys.StageNo).Round.Count - 1
                    With mDispParam(sys.StageNo)
                        .RoundNo = mI(sys.StageNo)
                        .DispList = mDispList(sys.StageNo, mI(sys.StageNo))
                    End With
                    mDispensingList(sys.StageNo).Clear()
                    Call CreateDispList(mDispParam(sys.StageNo), mDispPathRegister(sys.StageNo), mPos(sys.StageNo), mDispensingList(sys.StageNo), True, True)
                    '[Note]:更新極限位置
                    Select Case sys.StageNo
                        Case enmStage.No1, enmStage.No3
                            '[Note]:取X最大值
                            If mTargetPos(sys.StageNo).PosX < mPos(sys.StageNo).PosX Then
                                mTargetPos(sys.StageNo).PosX = mPos(sys.StageNo).PosX
                            End If
                        Case enmStage.No2, enmStage.No4
                            '[Note]:取X最小值
                            If mTargetPos(sys.StageNo).PosX > mPos(sys.StageNo).PosX Then
                                mTargetPos(sys.StageNo).PosX = mPos(sys.StageNo).PosX
                            End If
                    End Select
                    If mTargetPos(sys.StageNo).PosY > mPos(sys.StageNo).PosY Then
                        mTargetPos(sys.StageNo).PosY = mPos(sys.StageNo).PosY
                    End If
                Next
                mDispProtect(sys.StageNo).TargetPos = mTargetPos(sys.StageNo)
                mDispRound(sys.StageNo) = -1
                sys.SysNum = 3300

            Case 3300
                '[Note]:判斷所有Round都完成了
                If mDispRound(sys.StageNo) = mDispPattern(sys.StageNo).Round.Count - 1 Then
                    '[Note]:完成所有Round-->準備接下個批
                    mDispListIndex(sys.StageNo).Done = mDispListIndex(sys.StageNo).Ending
                    If mDispListIndex(sys.StageNo).Done <> mDispList(sys.StageNo, mDispRound(sys.StageNo)).Count - 1 Then
                        mDispListIndex(sys.StageNo).Start = mDispListIndex(sys.StageNo).Ending + 1
                    End If
                    sys.SysNum = 3100
                Else
                    '[Note]:換下個Round
                    mDispRound(sys.StageNo) = mDispRound(sys.StageNo) + 1
                    '[Note]:CreateDispList
                    With mDispParam(sys.StageNo)
                        .ValveNo1 = mSYS(sys.StageNo).ValveNo1
                        .ValveNo2 = mSYS(sys.StageNo).ValveNo2
                        .StageNo = sys.StageNo
                        .Recipe = gCRecipe
                        .NodeName = mNodeName(sys.StageNo)
                        .Pattern = mDispPattern(sys.StageNo)
                        .RoundNo = mDispRound(sys.StageNo)
                        .DispList = mDispList(sys.StageNo, mDispRound(sys.StageNo))
                        .DispDieType = enmDispMultiDie.MultiDie
                        .MulitDieParam.Start = mDispListIndex(sys.StageNo).Start
                        .MulitDieParam.Ending = mDispListIndex(sys.StageNo).Ending
                        GetSelectValve(mDispParam(sys.StageNo).Pattern, mDispParam(sys.StageNo).RoundNo, 0, .SelectValve, .PosB)
                    End With

                    If IsDispRound(mDispParam(sys.StageNo)) = True Then
                        '[Note]串列出所有的Path(以顆為單位) ，這裡不需要更新極限位置，因為前面已經將極限位置取出來了
                        mDispensingList(sys.StageNo).Clear()
                        Call CreateDispList(mDispParam(sys.StageNo), mDispPathRegister(sys.StageNo), mTargetPos(sys.StageNo), mDispensingList(sys.StageNo))
                        '[Note]:判斷跑哪種類型的點膠
                        mDispensingHistoryModel(sys.StageNo) = EstimateDispHistoryModel(mDispParam(sys.StageNo))
                        If mDispensingHistoryModel(sys.StageNo) = eDispHistoryModel.DispHistory Then
                            mSYS(sys.StageNo).IsNeedDummyRun = IsNeedDummyRunByPattern(mDispParam(sys.StageNo), mDispPatternMemory(sys.StageNo))
                        Else
                            mDispPatternMemory(sys.StageNo) = Nothing
                        End If
                        With mSYS(sys.StageNo)
                            .SelectValve = mDispParam(sys.StageNo).SelectValve
                            .DispPathRegister = mDispPathRegister(sys.StageNo)
                            .DispParam = mDispParam(sys.StageNo)
                            .DispParam.Recipe.DispHistory = gCRecipe.DispHistory
                            .DispHistoryModel = mDispensingHistoryModel(sys.StageNo)
                        End With
                        sys.SysNum = 4000
                    Else
                        '[Note]:換下個Round
                    End If
                End If

                '*********************************************************************************************
                '*************************Case 3500~3999:跨節點無時間限制型點膠流程***************************
                '*********************************************************************************************
            Case 3500
                '[Note]:若是跨節點膠，則肯定是一次點多顆，且一次做完(但其實只有一顆，只是跨節點會變成多顆，一個節點就是一顆的概念)
                '[Note]:將所有的資料串接起來
                '[Note]:此用法需要有限制條件
                '       a.必須為無時間限制型點膠流程
                '       b.每個Pattern只能掛一個Round
                '
                mDispMultiDie(sys.StageNo) = enmDispMultiDie.MultiDie
                '[Note]:取出最大的RoundCount
                mMaxRoundCount(sys.StageNo) = 1
                mDispParamList(sys.StageNo) = New List(Of sDispParam)

                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item
                ReDim Preserve mDispList(gSSystemParameter.StageCount - 1, mMaxRoundCount(sys.StageNo) - 1)
                For mI(sys.StageNo) = 0 To mMaxRoundCount(sys.StageNo) - 1
                    mDispList(sys.StageNo, mI(sys.StageNo)) = New List(Of sDispArrayIndex)
                Next
                mDispensingList(sys.StageNo).Clear()

                For mJ(sys.StageNo) = mDispNodeIndex(sys.StageNo).Start To mDispNodeIndex(sys.StageNo).Ending
                    '[Note]:將資料串接起來
                    '       根據Node Name找出對應節點
                    With DispenseRelationshipList(sys.StageNo)(mJ(sys.StageNo))
                        mNodeName(sys.StageNo) = .NodeName
                        mPatternName(sys.StageNo) = .PatternName
                        gNodeLevel(sys.StageNo) = .NodeLevel
                    End With
                    mDispPattern(sys.StageNo) = gCRecipe.Pattern(mPatternName(sys.StageNo))

                    '[Note]:將DispListt串起來
                    If mJ(sys.StageNo) = mDispNodeIndex(sys.StageNo).Start Then
                        Call DispenseSortList(gCRecipe, sys.StageNo, mNodeName(sys.StageNo), mPatternName(sys.StageNo), mDispList, True)
                        mDispListIndex(sys.StageNo).Start = 0
                        mDispListIndex(sys.StageNo).Ending = mDispList(sys.StageNo, 0).Count - 1
                    Else
                        mDispListIndex(sys.StageNo).Start = mDispList(sys.StageNo, 0).Count
                        Call DispenseSortList(gCRecipe, sys.StageNo, mNodeName(sys.StageNo), mPatternName(sys.StageNo), mDispList, False)
                        mDispListIndex(sys.StageNo).Ending = mDispList(sys.StageNo, 0).Count - 1
                    End If

                    '[Note]:CreateDispList
                    With mDispParam(sys.StageNo)
                        '[Note]:跨節點點膠不可能再有時間限制型的點膠
                        .ProcessTimeType = eProcessTimeType.None
                        .StageNo = sys.StageNo
                        .Recipe = gCRecipe
                        .NodeName = mNodeName(sys.StageNo)
                        .Pattern = mDispPattern(sys.StageNo)
                        .RoundNo = 0
                        .DispList = mDispList(sys.StageNo, 0)
                        '[Note]:多顆流程(mDispListIndex(sys.StageNo).Start<>Ending)
                        .DispDieType = enmDispMultiDie.MultiDie
                        .MulitDieParam.Start = mDispListIndex(sys.StageNo).Start
                        .MulitDieParam.Ending = mDispListIndex(sys.StageNo).Ending
                        GetSelectValve(mDispPattern(sys.StageNo), 0, 0, .SelectValve, .PosB)
                    End With
                    '[Note]串列出所有的Path  & 更新目標極限位置
                    If mJ(sys.StageNo) = mDispNodeIndex(sys.StageNo).Start Then
                        Call CreateDispList(mDispParam(sys.StageNo), mDispPathRegister(sys.StageNo), mPos(sys.StageNo), mDispensingList(sys.StageNo), True)
                    Else
                        Call CreateDispList(mDispParam(sys.StageNo), mDispPathRegister(sys.StageNo), mPos(sys.StageNo), mDispensingList(sys.StageNo), False)
                    End If

                    mDispParamList(sys.StageNo).Capacity = mDispParamList(sys.StageNo).Count + 1
                    mDispParamList(sys.StageNo).Add(mDispParam(sys.StageNo))

                    '[Note]:更新極限位置(==須加上助跑所使用的延伸路徑長)
                    Select Case sys.StageNo
                        Case enmStage.No1, enmStage.No3
                            '[Note]:取X最大值
                            If mTargetPos(sys.StageNo).PosX < mPos(sys.StageNo).PosX Then
                                mTargetPos(sys.StageNo).PosX = mPos(sys.StageNo).PosX
                            End If
                        Case enmStage.No2, enmStage.No4
                            '[Note]:取X最小值
                            If mTargetPos(sys.StageNo).PosX > mPos(sys.StageNo).PosX Then
                                mTargetPos(sys.StageNo).PosX = mPos(sys.StageNo).PosX
                            End If
                    End Select
                    If mTargetPos(sys.StageNo).PosY > mPos(sys.StageNo).PosY Then
                        mTargetPos(sys.StageNo).PosY = mPos(sys.StageNo).PosY
                    End If
                Next

                mDispProtect(sys.StageNo).TargetPos = mTargetPos(sys.StageNo)
                sys.SysNum = 3600

            Case 3600
                '[Note]:判斷跑哪種類型的點膠
                mDispensingHistoryModel(sys.StageNo) = EstimateDispHistoryModel(sys.StageNo, mDispParamList(sys.StageNo))
                If mDispensingHistoryModel(sys.StageNo) = eDispHistoryModel.DispHistory Then
                    mSYS(sys.StageNo).IsNeedDummyRun = IsNeedDummyRunByPattern(sys.StageNo, mDispParamList(sys.StageNo), mDispPatternMemoryList(sys.StageNo))
                Else
                    mDispPatternMemoryList(sys.StageNo) = Nothing
                End If
                With mSYS(sys.StageNo)
                    .SelectValve = mDispParam(sys.StageNo).SelectValve
                    .DispPathRegister = mDispPathRegister(sys.StageNo)
                    .DispParam = mDispParam(sys.StageNo)
                    .DispParam.Recipe.DispHistory = gCRecipe.DispHistory
                    .DispHistoryModel = mDispensingHistoryModel(sys.StageNo)
                End With
                sys.SysNum = 4000


                '*************************************************************************************************
                '******************************************防撞機制(退後)*****************************************
                '*************************************************************************************************
            Case 4000
                '[Note]:若有汽缸之切換(切換閥體)-->會動到汽缸-->Z軸必須移到安全位置-->防撞保護
                If mLastSelectValve(sys.StageNo) = mDispParam(sys.StageNo).SelectValve Then
                    '[Note]:不用動汽缸
                    sys.SysNum = 4200
                Else
                    '[Note]:需動氣缸
                    mLastSelectValve(sys.StageNo) = mDispParam(sys.StageNo).SelectValve
                    If SetMotionVelocity(sys.AxisZ) = False Then
                        Select Case sys.StageNo
                            Case 0
                                gEqpMsg.AddHistoryAlarm("Error_1032017", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1032017), eMessageLevel.Error)
                            Case 1
                                gEqpMsg.AddHistoryAlarm("Error_1044017", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1044017), eMessageLevel.Error)
                            Case 2
                                gEqpMsg.AddHistoryAlarm("Error_1062017", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1062017), eMessageLevel.Error)
                            Case 3
                                gEqpMsg.AddHistoryAlarm("Error_1069017", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1069017), eMessageLevel.Error)
                        End Select
                        sys.RunStatus = enmRunStatus.Alarm
                        Exit Sub
                    End If
                    'ReviseVelocity(sys.AxisZ, gSSystemParameter.Pos.ZUpPos, gSSystemParameter.MaxCrossDeviceVelocity) 'Soni + 2017.08.23 修改速度為優化速度
                    If gCMotion.AbsMove(sys.AxisZ, gSSystemParameter.Pos.ZUpPos) <> CommandStatus.Sucessed Then
                        Select Case sys.StageNo
                            Case 0
                                gEqpMsg.AddHistoryAlarm("Error_1032000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1032000), eMessageLevel.Error)
                            Case 1
                                gEqpMsg.AddHistoryAlarm("Error_1044000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1044000), eMessageLevel.Error)
                            Case 2
                                gEqpMsg.AddHistoryAlarm("Error_1062000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1062000), eMessageLevel.Error)
                            Case 3
                                gEqpMsg.AddHistoryAlarm("Error_1069000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1069000), eMessageLevel.Error)
                        End Select
                        sys.RunStatus = enmRunStatus.Alarm
                        Exit Sub
                    End If
                    sys.SysNum = 4100
                End If

            Case 4100
                '[Note]:Check Motion Done
                If gCMotion.MotionDone(sys.AxisZ) = CommandStatus.Sucessed Then
                    '[Note]:汽缸切換
                    sys.SysNum = 4200
                End If

            Case 4200
                '[Note]:安全位置檢察 XY移動前位置確認(只有800AQ需要做此項確認)
                '[Note]:更新各軸的目標位置
                '[Note]:L側動完後，R側就可以動了
                gIsLSideWorking(sys.MachineNo) = True
                gProtectData(sys.StageNo).TargetPos = mDispProtect(sys.StageNo).TargetPos
                If EstimateIsSafePos(sys.StageNo, gNodeLevel, mRoundLevel) = True Then
                    sys.SysNum = 4600
                Else
                    sys.SysNum = 4300
                End If

            Case 4300
                '[Note]:檢查有沒有人應該退至安全區
                Select Case sys.StageNo
                    Case enmStage.No1, enmStage.No3
                        '[說明]:當單Stage動作時,另一頭Node為0時(不動作Stage)!!!是不會啟動移動至安全位置,移動Stage只能無限等待(另一頭回安全位置)
                        '目前確認另一頭Node為0時(不動作Stage)會移至原點位置,如果此位置還會觸發安全位置檢察失敗,表示設定位置已超出極限,需修改Recipe or 放寬安全位置(不會撞機為原則)<=不建議
                        Select Case sys.StageNo
                            Case enmStage.No1
                                If gSYS(eSys.DispStage2).RunStatus = enmRunStatus.Finish And gIsRSideNeedGoToSafePos(sys.MachineNo) = True Then
                                    gEqpMsg.AddHistoryAlarm("Error_1042005", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1042005), eMessageLevel.Error)
                                    sys.RunStatus = enmRunStatus.Alarm
                                    Exit Sub
                                End If
                            Case enmStage.No3
                                If gSYS(eSys.DispStage4).RunStatus = enmRunStatus.Finish And gIsRSideNeedGoToSafePos(sys.MachineNo) = True Then
                                    gEqpMsg.AddHistoryAlarm("Error_1042005", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1042005), eMessageLevel.Error)
                                    sys.RunStatus = enmRunStatus.Alarm
                                    Exit Sub
                                End If
                        End Select

                        '[Note]:檢查R側是否有叫L側退開
                        If gIsLSideNeedGoToSafePos(sys.MachineNo) = True Then
                            '[Note]:根據另一側的資訊決定要退到哪去
                            Call EstimateGoBackPos(sys.StageNo, gProtectData, gProtectData(sys.StageNo).TargetPos)
                            gIsLSideNeedGoToSafePos(sys.MachineNo) = False
                            sys.SysNum = 4400
                        Else
                            sys.SysNum = 4200
                        End If

                    Case enmStage.No2, enmStage.No4
                        '[說明]:當單Stage動作時,另一頭Node為0時(不動作Stage)!!!是不會啟動移動至安全位置,移動Stage只能無限等待(另一頭回安全位置)
                        '目前確認另一頭Node為0時(不動作Stage)會移至原點位置,如果此位置還會觸發安全位置檢察失敗,表示設定位置已超出極限,需修改Recipe or 放寬安全位置(不會撞機為原則)<=不建議
                        Select Case sys.StageNo
                            Case enmStage.No2
                                If gSYS(eSys.DispStage1).RunStatus = enmRunStatus.Finish And gIsLSideNeedGoToSafePos(sys.MachineNo) = True Then
                                    gEqpMsg.AddHistoryAlarm("Error_1030006", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1030006), eMessageLevel.Error)
                                    sys.RunStatus = enmRunStatus.Alarm
                                    Exit Sub
                                End If
                            Case enmStage.No4
                                If gSYS(eSys.DispStage3).RunStatus = enmRunStatus.Finish And gIsLSideNeedGoToSafePos(sys.MachineNo) = True Then
                                    gEqpMsg.AddHistoryAlarm("Error_1030006", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1030006), eMessageLevel.Error)
                                    sys.RunStatus = enmRunStatus.Alarm
                                    Exit Sub
                                End If
                        End Select

                        '[Note]:檢查L側是否有叫R側退開
                        '       若叫R側退, 則優先(因為NodeLevel比對方低)
                        If gIsRSideNeedGoToSafePos(sys.MachineNo) = True Then
                            '[Note]:根據另一側的資訊決定要退到哪去
                            Call EstimateGoBackPos(sys.StageNo, gProtectData, gProtectData(sys.StageNo).TargetPos)
                            gIsRSideNeedGoToSafePos(sys.MachineNo) = False
                            sys.SysNum = 4400
                        Else
                            sys.SysNum = 4200
                        End If

                End Select

            Case 4400
                '[Note]:退至安全區 
                ReviseVelocity(sys.AxisY, gProtectData(sys.StageNo).TargetPos.PosY, gSSystemParameter.MaxCrossDeviceVelocity) 'Soni + 2017.08.23 修改速度為優化速度
                If gCMotion.AbsMove(sys.AxisY, gProtectData(sys.StageNo).TargetPos.PosY) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1031000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1031000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1043000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1043000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1061000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1061000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1068000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1068000), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If
                ReviseVelocity(sys.AxisX, gProtectData(sys.StageNo).TargetPos.PosX, gSSystemParameter.MaxCrossDeviceVelocity) 'Soni + 2017.08.23 修改速度為優化速度
                If gCMotion.AbsMove(sys.AxisX, gProtectData(sys.StageNo).TargetPos.PosX) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1030000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1030000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1042000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1042000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1060000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1060000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1067000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1067000), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                End If
                sys.SysNum = 4500

                    Case 4500
                        '[Note]:等待Table Stop
                        mAxisXState(sys.StageNo) = gCMotion.MotionDone(sys.AxisX)
                        mAxisYState(sys.StageNo) = gCMotion.MotionDone(sys.AxisY)
                        If mAxisXState(sys.StageNo) <> CommandStatus.Sucessed Then
                            If gCMotion.IsMoveTimeOut(sys.AxisX) Then
                                Select Case sys.StageNo
                                    Case 0
                                        gEqpMsg.AddHistoryAlarm("Error_1030004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1030004), eMessageLevel.Error)
                                    Case 1
                                        gEqpMsg.AddHistoryAlarm("Error_1042004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1042004), eMessageLevel.Error)
                                    Case 2
                                        gEqpMsg.AddHistoryAlarm("Error_1060004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1060004), eMessageLevel.Error)
                                    Case 3
                                        gEqpMsg.AddHistoryAlarm("Error_1067004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1067004), eMessageLevel.Error)
                                End Select
                                sys.RunStatus = enmRunStatus.Alarm
                            End If
                            Exit Sub
                        End If
                        If mAxisYState(sys.StageNo) <> CommandStatus.Sucessed Then
                            If gCMotion.IsMoveTimeOut(sys.AxisY) Then
                                Select Case sys.StageNo
                                    Case 0
                                        gEqpMsg.AddHistoryAlarm("Error_1031004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1031004), eMessageLevel.Error)
                                    Case 1
                                        gEqpMsg.AddHistoryAlarm("Error_1043004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1043004), eMessageLevel.Error)
                                    Case 2
                                        gEqpMsg.AddHistoryAlarm("Error_1061004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1061004), eMessageLevel.Error)
                                    Case 3
                                        gEqpMsg.AddHistoryAlarm("Error_1068004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1068004), eMessageLevel.Error)
                                End Select
                                sys.RunStatus = enmRunStatus.Alarm
                            End If
                            Exit Sub
                        End If
                        sys.SysNum = 4200

                        '*******************************************************************************
                        '*******************************Tilt軸移動<尚未測試>****************************
                        '*******************************************************************************
            Case 4600
                '[Note]:先判斷有沒有Tilt軸
                '       若Tilt軸位置沒有更動，則下述的動作都可以省下來。
                '       要移動Tilt軸之前必須先把Z軸移至安全位置-->然後再移動Tilt-->然後再進入流程
                If sys.AxisB <> -1 Then
                    '[Note]:移動Tilt
                    gCMotion.GetCommandValue(sys.AxisB, mCommandPosB(sys.StageNo))
                    If mCommandPosB(sys.StageNo) = mSYS(sys.StageNo).DispParam.PosB Then
                        '[Note]: 若Tilt軸位置沒有更動，則下述的動作都可以省下來(先把Z軸移至安全位置-->然後再移動Tilt)。
                        sys.SysNum = 6000
                    Else
                        sys.SysNum = 4650
                    End If
                Else
                    sys.SysNum = 6000
                End If

            Case 4650
                '[Note]:移動Z軸至上升位置
                'ReviseVelocity(sys.AxisZ, gSSystemParameter.Pos.ZUpPos, gSSystemParameter.MaxCrossDeviceVelocity) 'Soni + 2017.08.23 修改速度為優化速度
                If gCMotion.AbsMove(sys.AxisZ, gSSystemParameter.Pos.ZUpPos) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1032000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1032000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1044000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1044000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1062000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1062000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1069000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1069000), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                Else
                    sys.SysNum = 4700
                End If

                    Case 4700
                        '[Note]:等待Table Stop
                        mAxisZState(sys.StageNo) = gCMotion.MotionDone(sys.AxisZ)
                        If mAxisZState(sys.StageNo) <> CommandStatus.Sucessed Then
                            If gCMotion.IsMoveTimeOut(sys.AxisZ) Then
                                Select Case sys.StageNo
                                    Case 0
                                        gEqpMsg.AddHistoryAlarm("Error_1032004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1032004), eMessageLevel.Error)
                                    Case 1
                                        gEqpMsg.AddHistoryAlarm("Error_1044004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1044004), eMessageLevel.Error)
                                    Case 2
                                        gEqpMsg.AddHistoryAlarm("Error_1062004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1062004), eMessageLevel.Error)
                                    Case 3
                                        gEqpMsg.AddHistoryAlarm("Error_1069004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1069004), eMessageLevel.Error)
                                End Select
                                sys.RunStatus = enmRunStatus.Alarm
                            End If
                            Exit Sub
                        Else
                            sys.SysNum = 4800
                        End If

            Case 4800
                '[Note]:移動Tilt
                ReviseVelocity(sys.AxisB, mSYS(sys.StageNo).DispParam.PosB, gSSystemParameter.MaxCrossDeviceVelocity) 'Soni + 2017.08.23 修改速度為優化速度
                If gCMotion.AbsMove(sys.AxisB, mSYS(sys.StageNo).DispParam.PosB) <> CommandStatus.Sucessed Then
                    Select Case sys.StageNo
                        Case 0
                            gEqpMsg.AddHistoryAlarm("Error_1034000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1034000), eMessageLevel.Error)
                        Case 1
                            gEqpMsg.AddHistoryAlarm("Error_1046000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1046000), eMessageLevel.Error)
                        Case 2
                            gEqpMsg.AddHistoryAlarm("Error_1064000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1064000), eMessageLevel.Error)
                        Case 3
                            gEqpMsg.AddHistoryAlarm("Error_1071000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1071000), eMessageLevel.Error)
                    End Select
                    sys.RunStatus = enmRunStatus.Alarm
                    Exit Sub
                Else
                    sys.SysNum = 4900
                End If

                    Case 4900
                        '[Note]:等待Table Stop
                        mAxisBState(sys.StageNo) = gCMotion.MotionDone(sys.AxisB)
                        If mAxisBState(sys.StageNo) <> CommandStatus.Sucessed Then
                            If gCMotion.IsMoveTimeOut(sys.AxisB) Then
                                'TODO:異常訊息(Tilt Axis Moving TimeOut Fail)
                                Select Case sys.StageNo
                                    Case 0
                                        gEqpMsg.AddHistoryAlarm("Error_1034004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1034004), eMessageLevel.Error)
                                    Case 1
                                        gEqpMsg.AddHistoryAlarm("Error_1046004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1046004), eMessageLevel.Error)
                                    Case 2
                                        gEqpMsg.AddHistoryAlarm("Error_1064004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1064004), eMessageLevel.Error)
                                    Case 3
                                        gEqpMsg.AddHistoryAlarm("Error_1071004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1071004), eMessageLevel.Error)
                                End Select
                                sys.RunStatus = enmRunStatus.Alarm
                            End If
                            Exit Sub
                        Else
                            sys.SysNum = 6000
                        End If

                        '*******************************************************************************
                        '****************派工給HistoryModel點膠或NonHistory Model點膠*******************
                        '*******************************************************************************
                    Case 6000
                        '[Note]:下命令給點膠子流程
                        '[Note]:系統狀態改為運行中，且由起始索引開始工作

                        If mSYS(sys.StageNo).DispPathRegister.Count > 0 Then
                            mSYS(sys.StageNo).SysNum = sDispSysParam.SysLoopStart
                            mSYS(sys.StageNo).RunStatus = enmRunStatus.Running
                            'mSYS(sys.StageNo).IsCanPause = True
                            mSYS(sys.StageNo).IsMultiDispense = gSSystemParameter.MultiDispenseEnable
                            '[Note]:第一次進入點膠子流程時，強制要求送所有Trigger Cmd
                            If mIsFristRun(sys.StageNo) = True Then
                                mIsFristRun(sys.StageNo) = False
                                mSYS(sys.StageNo).IsNeedSendCmd = True
                            Else
                                mSYS(sys.StageNo).IsNeedSendCmd = False
                            End If
                            sys.SysNum = 6100
                        Else
                            '[Note]:沒有點膠的派工，直接視為完成
                            If mDispensingList(sys.StageNo).Count <> 0 Then
                                For mI(sys.StageNo) = 0 To mDispensingList(sys.StageNo).Count - 1
                                    'gStageMap(sys.StageNo).Node(mDispensingList(sys.StageNo)(mI(sys.StageNo)).NodeName).Round(mDispensingList(sys.StageNo)(mI(sys.StageNo)).RoundNo).DispensingStatus(mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexX, mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexY) = eDispensingStatus.OK
                                    'Eason 20170302 Ticket:100090 , System Update Crash
                                    gStageMap(sys.StageNo).Node(mDispensingList(sys.StageNo)(mI(sys.StageNo)).NodeName).Round(mDispensingList(sys.StageNo)(mI(sys.StageNo)).RoundNo).SetDispensingStatus(mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexX, mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexY, eDispensingStatus.OK)

                                    Call WriteDieStatusForMappingData("GG", eDataType.eDispensing, sys.StageNo, mDispensingList(sys.StageNo)(mI(sys.StageNo)).NodeName, mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexX, mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexY, eDispensingStatus.OK)
                                Next
                            End If
                            mTriggerCmdFailCount(sys.StageNo) = 0
                            sys.SysNum = 6200
                        End If

                    Case 6100
                '[Note]:跑點膠子流程(更新流程)
                '       若外部給暫停的命令且流程中是允許暫停，則才可以暫停
                sys.IsCanPause = False
                If mSYS(sys.StageNo).RunStatus = enmRunStatus.Running Then
                    Select Case mSYS(sys.StageNo).DispHistoryModel
                        Case eDispHistoryModel.DispHistory
                            DispHistoryModelAction(mSYS(sys.StageNo))

                        Case eDispHistoryModel.DispNonHistory
                            'DispTestAction(mSYS(sys.StageNo))
                            DispNonHistoryModelAction(mSYS(sys.StageNo))

                    End Select
                End If

                '[Note]:判斷子流程是否完成
                If mSYS(sys.StageNo).RunStatus = enmRunStatus.Finish Then
                    If mDispensingList(sys.StageNo).Count <> 0 Then
                        For mI(sys.StageNo) = 0 To mDispensingList(sys.StageNo).Count - 1
                            'gStageMap(sys.StageNo).Node(mDispensingList(sys.StageNo)(mI(sys.StageNo)).NodeName).Round(mDispensingList(sys.StageNo)(mI(sys.StageNo)).RoundNo).DispensingStatus(mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexX, mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexY) = eDispensingStatus.OK
                            'Eason 20170302 Ticket:100090 , System Update Crash
                            gStageMap(sys.StageNo).Node(mDispensingList(sys.StageNo)(mI(sys.StageNo)).NodeName).Round(mDispensingList(sys.StageNo)(mI(sys.StageNo)).RoundNo).SetDispensingStatus(mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexX, mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexY, eDispensingStatus.OK)

                            Call WriteDieStatusForMappingData("GG", eDataType.eDispensing, sys.StageNo, mDispensingList(sys.StageNo)(mI(sys.StageNo)).NodeName, mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexX, mDispensingList(sys.StageNo)(mI(sys.StageNo)).IndexY, eDispensingStatus.OK)
                        Next
                    End If
                    mTriggerCmdFailCount(sys.StageNo) = 0
                    Debug.Print("Updata Status")
                    sys.IsCanPause = True
                    If (sys.ExternalPause = True And sys.IsCanPause = True) Then
                        Debug.Print("點膠流程暫停 mSYS(sys.StageNo):" & mSYS(sys.StageNo).IsCanPause & " sys:" & sys.IsCanPause)
                        Exit Sub
                    End If
                    sys.SysNum = 6200
                End If
                    Case 6200
                                  Select Case mDispParam(sys.StageNo).ProcessTimeType
                    Case eProcessTimeType.None
                        Select Case mDispMultiDie(sys.StageNo)
                            Case enmDispMultiDie.SingleDie
                                sys.SysNum = 2300
                            Case enmDispMultiDie.MultiDie
                                sys.SysNum = 2200
                        End Select

                    Case eProcessTimeType.ReturnTime
                        '[Note]:有時間限制型點膠流程
                        '[Note]:檢查Round處理完了嗎
                        If mDispRound(sys.StageNo) <> mDispPattern(sys.StageNo).Round.Count - 1 Then
                            sys.SysNum = 2800
                        Else
                            sys.SysNum = 6500
                        End If
                    Case eProcessTimeType.NextRoundDelayTime
                        '[Note]:有時間限制型點膠流程
                        '[Note]:檢查Round處理完了嗎
                        If mDispRound(sys.StageNo) <> mDispPattern(sys.StageNo).Round.Count - 1 Then
                            'sys.SysNum = 3300
                            'Toby Retract 修改
                            Select Case mDispMultiDie(sys.StageNo)
                                Case enmDispMultiDie.SingleDie
                                    sys.SysNum = 2300
                                Case enmDispMultiDie.MultiDie
                                    sys.SysNum = 2200
                            End Select
                        Else
                            sys.SysNum = 6500
                        End If

                End Select


                        '***********************************************************************************************
                        '***********************************************************************************************
                        '***********************************************************************************************
            Case 6500
                '[Note]:檢查有沒有人應該退至安全區
                Select Case sys.StageNo
                    Case enmStage.No1, enmStage.No3
                        '[說明]:當單Stage動作時,另一頭Node為0時(不動作Stage)!!!是不會啟動移動至安全位置,移動Stage只能無限等待(另一頭回安全位置)
                        '目前確認另一頭Node為0時(不動作Stage)會移至原點位置,如果此位置還會觸發安全位置檢察失敗,表示設定位置已超出極限,需修改Recipe or 放寬安全位置(不會撞機為原則)<=不建議
                        Select Case sys.StageNo
                            Case enmStage.No1
                                If gSYS(eSys.DispStage2).RunStatus = enmRunStatus.Finish And gIsRSideNeedGoToSafePos(sys.MachineNo) = True Then
                                    gEqpMsg.AddHistoryAlarm("Error_1042005", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1042005), eMessageLevel.Error)
                                    sys.RunStatus = enmRunStatus.Alarm
                                    Exit Sub
                                End If
                            Case enmStage.No3
                                If gSYS(eSys.DispStage4).RunStatus = enmRunStatus.Finish And gIsRSideNeedGoToSafePos(sys.MachineNo) = True Then
                                    gEqpMsg.AddHistoryAlarm("Error_1042005", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1042005), eMessageLevel.Error)
                                    sys.RunStatus = enmRunStatus.Alarm
                                    Exit Sub
                                End If
                        End Select

                        '[Note]:檢查R側是否有叫L側退開
                        If gIsLSideNeedGoToSafePos(sys.MachineNo) = True Then
                            '[Note]:根據另一側的資訊決定要退到哪去
                            Call EstimateGoBackPos(sys.StageNo, gProtectData, gProtectData(sys.StageNo).TargetPos)
                            gIsLSideNeedGoToSafePos(sys.MachineNo) = False
                            sys.SysNum = 6600
                        Else
                            sys.SysNum = 7000
                        End If

                    Case enmStage.No2, enmStage.No4
                        '[說明]:當單Stage動作時,另一頭Node為0時(不動作Stage)!!!是不會啟動移動至安全位置,移動Stage只能無限等待(另一頭回安全位置)
                        '目前確認另一頭Node為0時(不動作Stage)會移至原點位置,如果此位置還會觸發安全位置檢察失敗,表示設定位置已超出極限,需修改Recipe or 放寬安全位置(不會撞機為原則)<=不建議
                        Select Case sys.StageNo
                            Case enmStage.No2
                                If gSYS(eSys.DispStage1).RunStatus = enmRunStatus.Finish And gIsLSideNeedGoToSafePos(sys.MachineNo) = True Then
                                    gEqpMsg.AddHistoryAlarm("Error_1030006", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1030006), eMessageLevel.Error)
                                    sys.RunStatus = enmRunStatus.Alarm
                                    Exit Sub
                                End If
                            Case enmStage.No4
                                If gSYS(eSys.DispStage3).RunStatus = enmRunStatus.Finish And gIsLSideNeedGoToSafePos(sys.MachineNo) = True Then
                                    gEqpMsg.AddHistoryAlarm("Error_1030006", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1030006), eMessageLevel.Error)
                                    sys.RunStatus = enmRunStatus.Alarm
                                    Exit Sub
                                End If
                        End Select

                        '[Note]:檢查L側是否有叫R側退開
                        '       若叫R側退, 則優先(因為NodeLevel比對方低)
                        If gIsRSideNeedGoToSafePos(sys.MachineNo) = True Then
                            '[Note]:根據另一側的資訊決定要退到哪去
                            Call EstimateGoBackPos(sys.StageNo, gProtectData, gProtectData(sys.StageNo).TargetPos)
                            gIsRSideNeedGoToSafePos(sys.MachineNo) = False
                            sys.SysNum = 6600
                        Else
                            sys.SysNum = 7000
                        End If

                End Select

                    Case 6600
                        '[Note]:退至安全區 
                        ReviseVelocity(sys.AxisY, gProtectData(sys.StageNo).TargetPos.PosY, gSSystemParameter.MaxCrossDeviceVelocity) 'Soni + 2017.08.23 修改速度為優化速度
                        If gCMotion.AbsMove(sys.AxisY, gProtectData(sys.StageNo).TargetPos.PosY) <> CommandStatus.Sucessed Then
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1031000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1031000), eMessageLevel.Error)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1043000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1043000), eMessageLevel.Error)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1061000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1061000), eMessageLevel.Error)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1068000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1068000), eMessageLevel.Error)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        End If
                        ReviseVelocity(sys.AxisX, gProtectData(sys.StageNo).TargetPos.PosX, gSSystemParameter.MaxCrossDeviceVelocity) 'Soni + 2017.08.23 修改速度為優化速度
                        If gCMotion.AbsMove(sys.AxisX, gProtectData(sys.StageNo).TargetPos.PosX) <> CommandStatus.Sucessed Then
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1030000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1030000), eMessageLevel.Error)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1042000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1042000), eMessageLevel.Error)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1060000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1060000), eMessageLevel.Error)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1067000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1067000), eMessageLevel.Error)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        End If
                        sys.SysNum = 6700

            Case 6700
                '[Note]:等待Table Stop
                mAxisXState(sys.StageNo) = gCMotion.MotionDone(sys.AxisX)
                mAxisYState(sys.StageNo) = gCMotion.MotionDone(sys.AxisY)

                If mAxisXState(sys.StageNo) <> CommandStatus.Sucessed Then
                    If gCMotion.IsMoveTimeOut(sys.AxisX) Then
                        Select Case sys.StageNo
                            Case 0
                                gEqpMsg.AddHistoryAlarm("Error_1030004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1030004), eMessageLevel.Error)
                            Case 1
                                gEqpMsg.AddHistoryAlarm("Error_1042004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1042004), eMessageLevel.Error)
                            Case 2
                                gEqpMsg.AddHistoryAlarm("Error_1060004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1060004), eMessageLevel.Error)
                            Case 3
                                gEqpMsg.AddHistoryAlarm("Error_1067004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1067004), eMessageLevel.Error)
                        End Select
                        sys.RunStatus = enmRunStatus.Alarm
                    End If
                    Exit Sub
                End If
                If mAxisYState(sys.StageNo) <> CommandStatus.Sucessed Then
                    If gCMotion.IsMoveTimeOut(sys.AxisY) Then
                        Select Case sys.StageNo
                            Case 0
                                gEqpMsg.AddHistoryAlarm("Error_1031004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1031004), eMessageLevel.Error)
                            Case 1
                                gEqpMsg.AddHistoryAlarm("Error_1043004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1043004), eMessageLevel.Error)
                            Case 2
                                gEqpMsg.AddHistoryAlarm("Error_1061004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1061004), eMessageLevel.Error)
                            Case 3
                                gEqpMsg.AddHistoryAlarm("Error_1068004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1068004), eMessageLevel.Error)
                        End Select
                        sys.RunStatus = enmRunStatus.Alarm
                    End If
                    Exit Sub
                End If

                '[Note]:點膠的階段性任務已經完成
                mIsWorkBusy(sys.StageNo) = False
                sys.SysNum = 7000


                '******************************************************************************************
                '**************************檢查是否Purge、秤重********************************
                '******************************************************************************************

            Case 7000
                '[Note]:只有在雙平台&四平台上才需要做這一段等待另一側的動作，其餘的就直接做了不用等
                '       若遇到要秤重時，先等另一側也做完了後，再一起動作(左先後右)
                '       若遇到要Purge時，只要避開危險區即可作業。

                '[Note]:秤重條件&Pruge條件判斷
                '       若要秤重，強制作Purge
                mIsNeedFlowRate(sys.MachineNo) = False
                '[Note]:拿目前使用的閥來判斷是否需要秤重
                sys.SelectValve = mSYS(sys.StageNo).SelectValve

                For mSubDispStage(sys.StageNo) = mSubDispStageNo1(sys.MachineNo) To mSubDispStageNo2(sys.MachineNo)
                    If gFlowRateDB.ContainsKey(gCRecipe.StageParts(gSYS(mSubDispStage(sys.StageNo)).StageNo).FlowRateName(gSYS(mSubDispStage(sys.StageNo)).SelectValve)) = True Then
                        Select Case gFlowRateDB(gCRecipe.StageParts(gSYS(mSubDispStage(sys.StageNo)).StageNo).FlowRateName(gSYS(mSubDispStage(sys.StageNo)).SelectValve)).BaseOn
                            Case eInspectionType.OnTimerOrRuns
                                If gSSystemParameter.StageParts.FlowRate(gSYS(mSubDispStage(sys.StageNo)).StageNo).OnTimer(gSYS(mSubDispStage(sys.StageNo)).SelectValve) >=
                                    gFlowRateDB(gCRecipe.StageParts(gSYS(mSubDispStage(sys.StageNo)).StageNo).FlowRateName(gSYS(mSubDispStage(sys.StageNo)).SelectValve)).OnTimer Then
                                    gSSystemParameter.StageParts.FlowRate(gSYS(mSubDispStage(sys.StageNo)).StageNo).LastTime(gSYS(mSubDispStage(sys.StageNo)).SelectValve) = 0
                                    gSSystemParameter.StageParts.FlowRate(gSYS(mSubDispStage(sys.StageNo)).StageNo).StartTime(gSYS(mSubDispStage(sys.StageNo)).SelectValve) = Now
                                    gSSystemParameter.StageParts.FlowRate(gSYS(mSubDispStage(sys.StageNo)).StageNo).OnRuns(gSYS(mSubDispStage(sys.StageNo)).SelectValve) = gFlowRateDB(gCRecipe.StageParts(gSYS(mSubDispStage(sys.StageNo)).StageNo).FlowRateName(gSYS(mSubDispStage(sys.StageNo)).SelectValve)).OnRuns
                                    mIsNeedFlowRate(sys.MachineNo) = True
                                    Exit For
                                Else
                                    If gFlowRateDB(gCRecipe.StageParts(gSYS(mSubDispStage(sys.StageNo)).StageNo).FlowRateName(gSYS(mSubDispStage(sys.StageNo)).SelectValve)).OnRuns <> 0 Then
                                        '[Note]:進入時就做一次(次數的時候)
                                        If gSSystemParameter.StageParts.FlowRate(gSYS(mSubDispStage(sys.StageNo)).StageNo).OnRuns(gSYS(mSubDispStage(sys.StageNo)).SelectValve) <= 0 Then
                                            gSSystemParameter.StageParts.FlowRate(gSYS(mSubDispStage(sys.StageNo)).StageNo).LastTime(gSYS(mSubDispStage(sys.StageNo)).SelectValve) = 0
                                            gSSystemParameter.StageParts.FlowRate(gSYS(mSubDispStage(sys.StageNo)).StageNo).StartTime(gSYS(mSubDispStage(sys.StageNo)).SelectValve) = Now
                                            gSSystemParameter.StageParts.FlowRate(gSYS(mSubDispStage(sys.StageNo)).StageNo).OnRuns(gSYS(mSubDispStage(sys.StageNo)).SelectValve) = gFlowRateDB(gCRecipe.StageParts(gSYS(mSubDispStage(sys.StageNo)).StageNo).FlowRateName(gSYS(mSubDispStage(sys.StageNo)).SelectValve)).OnRuns
                                            mIsNeedFlowRate(sys.MachineNo) = True
                                            Exit For
                                        End If
                                    End If
                                End If

                            Case eInspectionType.OnTimer
                                If gSSystemParameter.StageParts.FlowRate(gSYS(mSubDispStage(sys.StageNo)).StageNo).OnTimer(gSYS(mSubDispStage(sys.StageNo)).SelectValve) >= gFlowRateDB(gCRecipe.StageParts(gSYS(mSubDispStage(sys.StageNo)).StageNo).FlowRateName(gSYS(mSubDispStage(sys.StageNo)).SelectValve)).OnTimer Then
                                    gSSystemParameter.StageParts.FlowRate(gSYS(mSubDispStage(sys.StageNo)).StageNo).LastTime(gSYS(mSubDispStage(sys.StageNo)).SelectValve) = 0
                                    gSSystemParameter.StageParts.FlowRate(gSYS(mSubDispStage(sys.StageNo)).StageNo).StartTime(gSYS(mSubDispStage(sys.StageNo)).SelectValve) = Now
                                    gSSystemParameter.StageParts.FlowRate(gSYS(mSubDispStage(sys.StageNo)).StageNo).OnRuns(gSYS(mSubDispStage(sys.StageNo)).SelectValve) = gFlowRateDB(gCRecipe.StageParts(gSYS(mSubDispStage(sys.StageNo)).StageNo).FlowRateName(gSYS(mSubDispStage(sys.StageNo)).SelectValve)).OnRuns
                                    mIsNeedFlowRate(sys.MachineNo) = True
                                    Exit For
                                End If

                            Case eInspectionType.OnRuns
                                If gFlowRateDB(gCRecipe.StageParts(gSYS(mSubDispStage(sys.StageNo)).StageNo).FlowRateName(gSYS(mSubDispStage(sys.StageNo)).SelectValve)).OnRuns <> 0 Then
                                    '[Note]:進入時就做一次(次數的時候)
                                    If gSSystemParameter.StageParts.FlowRate(gSYS(mSubDispStage(sys.StageNo)).StageNo).OnRuns(gSYS(mSubDispStage(sys.StageNo)).SelectValve) <= 0 Then
                                        gSSystemParameter.StageParts.FlowRate(gSYS(mSubDispStage(sys.StageNo)).StageNo).LastTime(gSYS(mSubDispStage(sys.StageNo)).SelectValve) = 0
                                        gSSystemParameter.StageParts.FlowRate(gSYS(mSubDispStage(sys.StageNo)).StageNo).StartTime(gSYS(mSubDispStage(sys.StageNo)).SelectValve) = Now
                                        gSSystemParameter.StageParts.FlowRate(gSYS(mSubDispStage(sys.StageNo)).StageNo).OnRuns(gSYS(mSubDispStage(sys.StageNo)).SelectValve) = gFlowRateDB(gCRecipe.StageParts(gSYS(mSubDispStage(sys.StageNo)).StageNo).FlowRateName(gSYS(mSubDispStage(sys.StageNo)).SelectValve)).OnRuns
                                        mIsNeedFlowRate(sys.MachineNo) = True
                                        Exit For
                                    End If
                                End If

                            Case eInspectionType.Noen

                        End Select
                    End If
                Next

                If mIsNeedFlowRate(sys.MachineNo) = True Then
                    sys.SysNum = 7100
                Else
                    sys.SysNum = 7800
                End If

                    Case 7100
                        '[Note]:等待另一側也完成，然後再一起做
                        Select Case sys.StageNo
                            Case enmStage.No1
                                '[Note]:檢查另一側是否也已經做完，才能下此命令
                                If mIsWorkBusy(enmStage.No2) = False Then
                                    '[Note]:協助記錄哪些途中有做過Purge
                                    gIsOnPurge(enmStage.No1) = True
                                    gIsOnPurge(enmStage.No2) = True
                                    sys.SysNum = 7200
                                End If

                            Case enmStage.No2
                                '[Note]:檢查另一側是否也已經做完，才能下此命令
                                If mIsWorkBusy(enmStage.No1) = False Then
                                    '[Note]:協助記錄哪些途中有做過Purge
                                    gIsOnPurge(enmStage.No1) = True
                                    gIsOnPurge(enmStage.No2) = True
                                    sys.SysNum = 7200
                                End If

                            Case enmStage.No3
                                '[Note]:檢查另一側是否也已經做完，才能下此命令
                                If mIsWorkBusy(enmStage.No4) = False Then
                                    '[Note]:協助記錄哪些途中有做過Purge
                                    gIsOnPurge(enmStage.No3) = True
                                    gIsOnPurge(enmStage.No4) = True
                                    sys.SysNum = 7200
                                End If

                            Case enmStage.No4
                                '[Note]:檢查另一側是否也已經做完，才能下此命令
                                If mIsWorkBusy(enmStage.No3) = False Then
                                    '[Note]:協助記錄哪些途中有做過Purge
                                    gIsOnPurge(enmStage.No3) = True
                                    gIsOnPurge(enmStage.No4) = True
                                    sys.SysNum = 7200
                                End If

                        End Select

            Case 7200
                '[Note]:Purge流程
                For mSubDispStage(sys.StageNo) = mSubDispStageNo1(sys.MachineNo) To mSubDispStageNo2(sys.MachineNo)
                    gSYS(mSubDispStage(sys.StageNo)).Command = eSysCommand.Purge
                Next
                sys.SysNum = 7300

            Case 7300
                '[Note]:判斷Purge完成
                If gSYS(mSubDispStageNo1(sys.MachineNo)).RunStatus = enmRunStatus.Finish And gSYS(mSubDispStageNo1(sys.MachineNo)).ExecuteCommand = eSysCommand.Purge Then
                    If gSYS(mSubDispStageNo2(sys.MachineNo)).RunStatus = enmRunStatus.Finish And gSYS(mSubDispStageNo2(sys.MachineNo)).ExecuteCommand = eSysCommand.Purge Then
                        sys.SysNum = 7400
                    End If
                End If

            Case 7400
                '[Note]:左側先秤重，完成後再換右側秤重
                gSYS(mSubDispStageNo1(sys.MachineNo)).Command = eSysCommand.WeightUnit
                sys.SysNum = 7450

            Case 7450
                '[Note]:判斷秤重完成
                If gSYS(mSubDispStageNo1(sys.MachineNo)).RunStatus = enmRunStatus.Finish And gSYS(mSubDispStageNo1(sys.MachineNo)).ExecuteCommand = eSysCommand.WeightUnit Then
                    sys.SysNum = 7500
                End If

            Case 7500
                '[Note]:至安全位置
                gSYS(mSubDispStageNo1(sys.MachineNo)).Command = eSysCommand.Safe
                sys.SysNum = 7550

            Case 7550
                '[Note]:判斷到安全完成
                If gSYS(mSubDispStageNo1(sys.MachineNo)).RunStatus = enmRunStatus.Finish And gSYS(mSubDispStageNo1(sys.MachineNo)).ExecuteCommand = eSysCommand.Safe Then
                    sys.SysNum = 7600
                End If

            Case 7600
                '[Note]:左側先秤重，完成後再換右側秤重
                If mSubDispStageNo2(sys.MachineNo) = mSubDispStageNo1(sys.MachineNo) Then
                    '[Note]:表示只有單邊作業，則只需秤一次即可。
                    sys.SysNum = 7800
                Else
                    gSYS(mSubDispStageNo2(sys.MachineNo)).Command = eSysCommand.WeightUnit
                    sys.SysNum = 7650
                End If

            Case 7650
                '[Note]:判斷秤重完成
                If gSYS(mSubDispStageNo2(sys.MachineNo)).RunStatus = enmRunStatus.Finish And gSYS(mSubDispStageNo2(sys.MachineNo)).ExecuteCommand = eSysCommand.WeightUnit Then
                    sys.SysNum = 7700
                End If

            Case 7700
                '[Note]:至安全位置
                gSYS(mSubDispStageNo2(sys.MachineNo)).Command = eSysCommand.Safe
                sys.SysNum = 7750

            Case 7750
                '[Note]:判斷到安全完成
                If gSYS(mSubDispStageNo2(sys.MachineNo)).RunStatus = enmRunStatus.Finish And gSYS(mSubDispStageNo2(sys.MachineNo)).ExecuteCommand = eSysCommand.Safe Then
                    sys.SysNum = 7800
                End If

                    Case 7800
                        '[Note]:配接
                        Select Case sys.StageNo
                            Case enmStage.No1, enmStage.No3
                                mSubDispStage(sys.StageNo) = mSubDispStageNo1(sys.MachineNo)

                            Case enmStage.No2, enmStage.No4
                                mSubDispStage(sys.StageNo) = mSubDispStageNo2(sys.MachineNo)

                        End Select

                        If gSSystemParameter.MultiDispenseEnable = True Then
                            mPurgeValveNo(sys.StageNo) = eValveWorkMode.Valve1
                        Else
                            mPurgeValveNo(sys.StageNo) = sys.SelectValve
                        End If
                        sys.SysNum = 7850

                    Case 7850
                        '[Note]:Purge條件判斷
                        mIsPurge(sys.StageNo) = False
                        If gPurgeDB.ContainsKey(gCRecipe.StageParts(sys.StageNo).PurgeName(mPurgeValveNo(sys.StageNo))) = True Then
                            Select Case gPurgeDB(gCRecipe.StageParts(sys.StageNo).PurgeName(mPurgeValveNo(sys.StageNo))).BaseOn
                                Case eInspectionType.OnTimerOrRuns
                                    If gSSystemParameter.StageParts.Purge(sys.StageNo).OnTimer(mPurgeValveNo(sys.StageNo)) >= gPurgeDB(gCRecipe.StageParts(sys.StageNo).PurgeName(mPurgeValveNo(sys.StageNo))).OnTimer Then
                                        gSSystemParameter.StageParts.Purge(sys.StageNo).LastTime(mPurgeValveNo(sys.StageNo)) = 0
                                        gSSystemParameter.StageParts.Purge(sys.StageNo).StartTime(mPurgeValveNo(sys.StageNo)) = Now
                                        gSSystemParameter.StageParts.Purge(sys.StageNo).OnRuns(mPurgeValveNo(sys.StageNo)) = gPurgeDB(gCRecipe.StageParts(sys.StageNo).PurgeName(mPurgeValveNo(sys.StageNo))).OnRuns
                                        gSYS(mSubDispStage(sys.StageNo)).Command = eSysCommand.Purge
                                        gSYS(mSubDispStage(sys.StageNo)).SelectValve = mPurgeValveNo(sys.StageNo)
                                        mIsPurge(sys.StageNo) = True
                                    Else
                                        If gPurgeDB(gCRecipe.StageParts(sys.StageNo).PurgeName(mPurgeValveNo(sys.StageNo))).OnRuns <> 0 Then
                                            '[Note]:不用進入時就做一次(次數的時候)，只有在定位前Purge的檢查，才要把
                                            If gSSystemParameter.StageParts.Purge(sys.StageNo).OnRuns(mPurgeValveNo(sys.StageNo)) <= 0 Then
                                                gSSystemParameter.StageParts.Purge(sys.StageNo).LastTime(mPurgeValveNo(sys.StageNo)) = 0
                                                gSSystemParameter.StageParts.Purge(sys.StageNo).StartTime(mPurgeValveNo(sys.StageNo)) = Now
                                                gSSystemParameter.StageParts.Purge(sys.StageNo).OnRuns(mPurgeValveNo(sys.StageNo)) = gPurgeDB(gCRecipe.StageParts(sys.StageNo).PurgeName(mPurgeValveNo(sys.StageNo))).OnRuns
                                                gSYS(mSubDispStage(sys.StageNo)).Command = eSysCommand.Purge
                                                gSYS(mSubDispStage(sys.StageNo)).SelectValve = mPurgeValveNo(sys.StageNo)
                                                mIsPurge(sys.StageNo) = True
                                            End If
                                        End If
                                    End If

                                Case eInspectionType.OnTimer
                                    If gSSystemParameter.StageParts.Purge(sys.StageNo).OnTimer(mPurgeValveNo(sys.StageNo)) >= gPurgeDB(gCRecipe.StageParts(sys.StageNo).PurgeName(mPurgeValveNo(sys.StageNo))).OnTimer Then
                                        gSSystemParameter.StageParts.Purge(sys.StageNo).LastTime(mPurgeValveNo(sys.StageNo)) = 0
                                        gSSystemParameter.StageParts.Purge(sys.StageNo).StartTime(mPurgeValveNo(sys.StageNo)) = Now
                                        gSSystemParameter.StageParts.Purge(sys.StageNo).OnRuns(mPurgeValveNo(sys.StageNo)) = gPurgeDB(gCRecipe.StageParts(sys.StageNo).PurgeName(mPurgeValveNo(sys.StageNo))).OnRuns
                                        gSYS(mSubDispStage(sys.StageNo)).Command = eSysCommand.Purge
                                        gSYS(mSubDispStage(sys.StageNo)).SelectValve = mPurgeValveNo(sys.StageNo)
                                        mIsPurge(sys.StageNo) = True
                                    End If

                                Case eInspectionType.OnRuns
                                    If gPurgeDB(gCRecipe.StageParts(sys.StageNo).PurgeName(mPurgeValveNo(sys.StageNo))).OnRuns <> 0 Then
                                        '[Note]:進入時就做一次(次數的時候)
                                        If gSSystemParameter.StageParts.Purge(sys.StageNo).OnRuns(mPurgeValveNo(sys.StageNo)) <= 0 Then
                                            gSSystemParameter.StageParts.Purge(sys.StageNo).LastTime(mPurgeValveNo(sys.StageNo)) = 0
                                            gSSystemParameter.StageParts.Purge(sys.StageNo).StartTime(mPurgeValveNo(sys.StageNo)) = Now
                                            gSSystemParameter.StageParts.Purge(sys.StageNo).OnRuns(mPurgeValveNo(sys.StageNo)) = gPurgeDB(gCRecipe.StageParts(sys.StageNo).PurgeName(mPurgeValveNo(sys.StageNo))).OnRuns
                                            gSYS(mSubDispStage(sys.StageNo)).Command = eSysCommand.Purge
                                            gSYS(mSubDispStage(sys.StageNo)).SelectValve = mPurgeValveNo(sys.StageNo)
                                            mIsPurge(sys.StageNo) = True
                                        End If
                                    End If

                                Case eInspectionType.Noen

                            End Select
                        End If

                        If mIsPurge(sys.StageNo) = True Then
                            '[Note]:協助記錄哪些中途有做過Purge
                            gIsOnPurge(sys.StageNo) = True
                            sys.SysNum = 7900
                        Else
                            sys.SysNum = 8000
                        End If

                    Case 7900
                        '[Note]:判斷Purge完成
                        If (gSYS(mSubDispStage(sys.StageNo)).RunStatus = enmRunStatus.Finish And gSYS(mSubDispStage(sys.StageNo)).ExecuteCommand = eSysCommand.Purge) Or mIsPurge(sys.StageNo) = False Then
                            If gSSystemParameter.MultiDispenseEnable = True Then
                                If mPurgeValveNo(sys.StageNo) = gSSystemParameter.StageUseValveCount - 1 Then
                                    sys.SysNum = 8000
                                Else
                                    mPurgeValveNo(sys.StageNo) = mPurgeValveNo(sys.StageNo) + 1
                                    sys.SysNum = 7850
                                End If
                            Else
                                sys.SysNum = 8000
                            End If
                        End If

                        '*************************************************************************************************************************************************************
                    Case 8000
                         Select Case mDispParam(sys.StageNo).ProcessTimeType
                    Case eProcessTimeType.None
                        '[Note]:無時間限制型點膠流程
                        '[Note]:判斷單顆作業還是多顆作業
                        '           單顆-->無時間限制-->一次只有幾個Step
                        '           多顆-->無時間限制-->一次只有幾個Die
                        Select Case mDispMultiDie(sys.StageNo)
                            Case enmDispMultiDie.SingleDie
                                '[Note]:檢查Step處理完了嗎
                                mDispStepIndex(sys.StageNo).Done = mDispStepIndex(sys.StageNo).Ending
                                sys.SysNum = 2300

                            Case enmDispMultiDie.MultiDie
                                '[Note]:檢查Die處理完了嗎
                                mDispListIndex(sys.StageNo).Done = mDispListIndex(sys.StageNo).Ending
                                sys.SysNum = 2200

                        End Select

                    Case eProcessTimeType.ReturnTime
                        '[Note]:有時間限制型點膠流程
                        '[Note]:檢查Round處理完了嗎
                        sys.SysNum = 2800

                    Case eProcessTimeType.NextRoundDelayTime
                        '[Note]:有時間限制型點膠流程
                        '[Note]:檢查Round處理完了嗎
                        'sys.SysNum = 3300
                        'Toby Retract 修改
                        Select Case mDispMultiDie(sys.StageNo)
                            Case enmDispMultiDie.SingleDie
                                '[Note]:檢查Step處理完了嗎
                                mDispStepIndex(sys.StageNo).Done = mDispStepIndex(sys.StageNo).Ending
                                sys.SysNum = 2300

                            Case enmDispMultiDie.MultiDie
                                '[Note]:檢查Die處理完了嗎
                                mDispListIndex(sys.StageNo).Done = mDispListIndex(sys.StageNo).Ending
                                sys.SysNum = 2200

                        End Select

                End Select
                    Case 9000
                        '[Note]:點膠完成後，退至安全區等待(針對有作業的情況下)
                        Select Case gSSystemParameter.MachineType
                            Case enmMachineType.DCSW_800AQ, enmMachineType.eDTS_2S2V, enmMachineType.DCS_500AD
                                '[Note]:直接退到安全位置
                                gProtectData(sys.StageNo).TargetPos.PosX = gSSystemParameter.Pos.SafeRegion(sys.StageNo).PosX(sys.SelectValve)
                                gProtectData(sys.StageNo).TargetPos.PosY = gSSystemParameter.Pos.SafeRegion(sys.StageNo).PosY(sys.SelectValve)
                                gProtectData(sys.StageNo).TargetPos.PosZ = gSSystemParameter.Pos.SafeRegion(sys.StageNo).PosZ(sys.SelectValve)
                                Select Case sys.StageNo
                                    Case enmStage.No1
                                        If gCRecipe.Node(enmStage.No2).Count = 0 Then
                                            sys.SysNum = 9300
                                        Else
                                            sys.SysNum = 9100
                                        End If
                                    Case enmStage.No2
                                        If gCRecipe.Node(enmStage.No1).Count = 0 Then
                                            sys.SysNum = 9300
                                        Else
                                            sys.SysNum = 9100
                                        End If
                                    Case enmStage.No3
                                        If gCRecipe.Node(enmStage.No4).Count = 0 Then
                                            sys.SysNum = 9300
                                        Else
                                            sys.SysNum = 9100
                                        End If
                                    Case enmStage.No4
                                        If gCRecipe.Node(enmStage.No3).Count = 0 Then
                                            sys.SysNum = 9300
                                        Else
                                            sys.SysNum = 9100
                                        End If
                                End Select
                            Case Else
                                gProtectData(sys.StageNo).TargetPos.PosZ = gSSystemParameter.Pos.SafeRegion(sys.StageNo).PosZ(sys.SelectValve)
                                sys.SysNum = 9300

                        End Select

                    Case 9100
                        '[Note]:Z軸移至上升高度(但高度超過安全位置XY就可以跑了)
                        'ReviseVelocity(sys.AxisZ, gSSystemParameter.Pos.ZUpPos, gSSystemParameter.MaxCrossDeviceVelocity) 'Soni + 2017.08.23 修改速度為優化速度
                        If gCMotion.AbsMove(sys.AxisZ, gSSystemParameter.Pos.ZUpPos) <> CommandStatus.Sucessed Then
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1032000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1032000), eMessageLevel.Error)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1044000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1044000), eMessageLevel.Error)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1062000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1062000), eMessageLevel.Error)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1069000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1069000), eMessageLevel.Error)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        End If
                        sys.SysNum = 9200

                    Case 9200
                        '[Note]:檢查高度超過安全位置XY就可以跑了
                        If CDbl(gCMotion.GetPositionValue(sys.AxisZ)) > gSSystemParameter.Pos.SafePosZ Then
                            ReviseVelocity(sys.AxisY, gProtectData(sys.StageNo).TargetPos.PosY, gSSystemParameter.MaxCrossDeviceVelocity) 'Soni + 2017.08.23 修改速度為優化速度
                            If gCMotion.AbsMove(sys.AxisY, gProtectData(sys.StageNo).TargetPos.PosY) <> CommandStatus.Sucessed Then
                                '[Note]:X軸移動異常
                                Select Case sys.StageNo
                                    Case 0
                                        gEqpMsg.AddHistoryAlarm("Error_1031000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1031000), eMessageLevel.Error)
                                    Case 1
                                        gEqpMsg.AddHistoryAlarm("Error_1043000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1043000), eMessageLevel.Error)
                                    Case 2
                                        gEqpMsg.AddHistoryAlarm("Error_1061000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1061000), eMessageLevel.Error)
                                    Case 3
                                        gEqpMsg.AddHistoryAlarm("Error_1068000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1068000), eMessageLevel.Error)
                                End Select
                                sys.RunStatus = enmRunStatus.Alarm
                                Exit Sub
                            End If
                            ReviseVelocity(sys.AxisX, gProtectData(sys.StageNo).TargetPos.PosX, gSSystemParameter.MaxCrossDeviceVelocity) 'Soni + 2017.08.23 修改速度為優化速度
                            If gCMotion.AbsMove(sys.AxisX, gProtectData(sys.StageNo).TargetPos.PosX) <> CommandStatus.Sucessed Then
                                Select Case sys.StageNo
                                    Case 0
                                        gEqpMsg.AddHistoryAlarm("Error_1030000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1030000), eMessageLevel.Error)
                                    Case 1
                                        gEqpMsg.AddHistoryAlarm("Error_1042000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1042000), eMessageLevel.Error)
                                    Case 2
                                        gEqpMsg.AddHistoryAlarm("Error_1060000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1060000), eMessageLevel.Error)
                                    Case 3
                                        gEqpMsg.AddHistoryAlarm("Error_1067000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1067000), eMessageLevel.Error)
                                End Select
                                sys.RunStatus = enmRunStatus.Alarm
                                Exit Sub
                            End If
                            sys.SysNum = 9400
                        End If

                    Case 9300
                        'ReviseVelocity(sys.AxisZ, gSSystemParameter.Pos.ZUpPos, gSSystemParameter.MaxCrossDeviceVelocity) 'Soni + 2017.08.23 修改速度為優化速度
                        If gCMotion.AbsMove(sys.AxisZ, gSSystemParameter.Pos.ZUpPos) <> CommandStatus.Sucessed Then
                            Select Case sys.StageNo
                                Case 0
                                    gEqpMsg.AddHistoryAlarm("Error_1032000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1032000), eMessageLevel.Error)
                                Case 1
                                    gEqpMsg.AddHistoryAlarm("Error_1044000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1044000), eMessageLevel.Error)
                                Case 2
                                    gEqpMsg.AddHistoryAlarm("Error_1062000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1062000), eMessageLevel.Error)
                                Case 3
                                    gEqpMsg.AddHistoryAlarm("Error_1069000", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1069000), eMessageLevel.Error)
                            End Select
                            sys.RunStatus = enmRunStatus.Alarm
                            Exit Sub
                        End If
                        sys.SysNum = 9400

                    Case 9400
                        '[Note]:Check Motion Done
                        mAxisXState(sys.StageNo) = gCMotion.MotionDone(sys.AxisX)
                        mAxisYState(sys.StageNo) = gCMotion.MotionDone(sys.AxisY)
                        mAxisZState(sys.StageNo) = gCMotion.MotionDone(sys.AxisZ)

                        If mAxisXState(sys.StageNo) <> CommandStatus.Sucessed Then
                            If gCMotion.IsMoveTimeOut(sys.AxisX) Then
                                Select Case sys.StageNo
                                    Case 0
                                        gEqpMsg.AddHistoryAlarm("Error_1030004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1030004), eMessageLevel.Error)
                                    Case 1
                                        gEqpMsg.AddHistoryAlarm("Error_1042004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1042004), eMessageLevel.Error)
                                    Case 2
                                        gEqpMsg.AddHistoryAlarm("Error_1060004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1060004), eMessageLevel.Error)
                                    Case 3
                                        gEqpMsg.AddHistoryAlarm("Error_1067004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1067004), eMessageLevel.Error)
                                End Select
                                sys.RunStatus = enmRunStatus.Alarm
                            End If
                            Exit Sub
                        End If
                        If mAxisYState(sys.StageNo) <> CommandStatus.Sucessed Then
                            If gCMotion.IsMoveTimeOut(sys.AxisY) Then
                                Select Case sys.StageNo
                                    Case 0
                                        gEqpMsg.AddHistoryAlarm("Error_1031004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1031004), eMessageLevel.Error)
                                    Case 1
                                        gEqpMsg.AddHistoryAlarm("Error_1043004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1043004), eMessageLevel.Error)
                                    Case 2
                                        gEqpMsg.AddHistoryAlarm("Error_1061004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1061004), eMessageLevel.Error)
                                    Case 3
                                        gEqpMsg.AddHistoryAlarm("Error_1068004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1068004), eMessageLevel.Error)
                                End Select
                                sys.RunStatus = enmRunStatus.Alarm
                            End If
                            Exit Sub
                        End If
                        If mAxisZState(sys.StageNo) <> CommandStatus.Sucessed Then
                            If gCMotion.IsMoveTimeOut(sys.AxisZ) Then
                                Select Case sys.StageNo
                                    Case 0
                                        gEqpMsg.AddHistoryAlarm("Error_1032004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1032004), eMessageLevel.Error)
                                    Case 1
                                        gEqpMsg.AddHistoryAlarm("Error_1044004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1044004), eMessageLevel.Error)
                                    Case 2
                                        gEqpMsg.AddHistoryAlarm("Error_1062004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1062004), eMessageLevel.Error)
                                    Case 3
                                        gEqpMsg.AddHistoryAlarm("Error_1069004", "DispStage_DispensingAction", sys.SysNum, gMsgHandler.GetMessage(Error_1069004), eMessageLevel.Error)
                                End Select
                                sys.RunStatus = enmRunStatus.Alarm
                            End If
                            Exit Sub
                        End If
                        sys.SysNum = 9500

                    Case 9500
                        '[Note]:更新已完成的盤數
                        '[Note]:但做到該盤的最後一顆後才清膠，則不更新完成的盤數，因為才將盤數歸零
                        If mIsNeedFlowRate(sys.MachineNo) = False Then
                            '[Note]:看這盤使用過哪幾個閥
                            If gIsUseValveNo1(sys.StageNo) = True Then
                                gSSystemParameter.StageParts.FlowRate(sys.StageNo).OnRuns(eValveWorkMode.Valve1) = gSSystemParameter.StageParts.FlowRate(sys.StageNo).OnRuns(eValveWorkMode.Valve1) - 1
                            End If
                            If gIsUseValveNo2(sys.StageNo) = True Then
                                gSSystemParameter.StageParts.FlowRate(sys.StageNo).OnRuns(eValveWorkMode.Valve2) = gSSystemParameter.StageParts.FlowRate(sys.StageNo).OnRuns(eValveWorkMode.Valve2) - 1
                            End If
                        End If

                        If mIsPurge(sys.StageNo) = False Then
                            '[Note]:看這盤使用過哪幾個閥
                            If gIsUseValveNo1(sys.StageNo) = True Then
                                gSSystemParameter.StageParts.Purge(sys.StageNo).OnRuns(eValveWorkMode.Valve1) = gSSystemParameter.StageParts.Purge(sys.StageNo).OnRuns(eValveWorkMode.Valve1) - 1
                            End If
                            If gIsUseValveNo2(sys.StageNo) = True Then
                                gSSystemParameter.StageParts.Purge(sys.StageNo).OnRuns(eValveWorkMode.Valve2) = gSSystemParameter.StageParts.Purge(sys.StageNo).OnRuns(eValveWorkMode.Valve2) - 1
                            End If
                        End If
                        mIsWorkBusy(sys.StageNo) = False
                        Debug.Print("點膠耗時:" & mStopWatch.ElapsedMilliseconds)
                        If gSSystemParameter.EnableVideoRun Then '[Note]視覺膠路需關燈
                            Call gSysAdapter.SetLightOnOff(gSysAdapter.CCDLightMapping(sys.CCDNo, enmValveLight.No1), enmONOFF.eOff)
                            Call gSysAdapter.SetLightOnOff(gSysAdapter.CCDLightMapping(sys.CCDNo, enmValveLight.No2), enmONOFF.eOff)
                            Call gSysAdapter.SetLightOnOff(gSysAdapter.CCDLightMapping(sys.CCDNo, enmValveLight.No3), enmONOFF.eOff)
                            Call gSysAdapter.SetLightOnOff(gSysAdapter.CCDLightMapping(sys.CCDNo, enmValveLight.No4), enmONOFF.eOff)
                        End If
                        sys.RunStatus = enmRunStatus.Finish
                        Exit Sub

                End Select

    End Sub

    ''' <summary>[判斷是否為下一顆的第一個Path]</summary>
    ''' <param name="mIs1stMotionPath"></param>
    ''' <param name="path"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function Is1stPathInDie(ByVal mIs1stMotionPath As Boolean, ByVal path As sPatternPath) As Boolean
        If mIs1stMotionPath = True Then
            Return True
        Else
            Select Case path.PathType
                Case ePathType.Arc2D
                    Return path.Arc2D.IsFristPathInDie

                Case ePathType.Arc3D
                    Return path.Arc3D.IsFristPathInDie

                Case ePathType.Dot3D
                    Return path.Dot3D.IsFristPathInDie

                Case ePathType.Line3D
                    Return path.Line3D.IsFristPathInDie

                Case Else
                    Return False

            End Select
        End If
    End Function

    ''' <summary>[判斷是否為Wait的Path]</summary>
    ''' <param name="dispPath"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function DetermineMotionOrWaitPath(ByVal dispPath As sPatternPath) As eMotionOrWaitPath
        Select Case dispPath.PathType
            Case ePathType.Wait
                Return eMotionOrWaitPath.WaitPath

            Case ePathType.Arc2D
                Return eMotionOrWaitPath.MotionPath

            Case ePathType.Arc3D
                Return eMotionOrWaitPath.MotionPath

            Case ePathType.Dot3D
                Return eMotionOrWaitPath.MotionPath

            Case ePathType.Line3D
                Return eMotionOrWaitPath.MotionPath

        End Select
        '[Note]:基本上不可能發生
        Return eMotionOrWaitPath.WaitPath
    End Function

    ''' <summary>[計算助跑資料]</summary>
    ''' <param name="acc"></param>
    ''' <param name="cycleTime"></param>
    ''' <param name="dotWeight"></param>
    ''' <param name="dispPath"></param>
    ''' <param name="runUpParam"></param>
    ''' <param name="dotPitch"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function DetermineRunUpTimeDistance(ByVal acc As Decimal, ByVal cycleTime As Decimal, ByVal dotWeight As Decimal, ByVal dispPath As sPatternPath, ByRef runUpParam As sExtendParam, Optional ByRef dotPitch As Decimal = 0) As Boolean

        Dim mPitch As Decimal                       '[mm]
        Dim mVelocity As Decimal                    '[mm/s]
        Dim mRunUpTime As Decimal                   '[助跑時間(s)]
        Dim mRunUpDistance As Decimal               '[助跑距離(mm)]
        Dim mValue As Decimal
        Dim mdx As Decimal
        Dim mdy As Decimal
        Dim mr As Decimal
        Dim mArcLength As Decimal                   '[弧長]
        Dim mDotCounts As Integer
        Const mDelayTimeBySignal As Decimal = 0.02  '[訊號追隨延遲時間(s)]

        '[Note]:取出該筆Recipe Path 出來算助跑距離
        Select Case dispPath.PathType
            Case ePathType.Line3D
                '[Note]:長度
                With dispPath.Line3D
                    mdx = .EndPosX - .StartPosX
                    mdy = .EndPosY - .StartPosY
                    mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                End With

                '[Note]:Pitch
                Select Case dispPath.Line3D.WeightControl.Type
                    Case eWeightControlType.Dots
                        '[Note]:強制給更改設定，必須大於等於2
                        If dispPath.Line3D.WeightControl.DotCounts < 2 Then
                            dispPath.Line3D.WeightControl.DotCounts = 2
                        End If
                        mPitch = mr / (dispPath.Line3D.WeightControl.DotCounts - 1)

                        '[Note]:速度(mm/s)  (mm/ms --> 10^3*mm/s )
                        mVelocity = 10 ^ 3 * mPitch / cycleTime

                    Case eWeightControlType.Weight
                        If dotWeight <= 0 Then
                            '[Note]:顆數小於2的強制補給2個Dots
                            mDotCounts = 2
                        Else
                            mDotCounts = CInt(dispPath.Line3D.WeightControl.Weight / dotWeight)
                            '[Note]:顆數小於2的強制補給2個Dots
                            If mDotCounts < 2 Then
                                mDotCounts = 2
                            End If
                        End If
                        mPitch = mr / (mDotCounts - 1)

                        '[Note]:速度(mm/s)  (mm/ms --> 10^3*mm/s )
                        mVelocity = 10 ^ 3 * mPitch / cycleTime

                    Case eWeightControlType.Velocity
                        '[Note]:直接取速度資訊出來用
                        mVelocity = dispPath.Line3D.WeightControl.Velocity
                        mPitch = dispPath.Line3D.WeightControl.dotPitch

                End Select

            Case ePathType.Arc2D
                '[Note]:長度
                With dispPath.Arc2D
                    mdx = .EndPosX - .CenterPosX
                    mdy = .EndPosY - .CenterPosY
                    mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                End With

                '[Note]:弧長=2*PI*R*Angle/360
                '           =PI*R*Angle/180
                mArcLength = mr * Math.PI * dispPath.Arc2D.Angle / 180

                '[Note]:Pitch
                Select Case dispPath.Arc2D.WeightControl.Type
                    Case eWeightControlType.Dots
                        '[Note]:強制給更改設定，必須大於等於2
                        If dispPath.Arc2D.WeightControl.DotCounts < 2 Then
                            dispPath.Arc2D.WeightControl.DotCounts = 2
                        End If
                        mPitch = mArcLength / (dispPath.Arc2D.WeightControl.DotCounts - 1)

                        '[Note]:速度(mm/s)  (mm/ms --> 10^3*mm/s )
                        mVelocity = 10 ^ 3 * mPitch / cycleTime

                    Case eWeightControlType.Weight
                        If dotWeight <= 0 Then
                            '[Note]:顆數小於2的強制補給2個Dots
                            mDotCounts = 2
                        Else
                            mDotCounts = CInt(dispPath.Arc2D.WeightControl.Weight / dotWeight)
                            '[Note]:顆數小於2的強制補給2個Dots
                            If mDotCounts < 2 Then
                                mDotCounts = 2
                            End If
                        End If
                        mPitch = mArcLength / (mDotCounts - 1)

                        '[Note]:速度(mm/s)  (mm/ms --> 10^3*mm/s )
                        mVelocity = 10 ^ 3 * mPitch / cycleTime

                    Case eWeightControlType.Velocity
                        '[Note]:直接取速度資訊出來用
                        mVelocity = dispPath.Arc2D.WeightControl.Velocity
                        mPitch = dispPath.Arc2D.WeightControl.dotPitch

                End Select

            Case ePathType.Arc3D
                '[Note]:長度
                With dispPath.Arc3D
                    mdx = .EndPosX - .CenterPosX
                    mdy = .EndPosY - .CenterPosY
                    mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                End With

                '[Note]:弧長=2*PI*R*Angle/360
                '           =PI*R*Angle/180
                mArcLength = mr * Math.PI * dispPath.Arc3D.Angle / 180

                '[Note]:Pitch
                Select Case dispPath.Arc3D.WeightControl.Type
                    Case eWeightControlType.Dots
                        '[Note]:強制給更改設定，必須大於等於2
                        If dispPath.Arc3D.WeightControl.DotCounts < 2 Then
                            dispPath.Arc3D.WeightControl.DotCounts = 2
                        End If
                        mPitch = mArcLength / (dispPath.Arc3D.WeightControl.DotCounts - 1)

                        '[Note]:速度(mm/s)  (mm/ms --> 10^3*mm/s )
                        mVelocity = 10 ^ 3 * mPitch / cycleTime

                    Case eWeightControlType.Weight
                        If dotWeight <= 0 Then
                            '[Note]:顆數小於2的強制補給2個Dots
                            mDotCounts = 2
                        Else
                            mDotCounts = CInt(dispPath.Arc3D.WeightControl.Weight / dotWeight)
                            '[Note]:顆數小於2的強制補給2個Dots
                            If mDotCounts < 2 Then
                                mDotCounts = 2
                            End If
                        End If
                        mPitch = mArcLength / (mDotCounts - 1)

                        '[Note]:速度(mm/s)  (mm/ms --> 10^3*mm/s )
                        mVelocity = 10 ^ 3 * mPitch / cycleTime

                    Case eWeightControlType.Velocity
                        '[Note]:直接取速度資訊出來用
                        mVelocity = dispPath.Arc3D.WeightControl.Velocity
                        mPitch = dispPath.Arc3D.WeightControl.dotPitch

                End Select

            Case ePathType.Dot3D
                '[Note]:目前Dot是強制切換成Velocity模式(也只有Dot會是Velocity模式)。
                mVelocity = dispPath.Dot3D.WeightControl.Velocity
                mPitch = 0

            Case ePathType.Wait
                '[Note]:不可能進來
                Return False

        End Select
        dotPitch = mPitch
        '[Note]:計算助跑時間&距離
        mRunUpTime = mDelayTimeBySignal + (mVelocity - 0) / acc

        '[Note]:若速度為零，則完全不需助跑距離，連命令落後也不必理會
        If mVelocity = 0 Then
            mValue = 0
        Else
            mValue = CDec(Format(0.5 * acc * mRunUpTime * mRunUpTime, "0.0000#"))
        End If

        '[Note]:單純為確保(不相信機構跟得上所以加上去的)
        mRunUpDistance = mValue * gSSystemParameter.PathMultiple

        '[Note]:因為距離被放大4倍，故時間相對放大2倍=>改成手動設定
        With runUpParam
            .Velocity = mVelocity
            .Time = mRunUpTime * Math.Sqrt(gSSystemParameter.PathMultiple)
            .Distance = mRunUpDistance
            If mr = 0 Then
                .DistancePosX = 0
                .DistancePosY = 0
            Else
                .DistancePosX = mRunUpDistance * mdx / mr
                .DistancePosY = mRunUpDistance * mdy / mr
            End If
        End With

        Return True

    End Function

    ''' <summary>[與前一筆與這目前這筆路徑的關係]</summary>
    ''' <param name="lastPath"></param>
    ''' <param name="nowPath"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function TwoPathModel(ByVal lastPath As sPatternPath, ByVal nowPath As sPatternPath) As eTwoPathModel
        '[Note]:不可能會有Wait(已經被擋掉了)
        Select Case lastPath.PathType
            Case ePathType.Arc2D
                Select Case nowPath.PathType
                    Case ePathType.Arc2D
                        Return eTwoPathModel.ArcArc

                    Case ePathType.Arc3D
                        Return eTwoPathModel.ArcArc

                    Case ePathType.Dot3D
                        Return eTwoPathModel.ArcDots

                    Case ePathType.Line3D
                        Return eTwoPathModel.ArcLine

                End Select

            Case ePathType.Arc3D
                Select Case nowPath.PathType
                    Case ePathType.Arc2D
                        Return eTwoPathModel.ArcArc

                    Case ePathType.Arc3D
                        Return eTwoPathModel.ArcArc

                    Case ePathType.Dot3D
                        Return eTwoPathModel.ArcDots

                    Case ePathType.Line3D
                        Return eTwoPathModel.ArcLine

                End Select

            Case ePathType.Dot3D
                Select Case nowPath.PathType
                    Case ePathType.Arc2D
                        Return eTwoPathModel.DotsArc

                    Case ePathType.Arc3D
                        Return eTwoPathModel.DotsArc

                    Case ePathType.Dot3D
                        Return eTwoPathModel.DotsDots

                    Case ePathType.Line3D
                        Return eTwoPathModel.DotsLine

                End Select

            Case ePathType.Line3D
                Select Case nowPath.PathType
                    Case ePathType.Arc2D
                        Return eTwoPathModel.LineArc

                    Case ePathType.Arc3D
                        Return eTwoPathModel.LineArc

                    Case ePathType.Dot3D
                        Return eTwoPathModel.LineDots

                    Case ePathType.Line3D
                        Return eTwoPathModel.LineLine
                End Select
        End Select
        Return eTwoPathModel.None
    End Function

    ''' <summary>[求最佳圓弧之切點]</summary>
    ''' <param name="recipe"></param>
    ''' <param name="circlePos">[圓上的點]</param>
    ''' <param name="inCenterPos">[圓心]</param>
    ''' <param name="posNo1"></param>
    ''' <param name="posNo2"></param>
    ''' <param name="outCenterPos">[求出來的圓心]</param>
    ''' <param name="noodlePos">[求出來的切點]</param>
    ''' <param name="dir"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function FindArcNoodle(ByVal recipe As CRecipe, ByVal circlePos As Premtek.sPos, ByVal inCenterPos As Premtek.sPos, ByVal posNo1 As Premtek.sPos, ByVal posNo2 As Premtek.sPos, ByRef outCenterPos As Premtek.sPos, ByRef noodlePos As Premtek.sPos, ByRef dir As eArcDirection) As Boolean

        Dim mD1 As Decimal
        Dim mD2 As Decimal
        Dim mD3 As Decimal
        Dim mIsNoodleNo1 As Boolean         '[判斷mFindCenterNo1、posNo1 同一側]
        Dim mIsNoodleNo2 As Boolean         '[判斷mFindCenterNo2、posNo1 同一側]
        Dim mCos1 As Decimal
        Dim mSin1 As Decimal
        Dim mCos2 As Decimal
        Dim mSin2 As Decimal
        Dim mCos3 As Decimal
        Dim mSin3 As Decimal
        Dim mFindCenterNo1 As Premtek.sPos
        Dim mFindCenterNo2 As Premtek.sPos
        Dim mA As Decimal                   '[mCY=mAX+mB]
        Dim mB As Decimal
        Dim mC As Decimal
        Dim mStep1ArcDir As eArcDirection
        Dim mStep2ArcDir As eArcDirection
        Dim mFail As Boolean

        mFail = False
        'Step1:先判斷使用哪一測的圓心與(順  or 逆)
        mSin1 = SinTrigonometricFunction(90)       '<--逆時鐘
        mCos1 = CosTrigonometricFunction(90)
        mSin2 = SinTrigonometricFunction(-90)  '<--順時鐘
        mCos2 = CosTrigonometricFunction(-90)

        mFindCenterNo1.PosX = mCos1 * (circlePos.PosX - inCenterPos.PosX) - mSin1 * (circlePos.PosY - inCenterPos.PosY) + inCenterPos.PosX
        mFindCenterNo1.PosY = mSin1 * (circlePos.PosX - inCenterPos.PosX) + mCos1 * (circlePos.PosY - inCenterPos.PosY) + inCenterPos.PosY
        mFindCenterNo2.PosX = mCos2 * (circlePos.PosX - inCenterPos.PosX) - mSin2 * (circlePos.PosY - inCenterPos.PosY) + inCenterPos.PosX
        mFindCenterNo2.PosY = mSin2 * (circlePos.PosX - inCenterPos.PosX) + mCos2 * (circlePos.PosY - inCenterPos.PosY) + inCenterPos.PosY

        '[Note]:CY=AX+B
        '[Note]:posNo2、circlePos為一條線
        If circlePos.PosX <> posNo2.PosX And circlePos.PosY <> posNo2.PosY Then
            mC = 1
            mA = (circlePos.PosY - posNo2.PosY) / (circlePos.PosX - posNo2.PosX)
            mB = (posNo2.PosY * circlePos.PosX - circlePos.PosY * posNo2.PosX) / (circlePos.PosX - posNo2.PosX)
        Else
            If circlePos.PosX = posNo2.PosX Then
                mC = 0
                mA = 1
                mB = -circlePos.PosX
            End If

            If circlePos.PosY = posNo2.PosY Then
                mC = 1
                mA = 0
                mB = circlePos.PosY
            End If
        End If

        '[Note]:CY=AX+B
        '       判斷(mFindCenterNo1)(posNo1)是否在同一側
        '       判斷(mFindCenterNo2)(posNo1)是否在同一側
        mD1 = (mC * mFindCenterNo1.PosY) - (mA * mFindCenterNo1.PosX) - mB
        mD2 = (mC * posNo1.PosY) - (mA * posNo1.PosX) - mB
        mD3 = (mC * mFindCenterNo2.PosY) - (mA * mFindCenterNo2.PosX) - mB

        '[Note]:判斷是否為同一側
        If mD1 * mD2 > 0 Then
            '[Note]:mFindCenterNo1、posNo1 同一側
            mIsNoodleNo1 = True
        Else
            mIsNoodleNo1 = False
        End If

        If mD2 * mD3 > 0 Then
            '[Note]:mFindCenterNo2、posNo1 同一側
            mIsNoodleNo2 = True
        Else
            mIsNoodleNo2 = False
        End If


        '[Note]:若mD2=0，表示上一個圓弧的切線方向與目前切線方向是相同的，表示隨便找一個切就可以了
        If mD2 = 0 Then
            mIsNoodleNo1 = True
            mIsNoodleNo2 = False
        End If

        If mIsNoodleNo1 = True Then
            If mIsNoodleNo2 = True Then
                '[Note]:不太正常
                outCenterPos.PosX = mFindCenterNo1.PosX
                outCenterPos.PosY = mFindCenterNo1.PosY
                mStep1ArcDir = eArcDirection.CCW
                mFail = True
            Else
                outCenterPos.PosX = mFindCenterNo1.PosX
                outCenterPos.PosY = mFindCenterNo1.PosY
                mStep1ArcDir = eArcDirection.CCW
            End If
        Else
            If mIsNoodleNo2 = True Then
                outCenterPos.PosX = mFindCenterNo2.PosX
                outCenterPos.PosY = mFindCenterNo2.PosY
                mStep1ArcDir = eArcDirection.CW
            Else
                '[Note]:不太正常
                outCenterPos.PosX = circlePos.PosX
                outCenterPos.PosY = circlePos.PosY
                mStep1ArcDir = eArcDirection.CCW
                mFail = True
            End If
        End If

        'Step2:藉由Step1算出預想的圓弧導角之中心點與方向，藉此推算出切點位置與方向
        Select Case mStep1ArcDir
            Case eArcDirection.CCW
                mSin3 = SinTrigonometricFunction(-1 * recipe.LeadAngle.Degress)
                mCos3 = CosTrigonometricFunction(-1 * recipe.LeadAngle.Degress)
                mStep2ArcDir = eArcDirection.CCW
            Case eArcDirection.CW
                mSin3 = SinTrigonometricFunction(recipe.LeadAngle.Degress)
                mCos3 = CosTrigonometricFunction(recipe.LeadAngle.Degress)
                mStep2ArcDir = eArcDirection.CW
        End Select

        noodlePos.PosX = mCos3 * (inCenterPos.PosX - outCenterPos.PosX) - mSin3 * (inCenterPos.PosY - outCenterPos.PosY) + outCenterPos.PosX
        noodlePos.PosY = mSin3 * (inCenterPos.PosX - outCenterPos.PosX) + mCos3 * (inCenterPos.PosY - outCenterPos.PosY) + outCenterPos.PosY

        dir = mStep2ArcDir


        If mFail = True Then
            Return False
        Else
            Return True
        End If


    End Function

    ''' <summary>[根據交點判斷是否要延伸此線段]</summary>
    ''' <param name="path"></param>
    ''' <param name="isLastPath"></param>
    ''' <param name="noodle"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function IsExtendLine(ByVal path As sPatternPath, ByVal isLastPath As Boolean, ByVal noodle As Premtek.sPos) As Boolean

        Dim mN1 As Decimal    '[N=(n1,n2)]
        Dim mN2 As Decimal
        Dim mdN1 As Decimal
        Dim mdN2 As Decimal
        Dim mdNr As Decimal
        Dim mM1 As Decimal    '[M=(m1,m2)]
        Dim mM2 As Decimal
        Dim mdM1 As Decimal
        Dim mdM2 As Decimal
        Dim mdMr As Decimal

        '[Note]:由於這邊求的都是單位向量，所以容許誤差設定為0.01(1%)

        '[Note]:根據交點判斷要延伸哪一邊的線段(藉由向量來判斷)
        With path.Line3D
            mN1 = .EndPosX - .StartPosX
            mN2 = .EndPosY - .StartPosY
        End With
        mdNr = CDec(Sqrt(mN1 * mN1 + mN2 * mN2))
        If mdNr = 0 Then
            mdN1 = 0
            mdN2 = 0
        Else
            mdN1 = mN1 / mdNr
            mdN2 = mN2 / mdNr
        End If

        If isLastPath = True Then
            If path.Line3D.EndPosX = noodle.PosX And path.Line3D.EndPosY = noodle.PosY Then
                '[Note]:同一點
                Return True
            Else
                mM1 = noodle.PosX - path.Line3D.EndPosX
                mM2 = noodle.PosY - path.Line3D.EndPosY
                mdMr = CDec(Sqrt(mM1 * mM1 + mM2 * mM2))
                If mdMr = 0 Then
                    '[Note]:同一點
                    mdM1 = 0
                    mdMr = 0
                    Return True
                Else
                    mdM1 = mM1 / mdMr
                    mdM2 = mM2 / mdMr
                    If Math.Abs(mdN1 - mdM1) < gSSystemParameter.MotionTolerance And Math.Abs(mdN2 - mdM2) < gSSystemParameter.MotionTolerance Then
                        '[Note]:mdN1 = mdM1  And   mdN2 = mdM2
                        Return True
                    Else
                        Return False
                    End If
                End If
            End If
        Else
            If path.Line3D.StartPosX = noodle.PosX And path.Line3D.StartPosY = noodle.PosY Then
                '[Note]:同一點
                Return True
            Else
                mM1 = path.Line3D.StartPosX - noodle.PosX
                mM2 = path.Line3D.StartPosY - noodle.PosY
                mdMr = CDec(Sqrt(mM1 * mM1 + mM2 * mM2))
                If mdMr = 0 Then
                    '[Note]:同一點
                    mdM1 = 0
                    mdMr = 0
                    Return True
                Else
                    mdM1 = mM1 / mdMr
                    mdM2 = mM2 / mdMr
                    If Math.Abs(mdN1 - mdM1) < gSSystemParameter.MotionTolerance And Math.Abs(mdN2 - mdM2) < gSSystemParameter.MotionTolerance Then
                        '[Note]:mdN1 = mdM1  And   mdN2 = mdM2
                        Return True
                    Else
                        Return False
                    End If
                End If
            End If
        End If

    End Function

    ''' <summary>[根據(圓的直徑)線段決定圓弧之行進方向]</summary>
    ''' <param name="vectorU1">(圓的直徑)線段之法向量</param>
    ''' <param name="vectorU2">(圓的直徑)線段之法向量</param>
    ''' <param name="circlePos">圓的起始點</param>
    ''' <param name="centerPos">圓心</param>
    ''' <param name="aidPos">輔助判斷點</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function UseLineToDetermineArcDirection(ByVal vectorU1 As Decimal, ByVal vectorU2 As Decimal, ByVal circlePos As Premtek.sPos, ByVal centerPos As Premtek.sPos, ByVal aidPos As Premtek.sPos) As eArcDirection

        Dim mPosNo1 As Premtek.sPos
        Dim mPosNo2 As Premtek.sPos
        Dim mCos1 As Decimal
        Dim mSin1 As Decimal
        Dim mCos2 As Decimal
        Dim mSin2 As Decimal
        Dim mAp As Decimal
        Dim mBp As Decimal
        Dim mCp As Decimal
        Dim mD1 As Decimal
        Dim mD2 As Decimal
        Dim mD3 As Decimal

        '[Note]:藉由中心點&圓上的點尋求與其夾角90度的二點座標
        '       第一組為CCW  逆轉 --->轉回來為順時針
        '       第二組為CW   正轉 --->轉回來為逆時針
        'mSin1 = SinTrigonometricFunction(90)
        'mCos1 = CosTrigonometricFunction(90)
        'mSin2 = SinTrigonometricFunction(-90)
        'mCos2 = CosTrigonometricFunction(-90)
        mSin1 = 1
        mCos1 = 0
        mSin2 = -1
        mCos2 = 0

        mPosNo1.PosX = mCos1 * (circlePos.PosX - centerPos.PosX) - mSin1 * (circlePos.PosY - centerPos.PosY) + centerPos.PosX
        mPosNo1.PosY = mSin1 * (circlePos.PosX - centerPos.PosX) + mCos1 * (circlePos.PosY - centerPos.PosY) + centerPos.PosY
        mPosNo2.PosX = mCos2 * (circlePos.PosX - centerPos.PosX) - mSin2 * (circlePos.PosY - centerPos.PosY) + centerPos.PosX
        mPosNo2.PosY = mSin2 * (circlePos.PosX - centerPos.PosX) + mCos2 * (circlePos.PosY - centerPos.PosY) + centerPos.PosY
        mAp = vectorU1
        mBp = vectorU2
        mCp = -((mAp * circlePos.PosX) + (mBp * circlePos.PosY))
        '[Note]:L:ApX+BpY+Cp=0
        '       判斷(mPosNo1)(aidPos)是否在同一側
        '       判斷(mPosNo2)(aidPos)是否在同一側
        mD1 = (mAp * mPosNo1.PosX) + (mBp * mPosNo1.PosY) + mCp
        mD2 = (mAp * aidPos.PosX) + (mBp * aidPos.PosY) + mCp
        mD3 = (mAp * mPosNo2.PosX) + (mBp * mPosNo2.PosY) + mCp

        If mD1 * mD2 > 0 Then
            '[Note]:同一側
            Return eArcDirection.CW
        Else
            If mD2 * mD3 > 0 Then
                '[Note]:同一側
                Return eArcDirection.CCW
            Else
                '[Note]:例外情況
                Return eArcDirection.CW
            End If
        End If

    End Function

    ''' <summary>[判斷要延伸哪一條線段]</summary>
    ''' <param name="velHigh"></param>
    ''' <param name="acc"></param>
    ''' <param name="dec"></param>
    ''' <param name="lastPath"></param>
    ''' <param name="newPath"></param>
    ''' <param name="pathList"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function DetermineExtendWhichLine(ByVal velHigh As Decimal, ByVal acc As Decimal, ByVal dec As Decimal, ByVal lastPath As sPatternPath, ByVal newPath As sPatternPath, Optional ByRef pathList As List(Of sPatternPath) = Nothing) As Boolean

        Dim mA As Decimal
        Dim mB As Decimal
        Dim mC1 As Decimal
        Dim mC2 As Decimal
        Dim mU1 As Decimal   '[U=(u1,u2)]
        Dim mU2 As Decimal
        Dim mNoodleNo1 As Premtek.sPos
        Dim mNoodleNo2 As Premtek.sPos
        Dim mPos As Premtek.sPos
        Dim mDistance As Decimal '[二條線段的距離]
        Dim mIsAddNoodleNo1 As Boolean
        Dim mIsAddNoodleNo2 As Boolean
        Dim mPatternPath As New sPatternPath
        Dim mCenterPos As Premtek.sPos
        Dim mCirclePos As Premtek.sPos
        Dim mAidPos As Premtek.sPos
        Dim mDir As eArcDirection
        Dim mDisDx As Decimal
        Dim mDisDy As Decimal
        Dim mSubDistance As Decimal

        If lastPath.PathType = ePathType.Line3D And newPath.PathType = ePathType.Line3D Then
            'Step1:求二條線之線段方程式(利用向量求得)
            '             L1:AX+BY+C1=0  LastPath
            '             L2:AX+BY+C2=0  NewPath
            With newPath.Line3D
                mU1 = .EndPosX - .StartPosX
                mU2 = .EndPosY - .StartPosY
            End With
            mA = -mU2
            mB = mU1
            mC1 = -((mA * lastPath.Line3D.EndPosX) + (mB * lastPath.Line3D.EndPosY))
            mC2 = -((mA * newPath.Line3D.StartPosX) + (mB * newPath.Line3D.StartPosY))

            'Step2:求點至條線之交點線段方程式(利用向量求得)
            '             (x1,y1)至L2:AX+BY+C2=0之交點   -->上一條線的EndPos與下一條線的交點(mNoodleX1,mNoodleY1)
            '             (x2,y2)至L1:AX+BY+C1=0之交點   -->下一條線的StartPos與上一條線的交點(mNoodleX1,mNoodleY1)
            mPos.PosX = lastPath.Line3D.EndPosX
            mPos.PosY = lastPath.Line3D.EndPosY
            mNoodleNo1.PosX = ((mB * mB * mPos.PosX) - (mA * mB * mPos.PosY) - (mA * mC2)) / (mA * mA + mB * mB)
            mNoodleNo1.PosY = (-(mA * mB * mPos.PosX) + (mA * mA * mPos.PosY) - (mB * mC2)) / (mA * mA + mB * mB)

            mPos.PosX = newPath.Line3D.StartPosX
            mPos.PosY = newPath.Line3D.StartPosY
            mNoodleNo2.PosX = ((mB * mB * mPos.PosX) - (mA * mB * mPos.PosY) - (mA * mC1)) / (mA * mA + mB * mB)
            mNoodleNo2.PosY = (-(mA * mB * mPos.PosX) + (mA * mA * mPos.PosY) - (mB * mC1)) / (mA * mA + mB * mB)
            mDistance = (Math.Abs(mC1 - mC2)) / CDec(Sqrt(mA * mA + mB * mB))
            'Step3:根據交點判斷要延伸哪一邊的線段(藉由向量來判斷)
            If IsExtendLine(newPath, False, mNoodleNo1) Then
                mIsAddNoodleNo1 = True
            Else
                mIsAddNoodleNo1 = False
            End If

            If IsExtendLine(lastPath, True, mNoodleNo2) Then
                mIsAddNoodleNo2 = True
            Else
                mIsAddNoodleNo2 = False
            End If

            If mIsAddNoodleNo1 = True Then
                If mIsAddNoodleNo2 = True Then
                    '[Note]:二個端點，直接用弧連起來-->NewPath
                    '[Note]:線段方程式(垂直於二平行線之端點)
                    mCenterPos.PosX = (newPath.Line3D.StartPosX + lastPath.Line3D.EndPosX) / 2
                    mCenterPos.PosY = (newPath.Line3D.StartPosY + lastPath.Line3D.EndPosY) / 2
                    mCirclePos.PosX = lastPath.Line3D.EndPosX
                    mCirclePos.PosY = lastPath.Line3D.EndPosY
                    mAidPos.PosX = newPath.Line3D.EndPosX
                    mAidPos.PosY = newPath.Line3D.EndPosY
                    mDir = UseLineToDetermineArcDirection(mU1, mU2, mCirclePos, mCenterPos, mAidPos)
                    '[Note]:畫圓弧
                    With mPatternPath
                        .PathType = ePathType.Arc2D
                        .Arc2D.StartPosX = mNoodleNo2.PosX
                        .Arc2D.StartPosY = mNoodleNo2.PosY
                        .Arc2D.StartPosZ = newPath.Line3D.StartPosZ
                        .Arc2D.EndPosX = newPath.Line3D.StartPosX
                        .Arc2D.EndPosY = newPath.Line3D.StartPosY
                        .Arc2D.EndPosZ = newPath.Line3D.StartPosZ
                        .Arc2D.CenterPosX = (newPath.Line3D.StartPosX + mNoodleNo2.PosX) / 2
                        .Arc2D.CenterPosY = (newPath.Line3D.StartPosY + mNoodleNo2.PosY) / 2
                        .Arc2D.CenterPosZ = newPath.Line3D.StartPosZ
                        .Arc2D.ArcDirection = mDir
                        '[Note]:弧長=2*PI*R/360
                        '           =PI*R/180
                        '           =PI*R-->(半圓180)
                        mDisDx = (.Arc2D.EndPosX - .Arc2D.CenterPosX)
                        mDisDy = (.Arc2D.EndPosY - .Arc2D.CenterPosY)
                        mSubDistance = CDec(Math.Sqrt(mDisDx ^ 2 + mDisDy ^ 2)) * Math.PI
                        'Call EstimateMaxVel(velHigh, acc, dec, mSubDistance, newPath.Line3D.Velocity, .Arc2D.Velocity)
                        velHigh = Premtek.CDispensingMath.GetMaxTangentialVelocity(acc, Math.Sqrt((.Arc2D.StartPosX - .Arc2D.CenterPosX) ^ 2 + (.Arc2D.StartPosY - .Arc2D.CenterPosY) ^ 2)) 'Soni + 2017.08.31 取得切線速度限制
                        If gSSystemParameter.MaxCrossDeviceVelocity > 0 And gSSystemParameter.MaxCrossDeviceVelocity < velHigh Then '數值有設定且低於極限值才能用
                            velHigh = gSSystemParameter.MaxCrossDeviceVelocity
                        End If
                        Premtek.CDispensingMath.GetCrossVelocity(velHigh, acc, dec, mSubDistance, gSSystemParameter.CrossVerticalTime, .Arc2D.Velocity) 'Soni Soni + 2017.08.14 推算速度公式修改
                        .Arc2D.IsDispense = False
                        .IsFristPathInDie = False
                    End With

                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                    pathList.Capacity = pathList.Count + 1
                    pathList.Add(mPatternPath)

                    '[Note]:補原本的線段
                    With mPatternPath
                        .PathType = ePathType.Line3D
                        .Line3D.StartPosX = newPath.Line3D.StartPosX
                        .Line3D.StartPosY = newPath.Line3D.StartPosY
                        .Line3D.StartPosZ = newPath.Line3D.StartPosZ
                        .Line3D.EndPosX = newPath.Line3D.EndPosX
                        .Line3D.EndPosY = newPath.Line3D.EndPosY
                        .Line3D.EndPosZ = newPath.Line3D.EndPosZ
                        .Line3D.Velocity = newPath.Line3D.Velocity
                        .Line3D.IsDispense = newPath.Line3D.IsDispense
                        .Line3D.ParameterType = ePathParameterType.Line
                        .Line3D.ParameterName = newPath.Line3D.ParameterName
                        .IsFristPathInDie = False
                    End With

                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                    pathList.Capacity = pathList.Count + 1
                    pathList.Add(mPatternPath)
                    Return True
                Else
                    '[Note]:畫圓弧-->延伸線段(with NewPath)
                    '[Note]:線段方程式(垂直於二平行線之端點)
                    mCenterPos.PosX = (lastPath.Line3D.EndPosX + mNoodleNo1.PosX) / 2
                    mCenterPos.PosY = (lastPath.Line3D.EndPosY + mNoodleNo1.PosY) / 2
                    mCirclePos.PosX = lastPath.Line3D.EndPosX
                    mCirclePos.PosY = lastPath.Line3D.EndPosY
                    mAidPos.PosX = lastPath.Line3D.StartPosX
                    mAidPos.PosY = lastPath.Line3D.StartPosY
                    mDir = UseLineToDetermineArcDirection(mU1, mU2, mCirclePos, mCenterPos, mAidPos)
                    '[Note]:畫圓弧
                    With mPatternPath
                        .PathType = ePathType.Arc2D
                        .Arc2D.StartPosX = lastPath.Line3D.EndPosX
                        .Arc2D.StartPosY = lastPath.Line3D.EndPosY
                        .Arc2D.StartPosZ = newPath.Line3D.StartPosZ
                        .Arc2D.EndPosX = mNoodleNo1.PosX
                        .Arc2D.EndPosY = mNoodleNo1.PosY
                        .Arc2D.EndPosZ = newPath.Line3D.StartPosZ
                        .Arc2D.CenterPosX = (lastPath.Line3D.EndPosX + mNoodleNo1.PosX) / 2
                        .Arc2D.CenterPosY = (lastPath.Line3D.EndPosY + mNoodleNo1.PosY) / 2
                        .Arc2D.CenterPosZ = newPath.Line3D.StartPosZ
                        .Arc2D.ArcDirection = mDir
                        '[Note]:弧長=2*PI*R/360
                        '           =PI*R/180
                        '           =PI*R-->(半圓180)
                        mDisDx = (.Arc2D.EndPosX - .Arc2D.CenterPosX)
                        mDisDy = (.Arc2D.EndPosY - .Arc2D.CenterPosY)
                        mSubDistance = CDec(Math.Sqrt(mDisDx ^ 2 + mDisDy ^ 2)) * Math.PI
                        'Call EstimateMaxVel(velHigh, acc, dec, mSubDistance, newPath.Line3D.Velocity, .Arc2D.Velocity)
                        velHigh = Premtek.CDispensingMath.GetMaxTangentialVelocity(acc, Math.Sqrt((.Arc2D.StartPosX - .Arc2D.CenterPosX) ^ 2 + (.Arc2D.StartPosY - .Arc2D.CenterPosY) ^ 2)) 'Soni + 2017.08.31 取得切線速度限制
                        If gSSystemParameter.MaxCrossDeviceVelocity > 0 And gSSystemParameter.MaxCrossDeviceVelocity < velHigh Then '數值有設定且低於極限值才能用
                            velHigh = gSSystemParameter.MaxCrossDeviceVelocity
                        End If
                        Premtek.CDispensingMath.GetCrossVelocity(velHigh, acc, dec, mSubDistance, gSSystemParameter.CrossVerticalTime, .Arc2D.Velocity) 'Soni Soni + 2017.08.14 推算速度公式修改
                        .Arc2D.IsDispense = False
                        .Line3D.ParameterType = ePathParameterType.Line
                        .Line3D.ParameterName = newPath.Line3D.ParameterName
                        .IsFristPathInDie = False
                    End With

                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                    pathList.Capacity = pathList.Count + 1
                    pathList.Add(mPatternPath)

                    '*******************************************************************

                    '[Note]:延伸線段(原先線段)
                    With mPatternPath
                        .PathType = ePathType.Line3D
                        .Line3D.StartPosX = mNoodleNo1.PosX
                        .Line3D.StartPosY = mNoodleNo1.PosY
                        .Line3D.StartPosZ = newPath.Line3D.StartPosZ
                        .Line3D.EndPosX = newPath.Line3D.EndPosX
                        .Line3D.EndPosY = newPath.Line3D.EndPosY
                        .Line3D.EndPosZ = newPath.Line3D.EndPosZ
                        .Line3D.Velocity = newPath.Line3D.Velocity
                        .Line3D.IsDispense = newPath.Line3D.IsDispense
                        .Line3D.ParameterType = ePathParameterType.Line
                        .Line3D.ParameterName = newPath.Line3D.ParameterName
                        .IsFristPathInDie = False
                    End With

                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                    pathList.Capacity = pathList.Count + 1
                    pathList.Add(mPatternPath)
                    Return True
                End If
            Else
                If mIsAddNoodleNo2 = True Then
                    '[Note]:延伸線段(修改上一線段的端點)-->畫圓弧-->NewPath
                    '[Note]:線段方程式(垂直於二平行線之端點)
                    mCenterPos.PosX = (newPath.Line3D.StartPosX + mNoodleNo2.PosX) / 2
                    mCenterPos.PosY = (newPath.Line3D.StartPosY + mNoodleNo2.PosY) / 2
                    mCirclePos.PosX = mNoodleNo2.PosX
                    mCirclePos.PosY = mNoodleNo2.PosY
                    mAidPos.PosX = newPath.Line3D.EndPosX
                    mAidPos.PosY = newPath.Line3D.EndPosY
                    mDir = UseLineToDetermineArcDirection(mU1, mU2, mCirclePos, mCenterPos, mAidPos)

                    '[Note]:延伸線段(修改上一線段的端點)
                    mPatternPath = pathList.Last
                    pathList.Remove(mPatternPath)
                    With mPatternPath
                        .Line3D.EndPosX = mNoodleNo2.PosX
                        .Line3D.EndPosY = mNoodleNo2.PosY
                    End With
                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                    pathList.Capacity = pathList.Count + 1
                    pathList.Add(mPatternPath)
                    '[Note]:畫圓弧
                    With mPatternPath
                        .PathType = ePathType.Arc2D
                        .Arc2D.StartPosX = mNoodleNo2.PosX
                        .Arc2D.StartPosY = mNoodleNo2.PosY
                        .Arc2D.StartPosZ = newPath.Line3D.StartPosZ
                        .Arc2D.EndPosX = newPath.Line3D.StartPosX
                        .Arc2D.EndPosY = newPath.Line3D.StartPosY
                        .Arc2D.EndPosZ = newPath.Line3D.StartPosZ
                        .Arc2D.CenterPosX = (newPath.Line3D.StartPosX + mNoodleNo2.PosX) / 2
                        .Arc2D.CenterPosY = (newPath.Line3D.StartPosY + mNoodleNo2.PosY) / 2
                        .Arc2D.CenterPosZ = newPath.Line3D.StartPosZ
                        .Arc2D.ArcDirection = mDir
                        '[Note]:弧長=2*PI*R/360
                        '           =PI*R/180
                        '           =PI*R-->(半圓180)
                        mDisDx = (.Arc2D.EndPosX - .Arc2D.CenterPosX)
                        mDisDy = (.Arc2D.EndPosY - .Arc2D.CenterPosY)
                        mSubDistance = CDec(Math.Sqrt(mDisDx ^ 2 + mDisDy ^ 2)) * Math.PI
                        'Call EstimateMaxVel(velHigh, acc, dec, mSubDistance, newPath.Line3D.Velocity, .Arc2D.Velocity)
                        velHigh = Premtek.CDispensingMath.GetMaxTangentialVelocity(acc, Math.Sqrt((.Arc2D.StartPosX - .Arc2D.CenterPosX) ^ 2 + (.Arc2D.StartPosY - .Arc2D.CenterPosY) ^ 2)) 'Soni + 2017.08.31 取得切線速度限制
                        If gSSystemParameter.MaxCrossDeviceVelocity > 0 And gSSystemParameter.MaxCrossDeviceVelocity < velHigh Then '數值有設定且低於極限值才能用
                            velHigh = gSSystemParameter.MaxCrossDeviceVelocity
                        End If
                        Premtek.CDispensingMath.GetCrossVelocity(velHigh, acc, dec, mSubDistance, gSSystemParameter.CrossVerticalTime, .Arc2D.Velocity) 'Soni Soni + 2017.08.14 推算速度公式修改
                        .Arc2D.IsDispense = False
                        .Line3D.ParameterType = ePathParameterType.Line
                        .Line3D.ParameterName = newPath.Line3D.ParameterName
                        .IsFristPathInDie = False
                    End With

                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                    pathList.Capacity = pathList.Count + 1
                    pathList.Add(mPatternPath)

                    '[Note]:加入原先線段
                    With mPatternPath
                        .PathType = ePathType.Line3D
                        .Line3D.StartPosX = newPath.Line3D.StartPosX
                        .Line3D.StartPosY = newPath.Line3D.StartPosY
                        .Line3D.StartPosZ = newPath.Line3D.StartPosZ
                        .Line3D.EndPosX = newPath.Line3D.EndPosX
                        .Line3D.EndPosY = newPath.Line3D.EndPosY
                        .Line3D.EndPosZ = newPath.Line3D.EndPosZ
                        .Line3D.Velocity = newPath.Line3D.Velocity
                        .Line3D.IsDispense = newPath.Line3D.IsDispense
                        .Line3D.ParameterType = ePathParameterType.Line
                        .Line3D.ParameterName = newPath.Line3D.ParameterName
                        .IsFristPathInDie = False
                    End With

                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                    pathList.Capacity = pathList.Count + 1
                    pathList.Add(mPatternPath)
                    Return True
                Else
                    '[Note]:無解(異常)
                    '[Note]:直接加了
                    With mPatternPath
                        .PathType = ePathType.Line3D
                        .Line3D.StartPosX = newPath.Line3D.StartPosX
                        .Line3D.StartPosY = newPath.Line3D.StartPosY
                        .Line3D.StartPosZ = newPath.Line3D.StartPosZ
                        .Line3D.EndPosX = newPath.Line3D.EndPosX
                        .Line3D.EndPosY = newPath.Line3D.EndPosY
                        .Line3D.EndPosZ = newPath.Line3D.EndPosZ
                        .Line3D.Velocity = newPath.Line3D.Velocity
                        .Line3D.IsDispense = newPath.Line3D.IsDispense
                        .Line3D.ParameterType = ePathParameterType.Line
                        .Line3D.ParameterName = newPath.Line3D.ParameterName
                        .IsFristPathInDie = False
                    End With
                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                    pathList.Capacity = pathList.Count + 1
                    pathList.Add(mPatternPath)
                    Return False
                End If
            End If
        Else
            '[Note]:無解(異常)
            '[Note]:直接加了
            With mPatternPath
                .PathType = ePathType.Line3D
                .Line3D.StartPosX = newPath.Line3D.StartPosX
                .Line3D.StartPosY = newPath.Line3D.StartPosY
                .Line3D.StartPosZ = newPath.Line3D.StartPosZ
                .Line3D.EndPosX = newPath.Line3D.EndPosX
                .Line3D.EndPosY = newPath.Line3D.EndPosY
                .Line3D.EndPosZ = newPath.Line3D.EndPosZ
                .Line3D.Velocity = newPath.Line3D.Velocity
                .Line3D.IsDispense = newPath.Line3D.IsDispense
                .Line3D.ParameterType = ePathParameterType.Line
                .Line3D.ParameterName = newPath.Line3D.ParameterName
                .IsFristPathInDie = False
            End With
            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
            pathList.Capacity = pathList.Count + 1
            pathList.Add(mPatternPath)
            Return False
        End If

    End Function

    ''' <summary>[[估算速度上限(研華提供)]]</summary>
    ''' <param name="velHigh">最大速度限制 mm/s</param>
    ''' <param name="acc">加速度 mm/s^2</param>
    ''' <param name="dec">減速度 mm/s^2</param>
    ''' <param name="distance">移動距離 mm</param>
    ''' <param name="velocity">移動速度 mm/s</param>
    ''' <param name="optimalVel">求得最大速度 mm/s</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function EstimateMaxVel(ByVal velHigh As Decimal, ByVal acc As Decimal, ByVal dec As Decimal, ByVal distance As Decimal, ByVal velocity As Decimal, ByRef optimalVel As Decimal) As Boolean
        Dim mMaxVel As Decimal
        Dim mAcc As Decimal
        Dim mVel As Decimal

        'mAcc = gSSystemParameter.GlobalAcc * gSSystemParameter.AccRatio
        mAcc = acc
        mMaxVel = Math.Sqrt(mAcc * 2 * distance)

        '[Note]:估算跨線段速度
        If mMaxVel > velocity Then
            '[Note]:若二者速度落差過大，則更改為二者的平均值，並且卡上限(最大速)。
            mVel = (mMaxVel + velocity) / 2
            If mVel > velHigh Then
                mVel = velHigh
            End If
            optimalVel = mVel
            'optimalVel = velocity
        Else
            optimalVel = mMaxVel
        End If
        Return True

    End Function

    ''' <summary>[判斷是否需要走延伸路徑]</summary>
    ''' <param name="lastPattternPath"></param>
    ''' <param name="nowPatternPath"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function IsUseExtendPath(ByVal lastPattternPath As sPatternPath, ByVal nowPatternPath As sPatternPath) As Boolean

        Dim mExtendPath As Boolean

        mExtendPath = True
        Select Case nowPatternPath.PathType
            Case ePathType.Arc2D
                If nowPatternPath.Arc2D.IsExtendOn = False Then
                    mExtendPath = False
                End If

            Case ePathType.Arc3D
                If nowPatternPath.Arc3D.IsExtendOn = False Then
                    mExtendPath = False
                End If

            Case ePathType.Dot3D
                If nowPatternPath.Dot3D.IsExtendOn = False Then
                    mExtendPath = False
                End If

            Case ePathType.Line3D
                If nowPatternPath.Line3D.IsExtendOn = False Then
                    mExtendPath = False
                End If

        End Select

        Return mExtendPath

    End Function

    ''' <summary>[取得延伸的切線]</summary>
    ''' <param name="arcPatternPath"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function EstimateArcExtendPath(ByVal arcPatternPath As sPatternPath, ByVal extendLength As Decimal, ByRef inputExtend As Premtek.sPos, ByRef outputExtend As Premtek.sPos) As Boolean


        Dim mVecterX As Decimal
        Dim mVecterY As Decimal
        Dim mNX As Decimal
        Dim mNY As Decimal
        Dim mR As Decimal
        Dim mCos As Decimal
        Dim mSin As Decimal
        Dim mHelp As Premtek.sPos
        Dim mCutNo1 As Premtek.sPos
        Dim mCutNo2 As Premtek.sPos
        Dim mDistanceNo1 As Decimal
        Dim mDistanceNo2 As Decimal


        '[Note]:只有Arc才能進來此Function
        '[Note]:切入點
        With arcPatternPath.Arc2D
            mVecterX = .StartPosX - .CenterPosX
            mVecterY = .StartPosY - .CenterPosY
            mR = CDec(Math.Sqrt(mVecterX * mVecterX + mVecterY * mVecterY))
        End With

        mNX = extendLength * mVecterY / mR
        mNY = -extendLength * mVecterX / mR
        mCutNo1.PosX = arcPatternPath.Arc2D.StartPosX + mNX
        mCutNo1.PosY = arcPatternPath.Arc2D.StartPosY + mNY

        mCutNo2.PosX = arcPatternPath.Arc2D.StartPosX - mNX
        mCutNo2.PosY = arcPatternPath.Arc2D.StartPosY - mNY

        If arcPatternPath.Arc2D.ArcDirection = eArcDirection.CW Then
            '[Note]:順時針-->  -
            mSin = SinTrigonometricFunction(-90)
            mCos = CosTrigonometricFunction(-90)
        Else
            '[Note]:逆時針-->  +
            mSin = SinTrigonometricFunction(90)
            mCos = CosTrigonometricFunction(90)
        End If

        '[Note]:藉由輔助角來判斷延伸為哪一組(切入)
        '       輔助點至二個切點找最遠的那個
        mHelp.PosX = (mCos * mVecterX - mSin * mVecterY) + arcPatternPath.Arc2D.CenterPosX
        mHelp.PosY = (mSin * mVecterX + mCos * mVecterY) + arcPatternPath.Arc2D.CenterPosY

        '[Note]:
        mDistanceNo1 = Math.Sqrt((mHelp.PosX - mCutNo1.PosX) * (mHelp.PosX - mCutNo1.PosX) + (mHelp.PosY - mCutNo1.PosY) * (mHelp.PosY - mCutNo1.PosY))
        mDistanceNo2 = Math.Sqrt((mHelp.PosX - mCutNo2.PosX) * (mHelp.PosX - mCutNo2.PosX) + (mHelp.PosY - mCutNo2.PosY) * (mHelp.PosY - mCutNo2.PosY))

        If mDistanceNo1 > mDistanceNo2 Then
            inputExtend.PosX = -mNX
            inputExtend.PosY = -mNY
        Else
            inputExtend.PosX = mNX
            inputExtend.PosY = mNY
        End If


        '[Note]:切出點
        With arcPatternPath.Arc2D
            mVecterX = .EndPosX - .CenterPosX
            mVecterY = .EndPosY - .CenterPosY
            mR = CDec(Math.Sqrt(mVecterX * mVecterX + mVecterY * mVecterY))
        End With

        mNX = extendLength * mVecterY / mR
        mNY = -extendLength * mVecterX / mR
        mCutNo1.PosX = arcPatternPath.Arc2D.EndPosX + mNX
        mCutNo1.PosY = arcPatternPath.Arc2D.EndPosY + mNY

        mCutNo2.PosX = arcPatternPath.Arc2D.EndPosX - mNX
        mCutNo2.PosY = arcPatternPath.Arc2D.EndPosY - mNY

        '[Note]:藉由輔助角來判斷延伸為哪一組(切出)
        '       輔助點至二個切點找最近的那個
        mHelp.PosX = (mCos * mVecterX - mSin * mVecterY) + arcPatternPath.Arc2D.CenterPosX
        mHelp.PosY = (mSin * mVecterX + mCos * mVecterY) + arcPatternPath.Arc2D.CenterPosY

        '[Note]:
        mDistanceNo1 = Math.Sqrt((mHelp.PosX - mCutNo1.PosX) * (mHelp.PosX - mCutNo1.PosX) + (mHelp.PosY - mCutNo1.PosY) * (mHelp.PosY - mCutNo1.PosY))
        mDistanceNo2 = Math.Sqrt((mHelp.PosX - mCutNo2.PosX) * (mHelp.PosX - mCutNo2.PosX) + (mHelp.PosY - mCutNo2.PosY) * (mHelp.PosY - mCutNo2.PosY))

        If mDistanceNo1 < mDistanceNo2 Then
            outputExtend.PosX = mNX
            outputExtend.PosY = mNY
        Else
            outputExtend.PosX = -mNX
            outputExtend.PosY = -mNY
        End If

        Return True
    End Function

    ''' <summary>[路徑編輯]</summary>
    ''' <param name="dispParam"></param>
    ''' <param name="dispPathRegister"></param>
    ''' <param name="motionDispPathRegister">[傳回]點膠運動路徑</param>
    ''' <param name="triggerDispPathRegister"></param>
    ''' <param name="maxExtendDistance"></param>
    ''' <param name="maxBlendTime"></param>
    ''' <param name="dotWeight"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function EditMotionPath(ByVal dispParam As sDispParam, ByVal dispPathRegister As List(Of sPatternPath), ByRef motionDispPathRegister As List(Of sPatternPath), ByRef triggerDispPathRegister As List(Of sPatternPath), ByRef maxExtendDistance As Decimal, ByRef maxBlendTime As Decimal, ByRef dotWeight As Decimal, Optional ByVal updateTriggerDispPathRegister As Boolean = True, Optional ByRef cycleTime As Decimal = 100) As Boolean

        Dim mDotWeight As Decimal                                    '[mg]
        Dim mCycleTimes As Decimal                                  '[ms]
        Dim mRunUp As sExtendParam                                  '[助跑資料]
        Dim mMemoryPatternPath As sPatternPath
        Dim mLastPatternPath As New sPatternPath                    '[上一筆路徑資訊]
        Dim mNextPatternPath As sPatternPath                        '[下一筆路徑資訊]
        Dim mArcExtendLinePath As New sPatternPath                  '[上一筆路徑資訊(由Arc延伸出來的線段)]
        Dim mIs1stMotionPath As Boolean                             '[為第一筆點膠資訊]
        Dim mI As Integer
        Dim mdx As Decimal
        Dim mdy As Decimal
        Dim mr As Decimal
        Dim mMotionDispPathRegister As List(Of sPatternPath)        '[motion]
        Dim mTriggerDispPathRegister As List(Of sPatternPath)       '[trigger]
        Dim mRegisterPath As sPatternPath
        Dim mExtendOffset As Premtek.sPos
        Dim mArcExtendOffsetCutIn As Premtek.sPos
        Dim mArcExtendOffsetCutOut As Premtek.sPos
        Dim mArcOffset As Premtek.sPos
        Dim mLastPos As Premtek.sPos
        Dim mCenterPos As Premtek.sPos
        Dim mCirclePos As Premtek.sPos
        Dim mAidPosNo1 As Premtek.sPos
        Dim mAidPosNo2 As Premtek.sPos
        Dim mAddCenterPos As Premtek.sPos
        Dim mNoodlePos As Premtek.sPos
        Dim mArcDir As eArcDirection
        Dim mPath As New sPatternPath
        Dim mTriggerPath As New sPatternPath
        Dim mDisDx As Decimal
        Dim mDisDy As Decimal
        Dim mDistance As Decimal
        Dim mRunUpDisance As Decimal
        Dim mRunDownDisance As Decimal
        Dim mDisExtend As Premtek.sPos
        Dim mMaxExtendDistance As Decimal
        Dim mMaxBlendTime As Decimal
        Dim mIs1stTriggerCommand As Boolean
        Dim mDotPitch As Decimal

        'Step1:取出CycleTime
        If gJetValveDB.ContainsKey(dispParam.Recipe.StageParts(dispParam.StageNo).ValveName(dispParam.SelectValve)) = True Then
            Select Case gJetValveDB(dispParam.Recipe.StageParts(dispParam.StageNo).ValveName(dispParam.SelectValve)).ValveModel
                Case eValveModel.PicoPulse
                    mCycleTimes = gJetValveDB(dispParam.Recipe.StageParts(dispParam.StageNo).ValveName(dispParam.SelectValve)).PicoTouch.CycleTime
                Case eValveModel.Advanjet
                    mCycleTimes = gJetValveDB(dispParam.Recipe.StageParts(dispParam.StageNo).ValveName(dispParam.SelectValve)).Advanjet.CycleTime
            End Select
            cycleTime = mCycleTimes
        Else
            Return False
        End If

        '[Note]:取出單點重量
        mDotWeight = gCRecipe.StageParts(dispParam.StageNo).AverageWeightPerDot(dispParam.SelectValve)


        '[Note]:重新路徑規劃
        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item
        mMotionDispPathRegister = New List(Of sPatternPath)
        mMotionDispPathRegister.Clear()
        mTriggerDispPathRegister = New List(Of sPatternPath)
        mTriggerDispPathRegister.Clear()
        mIs1stMotionPath = True
        mMaxExtendDistance = 0
        mMaxBlendTime = 0
        mIs1stTriggerCommand = True

        If dispPathRegister.Count > 0 Then
            For mI = 0 To dispPathRegister.Count - 1
                mRegisterPath = dispPathRegister.Item(mI)
                Select Case DetermineMotionOrWaitPath(mRegisterPath)
                    Case eMotionOrWaitPath.MotionPath
                        If Is1stPathInDie(mIs1stMotionPath, mRegisterPath) Then
                            '[Note]:第一筆需移動的Path
                            '       第一筆資料須與助跑做結合
                            Select Case mRegisterPath.PathType
                                Case ePathType.Line3D
                                    '[Note]:算出需助跑的資料
                                    Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes, mDotWeight, dispPathRegister.Item(mI), mRunUp, mDotPitch)

                                    If mRunUp.Distance > mMaxExtendDistance Then
                                        mMaxExtendDistance = mRunUp.Distance
                                    End If
                                    If mRunUp.Time > mMaxBlendTime Then
                                        mMaxBlendTime = mRunUp.Time
                                    End If

                                    With mRegisterPath.Line3D
                                        mdx = .EndPosX - .StartPosX
                                        mdy = .EndPosY - .StartPosY
                                        mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                                        If mr = 0 Then
                                            mExtendOffset.PosX = 0
                                            mExtendOffset.PosY = 0
                                        Else
                                            mExtendOffset.PosX = mRunUp.Distance * mdx / mr
                                            mExtendOffset.PosY = mRunUp.Distance * mdy / mr
                                        End If
                                    End With

                                    '[Note]:跨元件用不同速走
                                    If mI <> 0 Then
                                        mPath.PathType = ePathType.Dot3D
                                        mPath.Dot3D.PosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                        mPath.Dot3D.PosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                        mPath.Dot3D.PosZ = mRegisterPath.Line3D.EndPosZ
                                        mPath.Dot3D.Velocity = mRunUp.Velocity
                                        mPath.Dot3D.ParameterType = ePathParameterType.Line
                                        mPath.Dot3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                        mPath.Dot3D.IsDispense = False
                                        mPath.IsFristPathInDie = True
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)
                                    End If

                                    mPath.PathType = ePathType.Line3D
                                    '[Note]:先判斷是否為直接串接之路徑
                                    If IsUseExtendPath(mLastPatternPath, mRegisterPath) = False Then
                                        mExtendOffset.PosX = 0
                                        mExtendOffset.PosY = 0
                                    End If
                                    mPath.Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                    mPath.Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                    mPath.Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                    mPath.Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                    mPath.Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                    mPath.Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                    mPath.Line3D.ExtendOffsetX = mExtendOffset.PosX
                                    mPath.Line3D.ExtendOffsetY = mExtendOffset.PosY
                                    mPath.Line3D.Velocity = mRunUp.Velocity
                                    mPath.Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                    mPath.Line3D.ParameterType = ePathParameterType.Line
                                    mPath.Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                    mPath.IsFristPathInDie = False
                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                    mMotionDispPathRegister.Add(mPath)
                                    mLastPos.PosX = mPath.Line3D.EndPosX
                                    mLastPos.PosY = mPath.Line3D.EndPosY

                                    '[Note]:紀錄最近一筆的路徑資料
                                    With mLastPatternPath
                                        .PathType = ePathType.Line3D
                                        .Line3D.StartPosX = mPath.Line3D.StartPosX
                                        .Line3D.StartPosY = mPath.Line3D.StartPosY
                                        .Line3D.StartPosZ = mPath.Line3D.StartPosZ
                                        .Line3D.EndPosX = mPath.Line3D.EndPosX
                                        .Line3D.EndPosY = mPath.Line3D.EndPosY
                                        .Line3D.EndPosZ = mPath.Line3D.EndPosZ
                                        .Line3D.ExtendOffsetX = mPath.Line3D.ExtendOffsetX
                                        .Line3D.ExtendOffsetY = mPath.Line3D.ExtendOffsetY
                                        .Line3D.Velocity = mPath.Line3D.Velocity
                                    End With
                                    '***************************************************
                                    If mRegisterPath.Line3D.IsDispense = True And updateTriggerDispPathRegister = True Then
                                        '[Note]:塞給Trigger board Data(只有第一組Trigger Cmd 需要助跑資訊，所以要把這資料保留給Cmd)
                                        mTriggerPath = mRegisterPath
                                        If mIs1stTriggerCommand = True Then
                                            mTriggerPath.Line3D.ExtendOffsetX = mExtendOffset.PosX
                                            mTriggerPath.Line3D.ExtendOffsetY = mExtendOffset.PosY
                                            mIs1stTriggerCommand = False
                                        End If
                                        mTriggerPath.Line3D.Velocity = mRunUp.Velocity
                                        mTriggerPath.Line3D.WeightControl.dotPitch = mDotPitch
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mTriggerDispPathRegister.Capacity = mTriggerDispPathRegister.Count + 1
                                        mTriggerDispPathRegister.Add(mTriggerPath)
                                    End If
                                    '***************************************************

                                Case ePathType.Dot3D
                                    '[Note]:Dot不會有串接的使用情況
                                    Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes, mDotWeight, dispPathRegister.Item(mI), mRunUp, mDotPitch)
                                    If mRunUp.Distance > mMaxExtendDistance Then
                                        mMaxExtendDistance = mRunUp.Distance
                                    End If
                                    If mRunUp.Time > mMaxBlendTime Then
                                        mMaxBlendTime = mRunUp.Time
                                    End If
                                    '[Note]:先暫時用X方向做助跑，因為只有一個點很難規劃助跑的方向
                                    With mPath
                                        .PathType = ePathType.Dot3D
                                        .Dot3D.PosX = mRegisterPath.Dot3D.PosX
                                        .Dot3D.PosY = mRegisterPath.Dot3D.PosY
                                        .Dot3D.PosZ = mRegisterPath.Dot3D.PosZ
                                        .Dot3D.ExtendOffsetX = 0
                                        .Dot3D.ExtendOffsetY = 0
                                        .Dot3D.Velocity = mRunUp.Velocity
                                        .Dot3D.IsDispense = mRegisterPath.Dot3D.IsDispense
                                        .IsFristPathInDie = True
                                        .Dot3D.ParameterType = ePathParameterType.Dot
                                        .Dot3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                    End With
                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                    mMotionDispPathRegister.Add(mPath)

                                    If mRegisterPath.Dot3D.IsDispense = True And updateTriggerDispPathRegister = True Then
                                        '[Note]:塞給Trigger board Data(只有第一組Trigger Cmd 需要助跑資訊，所以要把這資料保留給Cmd)
                                        mTriggerPath = mRegisterPath
                                        If mIs1stTriggerCommand = True Then
                                            mTriggerPath.Dot3D.ExtendOffsetX = 0
                                            mTriggerPath.Dot3D.ExtendOffsetY = 0
                                            mIs1stTriggerCommand = False
                                        End If
                                        mTriggerPath.Dot3D.Velocity = mRunUp.Velocity
                                        mTriggerPath.Dot3D.WeightControl.dotPitch = 0
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mTriggerDispPathRegister.Capacity = mTriggerDispPathRegister.Count + 1
                                        mTriggerDispPathRegister.Add(mTriggerPath)
                                    End If
                                    '***************************************************

                                Case ePathType.Arc2D
                                    '[Note]:算出需助跑的資料
                                    Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes, mDotWeight, dispPathRegister.Item(mI), mRunUp, mDotPitch)
                                    If mRunUp.Distance > mMaxExtendDistance Then
                                        mMaxExtendDistance = mRunUp.Distance
                                    End If
                                    If mRunUp.Time > mMaxBlendTime Then
                                        mMaxBlendTime = mRunUp.Time
                                    End If

                                    Call EstimateArcExtendPath(mRegisterPath, mRunUp.Distance, mArcExtendOffsetCutIn, mArcExtendOffsetCutOut)
                                    '[Note]:跨元件用不同速走
                                    If mI <> 0 Then
                                        mPath.PathType = ePathType.Line3D
                                        mPath.Line3D.StartPosX = mLastPos.PosX
                                        mPath.Line3D.StartPosY = mLastPos.PosY
                                        mPath.Line3D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                        mPath.Line3D.EndPosX = mRegisterPath.Arc2D.StartPosX - mArcExtendOffsetCutIn.PosX
                                        mPath.Line3D.EndPosY = mRegisterPath.Arc2D.StartPosY - mArcExtendOffsetCutIn.PosY
                                        mPath.Line3D.EndPosZ = mRegisterPath.Arc2D.StartPosZ
                                        mPath.Line3D.Velocity = mRunUp.Velocity
                                        mPath.Line3D.IsDispense = False
                                        mPath.Line3D.ParameterType = ePathParameterType.Arc
                                        mPath.Line3D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                        mPath.IsFristPathInDie = True
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)
                                    End If

                                    '[Note]:先判斷是否為直接串接之路徑
                                    If IsUseExtendPath(mLastPatternPath, mRegisterPath) = True Then
                                        '[Note]:加入切線
                                        mPath.PathType = ePathType.Line3D
                                        mPath.Line3D.StartPosX = mRegisterPath.Arc2D.StartPosX - mArcExtendOffsetCutIn.PosX
                                        mPath.Line3D.StartPosY = mRegisterPath.Arc2D.StartPosY - mArcExtendOffsetCutIn.PosY
                                        mPath.Line3D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                        mPath.Line3D.EndPosX = mRegisterPath.Arc2D.StartPosX
                                        mPath.Line3D.EndPosY = mRegisterPath.Arc2D.StartPosY
                                        mPath.Line3D.EndPosZ = mRegisterPath.Arc2D.StartPosZ
                                        mPath.Line3D.ExtendOffsetX = 0
                                        mPath.Line3D.ExtendOffsetY = 0
                                        mPath.Line3D.Velocity = mRunUp.Velocity
                                        mPath.Line3D.IsDispense = False
                                        mPath.Line3D.ParameterType = ePathParameterType.Arc
                                        mPath.Line3D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                        mPath.IsFristPathInDie = False
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)
                                    Else
                                        mArcExtendOffsetCutIn.PosX = 0
                                        mArcExtendOffsetCutIn.PosY = 0
                                    End If

                                    '[Note]:把原本的Arc路徑加入
                                    With mPath
                                        .PathType = ePathType.Arc2D
                                        .Arc2D.StartPosX = mRegisterPath.Arc2D.StartPosX
                                        .Arc2D.StartPosY = mRegisterPath.Arc2D.StartPosY
                                        .Arc2D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                        .Arc2D.CenterPosX = mRegisterPath.Arc2D.CenterPosX
                                        .Arc2D.CenterPosY = mRegisterPath.Arc2D.CenterPosY
                                        .Arc2D.CenterPosZ = mRegisterPath.Arc2D.CenterPosZ
                                        .Arc2D.EndPosX = mRegisterPath.Arc2D.EndPosX
                                        .Arc2D.EndPosY = mRegisterPath.Arc2D.EndPosY
                                        .Arc2D.EndPosZ = mRegisterPath.Arc2D.EndPosZ
                                        .Arc2D.ArcDirection = mRegisterPath.Arc2D.ArcDirection
                                        .Arc2D.Velocity = mRunUp.Velocity
                                        .Arc2D.IsDispense = mRegisterPath.Arc2D.IsDispense
                                        .Arc2D.ParameterType = ePathParameterType.Arc
                                        .Arc2D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                        .IsFristPathInDie = False
                                    End With
                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                    mMotionDispPathRegister.Add(mPath)

                                    If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = False Then
                                        '[Note]:Arc延伸出來的線段
                                        With mPath
                                            .PathType = ePathType.Line3D
                                            .Line3D.StartPosX = mRegisterPath.Arc2D.EndPosX
                                            .Line3D.StartPosY = mRegisterPath.Arc2D.EndPosY
                                            .Line3D.StartPosZ = mRegisterPath.Arc2D.EndPosZ
                                            .Line3D.EndPosX = mRegisterPath.Arc2D.EndPosX + mArcExtendOffsetCutOut.PosX
                                            .Line3D.EndPosY = mRegisterPath.Arc2D.EndPosY + mArcExtendOffsetCutOut.PosY
                                            .Line3D.EndPosZ = mRegisterPath.Arc2D.EndPosZ
                                            .Line3D.Velocity = mRunUp.Velocity
                                            .Line3D.ExtendOffsetX = mArcExtendOffsetCutOut.PosX
                                            .Line3D.ExtendOffsetY = mArcExtendOffsetCutOut.PosY
                                            .Line3D.IsDispense = False
                                            .Arc2D.ParameterType = ePathParameterType.Arc
                                            .Arc2D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                            .IsFristPathInDie = False
                                        End With
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)
                                        mArcExtendLinePath = mPath

                                        mLastPos.PosX = mPath.Line3D.EndPosX
                                        mLastPos.PosY = mPath.Line3D.EndPosY

                                        '[Note]:紀錄最近一筆的路徑資料
                                        With mLastPatternPath
                                            .PathType = ePathType.Arc2D
                                            .Arc2D.StartPosX = mRegisterPath.Arc2D.StartPosX
                                            .Arc2D.StartPosY = mRegisterPath.Arc2D.StartPosY
                                            .Arc2D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                            .Arc2D.CenterPosX = mRegisterPath.Arc2D.CenterPosX
                                            .Arc2D.CenterPosY = mRegisterPath.Arc2D.CenterPosY
                                            .Arc2D.CenterPosZ = mRegisterPath.Arc2D.CenterPosZ
                                            .Arc2D.EndPosX = mRegisterPath.Arc2D.EndPosX
                                            .Arc2D.EndPosY = mRegisterPath.Arc2D.EndPosY
                                            .Arc2D.EndPosZ = mRegisterPath.Arc2D.EndPosZ
                                            .Arc2D.ArcDirection = mRegisterPath.Arc2D.ArcDirection
                                            .Arc2D.Velocity = mRunUp.Velocity
                                            '[Note]:給後面比對用的
                                            .Arc2D.ExtendOffsetX = mArcExtendOffsetCutOut.PosX
                                            .Arc2D.ExtendOffsetY = mArcExtendOffsetCutOut.PosY
                                        End With
                                    End If

                                    '***************************************************
                                    If mRegisterPath.Arc2D.IsDispense = True And updateTriggerDispPathRegister = True Then
                                        '[Note]:塞給Trigger board Data(只有第一組Trigger Cmd 需要助跑資訊，所以要把這資料保留給Cmd)
                                        mTriggerPath = mRegisterPath
                                        If mIs1stTriggerCommand = True Then
                                            mTriggerPath.Arc2D.ExtendOffsetX = mArcExtendOffsetCutIn.PosX
                                            mTriggerPath.Arc2D.ExtendOffsetY = mArcExtendOffsetCutIn.PosY
                                            mIs1stTriggerCommand = False
                                        End If
                                        mTriggerPath.Arc2D.Velocity = mRunUp.Velocity
                                        mTriggerPath.Arc2D.WeightControl.dotPitch = mDotPitch
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mTriggerDispPathRegister.Capacity = mTriggerDispPathRegister.Count + 1
                                        mTriggerDispPathRegister.Add(mTriggerPath)
                                    End If
                                    '***************************************************

                                Case ePathType.Arc3D
                                    '[Note]:算出需助跑的資料
                                    Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes, mDotWeight, dispPathRegister.Item(mI), mRunUp, mDotPitch)
                                    If mRunUp.Distance > mMaxExtendDistance Then
                                        mMaxExtendDistance = mRunUp.Distance
                                    End If
                                    If mRunUp.Time > mMaxBlendTime Then
                                        mMaxBlendTime = mRunUp.Time
                                    End If
                                    Call EstimateArcExtendPath(mRegisterPath, mRunUp.Distance, mArcExtendOffsetCutIn, mArcExtendOffsetCutOut)

                                    '[Note]:跨元件用不同速走
                                    If mI <> 0 Then
                                        mPath.PathType = ePathType.Line3D
                                        mPath.Line3D.StartPosX = mLastPos.PosX
                                        mPath.Line3D.StartPosY = mLastPos.PosY
                                        mPath.Line3D.StartPosZ = mRegisterPath.Arc3D.StartPosZ
                                        mPath.Line3D.EndPosX = mRegisterPath.Arc3D.StartPosX - mArcExtendOffsetCutIn.PosX
                                        mPath.Line3D.EndPosY = mRegisterPath.Arc3D.StartPosY - mArcExtendOffsetCutIn.PosY
                                        mPath.Line3D.EndPosZ = mRegisterPath.Arc3D.StartPosZ
                                        mPath.Line3D.Velocity = mRunUp.Velocity
                                        mPath.Line3D.IsDispense = False
                                        mPath.Line3D.ParameterType = ePathParameterType.Arc
                                        mPath.Line3D.ParameterName = mRegisterPath.Arc3D.ParameterName
                                        mPath.IsFristPathInDie = True
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)
                                    End If

                                    '[Note]:先判斷是否為直接串接之路徑
                                    If IsUseExtendPath(mLastPatternPath, mRegisterPath) = True Then
                                        '[Note]:加入切線
                                        mPath.PathType = ePathType.Line3D
                                        mPath.Line3D.StartPosX = mRegisterPath.Arc2D.StartPosX - mArcExtendOffsetCutIn.PosX
                                        mPath.Line3D.StartPosY = mRegisterPath.Arc2D.StartPosY - mArcExtendOffsetCutIn.PosY
                                        mPath.Line3D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                        mPath.Line3D.EndPosX = mRegisterPath.Arc2D.StartPosX
                                        mPath.Line3D.EndPosY = mRegisterPath.Arc2D.StartPosY
                                        mPath.Line3D.EndPosZ = mRegisterPath.Arc2D.StartPosZ
                                        mPath.Line3D.ExtendOffsetX = 0
                                        mPath.Line3D.ExtendOffsetY = 0
                                        mPath.Line3D.Velocity = mRunUp.Velocity
                                        mPath.Line3D.IsDispense = False
                                        mPath.Line3D.ParameterType = ePathParameterType.Arc
                                        mPath.Line3D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                        mPath.IsFristPathInDie = False
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)
                                    Else
                                        mArcExtendOffsetCutIn.PosX = 0
                                        mArcExtendOffsetCutIn.PosY = 0
                                    End If

                                    '[Note]:把原本的Arc路徑加入
                                    With mPath
                                        .PathType = ePathType.Arc3D
                                        .Arc3D.StartPosX = mRegisterPath.Arc3D.StartPosX
                                        .Arc3D.StartPosY = mRegisterPath.Arc3D.StartPosY
                                        .Arc3D.StartPosZ = mRegisterPath.Arc3D.StartPosZ
                                        .Arc3D.CenterPosX = mRegisterPath.Arc3D.CenterPosX
                                        .Arc3D.CenterPosY = mRegisterPath.Arc3D.CenterPosY
                                        .Arc3D.CenterPosZ = mRegisterPath.Arc3D.CenterPosZ
                                        .Arc3D.EndPosX = mRegisterPath.Arc3D.EndPosX
                                        .Arc3D.EndPosY = mRegisterPath.Arc3D.EndPosY
                                        .Arc3D.EndPosZ = mRegisterPath.Arc3D.EndPosZ
                                        .Arc3D.ArcDirection = mRegisterPath.Arc3D.ArcDirection
                                        .Arc3D.Velocity = mRunUp.Velocity
                                        .Arc3D.IsDispense = mRegisterPath.Arc3D.IsDispense
                                        .Arc3D.ParameterType = ePathParameterType.Arc
                                        .Arc3D.ParameterName = mRegisterPath.Arc3D.ParameterName
                                        .IsFristPathInDie = False
                                    End With
                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                    mMotionDispPathRegister.Add(mPath)

                                    If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = False Then
                                        '[Note]:Arc延伸出來的線段
                                        With mPath
                                            .PathType = ePathType.Line3D
                                            .Line3D.StartPosX = mRegisterPath.Arc3D.EndPosX
                                            .Line3D.StartPosY = mRegisterPath.Arc3D.EndPosY
                                            .Line3D.StartPosZ = mRegisterPath.Arc3D.EndPosZ
                                            .Line3D.EndPosX = mRegisterPath.Arc3D.EndPosX + mArcExtendOffsetCutOut.PosX
                                            .Line3D.EndPosY = mRegisterPath.Arc3D.EndPosY + mArcExtendOffsetCutOut.PosY
                                            .Line3D.EndPosZ = mRegisterPath.Arc3D.EndPosZ
                                            .Line3D.Velocity = mRunUp.Velocity
                                            .Line3D.ExtendOffsetX = mArcExtendOffsetCutOut.PosX
                                            .Line3D.ExtendOffsetY = mArcExtendOffsetCutOut.PosY
                                            .Line3D.IsDispense = False
                                            .Line3D.ParameterType = ePathParameterType.Arc
                                            .Line3D.ParameterName = mRegisterPath.Arc3D.ParameterName
                                            .IsFristPathInDie = False
                                        End With
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)
                                        mArcExtendLinePath = mPath

                                        mLastPos.PosX = mPath.Line3D.EndPosX
                                        mLastPos.PosY = mPath.Line3D.EndPosY

                                        '[Note]:紀錄最近一筆的路徑資料
                                        With mLastPatternPath
                                            .PathType = ePathType.Arc3D
                                            .Arc3D.StartPosX = mRegisterPath.Arc3D.StartPosX
                                            .Arc3D.StartPosY = mRegisterPath.Arc3D.StartPosY
                                            .Arc3D.StartPosZ = mRegisterPath.Arc3D.StartPosZ
                                            .Arc3D.CenterPosX = mRegisterPath.Arc3D.CenterPosX
                                            .Arc3D.CenterPosY = mRegisterPath.Arc3D.CenterPosY
                                            .Arc3D.CenterPosZ = mRegisterPath.Arc3D.CenterPosZ
                                            .Arc3D.EndPosX = mRegisterPath.Arc3D.EndPosX
                                            .Arc3D.EndPosY = mRegisterPath.Arc3D.EndPosY
                                            .Arc3D.EndPosZ = mRegisterPath.Arc3D.EndPosZ
                                            .Arc3D.ArcDirection = mRegisterPath.Arc3D.ArcDirection
                                            .Arc3D.Velocity = mRunUp.Velocity
                                            '[Note]:給後面比對用的
                                            .Arc3D.ExtendOffsetX = mArcExtendOffsetCutOut.PosX
                                            .Arc3D.ExtendOffsetY = mArcExtendOffsetCutOut.PosY
                                        End With
                                    End If
                                    '***************************************************
                                    If mRegisterPath.Arc3D.IsDispense = True And updateTriggerDispPathRegister = True Then
                                        '[Note]:塞給Trigger board Data(只有第一組Trigger Cmd 需要助跑資訊，所以要把這資料保留給Cmd)
                                        mTriggerPath = mRegisterPath
                                        If mIs1stTriggerCommand = True Then
                                            mTriggerPath.Arc3D.ExtendOffsetX = mArcExtendOffsetCutIn.PosX
                                            mTriggerPath.Arc3D.ExtendOffsetY = mArcExtendOffsetCutIn.PosY
                                            mIs1stTriggerCommand = False
                                        End If
                                        mTriggerPath.Arc3D.Velocity = mRunUp.Velocity
                                        mTriggerPath.Arc3D.WeightControl.dotPitch = mDotPitch
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mTriggerDispPathRegister.Capacity = mTriggerDispPathRegister.Count + 1
                                        mTriggerDispPathRegister.Add(mTriggerPath)
                                    End If
                                    '***************************************************

                                Case ePathType.Wait
                                    '[Note]:不可能進來

                            End Select
                        Else
                            '[Note]:第二~n筆移動式的Path資料(且不是下一顆的第一個路徑)
                            Select Case TwoPathModel(mLastPatternPath, mRegisterPath)
                                Case eTwoPathModel.ArcArc
                                    '*****************************************
                                    '[Note]:算出需助跑的資料
                                    Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes, mDotWeight, dispPathRegister.Item(mI), mRunUp, mDotPitch)
                                    If mRunUp.Distance > mMaxExtendDistance Then
                                        mMaxExtendDistance = mRunUp.Distance
                                    End If
                                    If mRunUp.Time > mMaxBlendTime Then
                                        mMaxBlendTime = mRunUp.Time
                                    End If
                                    '***************************************************
                                    If mRegisterPath.Arc2D.IsDispense = True And updateTriggerDispPathRegister = True Then
                                        '[Note]:塞給Trigger board Data(只有第一組Trigger Cmd 需要助跑資訊，所以要把這資料保留給Cmd)
                                        mTriggerPath = mRegisterPath
                                        If mIs1stTriggerCommand = True Then
                                            mIs1stTriggerCommand = False
                                        End If
                                        '[Note]:塞給Trigger board Data
                                        mTriggerPath.Arc2D.Velocity = mRunUp.Velocity
                                        mTriggerPath.Arc2D.WeightControl.dotPitch = mDotPitch
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mTriggerDispPathRegister.Capacity = mTriggerDispPathRegister.Count + 1
                                        mTriggerDispPathRegister.Add(mTriggerPath)
                                    End If
                                    '***************************************************
                                    Call EstimateArcExtendPath(mRegisterPath, mRunUp.Distance, mArcExtendOffsetCutIn, mArcExtendOffsetCutOut)

                                    '[Note]:先判斷是否為直接串接之路徑
                                    If IsUseExtendPath(mLastPatternPath, mRegisterPath) Then
                                        '************************
                                        '[Note]:直接將二個延伸出來的端點接起來
                                        With mPath
                                            .PathType = ePathType.Line3D
                                            .Line3D.StartPosX = mLastPos.PosX
                                            .Line3D.StartPosY = mLastPos.PosY
                                            .Line3D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                            .Line3D.EndPosX = mRegisterPath.Arc2D.StartPosX - mArcExtendOffsetCutIn.PosX
                                            .Line3D.EndPosY = mRegisterPath.Arc2D.StartPosY - mArcExtendOffsetCutIn.PosY
                                            .Line3D.EndPosZ = mRegisterPath.Arc2D.StartPosZ
                                            .Line3D.ParameterType = ePathParameterType.Arc
                                            .Line3D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                            mDistance = CDec(Math.Sqrt((.Line3D.StartPosX - .Line3D.EndPosX) ^ 2 + (.Line3D.StartPosY - .Line3D.EndPosY) ^ 2))
                                            Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Line3D.Velocity)
                                            .Line3D.IsDispense = False
                                            .IsFristPathInDie = False
                                        End With
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)

                                        '[Note]:Arc延伸出來的路徑
                                        With mPath
                                            .PathType = ePathType.Line3D
                                            .Line3D.StartPosX = mRegisterPath.Arc2D.StartPosX - mArcExtendOffsetCutIn.PosX
                                            .Line3D.StartPosY = mRegisterPath.Arc2D.StartPosY - mArcExtendOffsetCutIn.PosY
                                            .Line3D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                            .Line3D.EndPosX = mRegisterPath.Arc2D.StartPosX
                                            .Line3D.EndPosY = mRegisterPath.Arc2D.StartPosY
                                            .Line3D.EndPosZ = mRegisterPath.Arc2D.StartPosZ
                                            .Line3D.Velocity = mRunUp.Velocity
                                            .Line3D.IsDispense = False
                                            .Line3D.ParameterType = ePathParameterType.Arc
                                            .Line3D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                            .IsFristPathInDie = False
                                            '20171016
                                            .Line3D.StartVel = mRegisterPath.Arc2D.StartVel
                                        End With
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)

                                        '[Note]:把原本的Arc路徑加入
                                        With mPath
                                            .PathType = ePathType.Arc2D
                                            .Arc2D.StartPosX = mRegisterPath.Arc2D.StartPosX
                                            .Arc2D.StartPosY = mRegisterPath.Arc2D.StartPosY
                                            .Arc2D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                            .Arc2D.CenterPosX = mRegisterPath.Arc2D.CenterPosX
                                            .Arc2D.CenterPosY = mRegisterPath.Arc2D.CenterPosY
                                            .Arc2D.CenterPosZ = mRegisterPath.Arc2D.CenterPosZ
                                            .Arc2D.EndPosX = mRegisterPath.Arc2D.EndPosX
                                            .Arc2D.EndPosY = mRegisterPath.Arc2D.EndPosY
                                            .Arc2D.EndPosZ = mRegisterPath.Arc2D.EndPosZ
                                            .Arc2D.ArcDirection = mRegisterPath.Arc2D.ArcDirection
                                            .Arc2D.Velocity = mRunUp.Velocity
                                            .Arc2D.IsDispense = mRegisterPath.Arc2D.IsDispense
                                            .Arc2D.ParameterType = ePathParameterType.Arc
                                            .Arc2D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                            .IsFristPathInDie = False
                                            '20171016
                                            .Arc2D.StartVel = mRegisterPath.Arc2D.StartVel
                                        End With
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)

                                        If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = False Then
                                            '[Note]:Arc延伸出來的線段
                                            With mPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mRegisterPath.Arc2D.EndPosX
                                                .Line3D.StartPosY = mRegisterPath.Arc2D.EndPosY
                                                .Line3D.StartPosZ = mRegisterPath.Arc2D.EndPosZ
                                                .Line3D.EndPosX = mRegisterPath.Arc2D.EndPosX + mArcExtendOffsetCutOut.PosX
                                                .Line3D.EndPosY = mRegisterPath.Arc2D.EndPosY + mArcExtendOffsetCutOut.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Arc2D.EndPosZ
                                                .Line3D.Velocity = mRunUp.Velocity
                                                .Line3D.ExtendOffsetX = mArcExtendOffsetCutOut.PosX
                                                .Line3D.ExtendOffsetY = mArcExtendOffsetCutOut.PosY
                                                .Line3D.IsDispense = False
                                                .Line3D.ParameterType = ePathParameterType.Arc
                                                .Line3D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                                .IsFristPathInDie = False
                                                '20171016
                                                .Line3D.StartVel = mRegisterPath.Arc2D.StartVel
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)
                                            mArcExtendLinePath = mPath

                                            mLastPos.PosX = mPath.Line3D.EndPosX
                                            mLastPos.PosY = mPath.Line3D.EndPosY

                                            '[Note]:紀錄最近一筆的路徑資料
                                            With mLastPatternPath
                                                .PathType = ePathType.Arc2D
                                                .Arc2D.StartPosX = mRegisterPath.Arc2D.StartPosX
                                                .Arc2D.StartPosY = mRegisterPath.Arc2D.StartPosY
                                                .Arc2D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                                .Arc2D.CenterPosX = mRegisterPath.Arc2D.CenterPosX
                                                .Arc2D.CenterPosY = mRegisterPath.Arc2D.CenterPosY
                                                .Arc2D.CenterPosZ = mRegisterPath.Arc2D.CenterPosZ
                                                .Arc2D.EndPosX = mRegisterPath.Arc2D.EndPosX
                                                .Arc2D.EndPosY = mRegisterPath.Arc2D.EndPosY
                                                .Arc2D.EndPosZ = mRegisterPath.Arc2D.EndPosZ
                                                .Arc2D.ArcDirection = mRegisterPath.Arc2D.ArcDirection
                                                .Arc2D.Velocity = mRunUp.Velocity
                                                '[Note]:給後面比對用的
                                                .Arc2D.ExtendOffsetX = mArcExtendOffsetCutOut.PosX
                                                .Arc2D.ExtendOffsetY = mArcExtendOffsetCutOut.PosY
                                                '20171016
                                                .Arc2D.StartVel = mRegisterPath.Arc2D.StartVel
                                            End With
                                        End If
                                        '************************
                                    Else
                                        '[Note]:直接接上去，但要先把前一個預延伸路徑去除掉
                                        mMotionDispPathRegister.RemoveAt(mMotionDispPathRegister.Count - 1)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count

                                        '[Note]:把原本的Arc路徑加入
                                        With mPath
                                            .PathType = ePathType.Arc2D
                                            .Arc2D.StartPosX = mRegisterPath.Arc2D.StartPosX
                                            .Arc2D.StartPosY = mRegisterPath.Arc2D.StartPosY
                                            .Arc2D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                            .Arc2D.CenterPosX = mRegisterPath.Arc2D.CenterPosX
                                            .Arc2D.CenterPosY = mRegisterPath.Arc2D.CenterPosY
                                            .Arc2D.CenterPosZ = mRegisterPath.Arc2D.CenterPosZ
                                            .Arc2D.EndPosX = mRegisterPath.Arc2D.EndPosX
                                            .Arc2D.EndPosY = mRegisterPath.Arc2D.EndPosY
                                            .Arc2D.EndPosZ = mRegisterPath.Arc2D.EndPosZ
                                            .Arc2D.ArcDirection = mRegisterPath.Arc2D.ArcDirection
                                            .Arc2D.Velocity = mRunUp.Velocity
                                            .Arc2D.IsDispense = mRegisterPath.Arc2D.IsDispense
                                            .Arc2D.ParameterType = ePathParameterType.Arc
                                            .Arc2D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                            .IsFristPathInDie = False
                                            '20171016
                                            .Arc2D.StartVel = mRegisterPath.Arc2D.StartVel
                                        End With
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)

                                        If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = False Then
                                            '[Note]:Arc延伸出來的線段
                                            With mPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mRegisterPath.Arc2D.EndPosX
                                                .Line3D.StartPosY = mRegisterPath.Arc2D.EndPosY
                                                .Line3D.StartPosZ = mRegisterPath.Arc2D.EndPosZ
                                                .Line3D.EndPosX = mRegisterPath.Arc2D.EndPosX + mArcExtendOffsetCutOut.PosX
                                                .Line3D.EndPosY = mRegisterPath.Arc2D.EndPosY + mArcExtendOffsetCutOut.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Arc2D.EndPosZ
                                                .Line3D.Velocity = mRunUp.Velocity
                                                .Line3D.ExtendOffsetX = mArcExtendOffsetCutOut.PosX
                                                .Line3D.ExtendOffsetY = mArcExtendOffsetCutOut.PosY
                                                .Line3D.IsDispense = False
                                                .Line3D.ParameterType = ePathParameterType.Arc
                                                .Line3D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                                .IsFristPathInDie = False
                                                '20171016
                                                .Line3D.StartVel = mRegisterPath.Arc2D.StartVel
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)
                                            mArcExtendLinePath = mPath

                                            mLastPos.PosX = mPath.Line3D.EndPosX
                                            mLastPos.PosY = mPath.Line3D.EndPosY
                                        End If

                                        '[Note]:紀錄最近一筆的路徑資料
                                        With mLastPatternPath
                                            .PathType = ePathType.Arc2D
                                            .Arc2D.StartPosX = mRegisterPath.Arc2D.StartPosX
                                            .Arc2D.StartPosY = mRegisterPath.Arc2D.StartPosY
                                            .Arc2D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                            .Arc2D.CenterPosX = mRegisterPath.Arc2D.CenterPosX
                                            .Arc2D.CenterPosY = mRegisterPath.Arc2D.CenterPosY
                                            .Arc2D.CenterPosZ = mRegisterPath.Arc2D.CenterPosZ
                                            .Arc2D.EndPosX = mRegisterPath.Arc2D.EndPosX
                                            .Arc2D.EndPosY = mRegisterPath.Arc2D.EndPosY
                                            .Arc2D.EndPosZ = mRegisterPath.Arc2D.EndPosZ
                                            .Arc2D.ArcDirection = mRegisterPath.Arc2D.ArcDirection
                                            .Arc2D.Velocity = mRunUp.Velocity
                                            '[Note]:給後面比對用的
                                            .Arc2D.ExtendOffsetX = mArcExtendOffsetCutOut.PosX
                                            .Arc2D.ExtendOffsetY = mArcExtendOffsetCutOut.PosY

                                            '20171016
                                            .Arc2D.StartVel = mRegisterPath.Arc2D.StartVel
                                        End With
                                    End If

                                Case eTwoPathModel.ArcDots
                                    '[Note]:基本上這已經是不可能會發生的
                                    '*****************************************
                                    '[Note]:Dots的RunUp目前只支援手動設定速度(自動換算暫不支援，後續再優化)
                                    Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes, mDotWeight, dispPathRegister.Item(mI), mRunUp, mDotPitch)
                                    If mRunUp.Distance > mMaxExtendDistance Then
                                        mMaxExtendDistance = mRunUp.Distance
                                    End If
                                    If mRunUp.Time > mMaxBlendTime Then
                                        mMaxBlendTime = mRunUp.Time
                                    End If
                                    '***************************************************
                                    If mRegisterPath.Dot3D.IsDispense = True And updateTriggerDispPathRegister = True Then
                                        '[Note]:塞給Trigger board Data(只有第一組Trigger Cmd 需要助跑資訊，所以要把這資料保留給Cmd)
                                        mTriggerPath = mRegisterPath
                                        If mIs1stTriggerCommand = True Then
                                            mIs1stTriggerCommand = False
                                        End If
                                        '[Note]:塞給Trigger board Data
                                        mTriggerPath.Dot3D.Velocity = mRunUp.Velocity
                                        mTriggerPath.Dot3D.WeightControl.dotPitch = mDotPitch
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mTriggerDispPathRegister.Capacity = mTriggerDispPathRegister.Count + 1
                                        mTriggerDispPathRegister.Add(mTriggerPath)
                                    End If
                                    '***************************************************

                                    With mRegisterPath.Dot3D
                                        mdx = .PosX - mLastPos.PosX
                                        mdy = .PosY - mLastPos.PosY
                                        mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                                        If mr = 0 Then
                                            mExtendOffset.PosX = 0
                                            mExtendOffset.PosY = 0
                                        Else
                                            mExtendOffset.PosX = mRunUp.Distance * mdx / mr
                                            mExtendOffset.PosY = mRunUp.Distance * mdy / mr
                                        End If
                                    End With

                                    '[Note]:先判斷是否為直接串接之路徑
                                    If IsUseExtendPath(mLastPatternPath, mRegisterPath) = True Then
                                        '*****************************************
                                        '[Note]:把連接的部分也加上去
                                        With mPath
                                            .PathType = ePathType.Line3D
                                            .Line3D.StartPosX = mLastPos.PosX
                                            .Line3D.StartPosY = mLastPos.PosY
                                            .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                            .Line3D.EndPosX = mRegisterPath.Dot3D.PosX - mExtendOffset.PosX
                                            .Line3D.EndPosY = mRegisterPath.Dot3D.PosY - mExtendOffset.PosY
                                            .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                            mDistance = mr
                                            Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Line3D.Velocity)
                                            .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                            .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                            .Line3D.IsDispense = False
                                            .Line3D.ParameterType = ePathParameterType.Dot
                                            .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                            .IsFristPathInDie = False
                                        End With
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)

                                        '[Note]:再把自身的部分加入，但是有可能會有Trigger誤觸發
                                        If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                            With mPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mRegisterPath.Dot3D.PosX - mExtendOffset.PosX
                                                .Line3D.StartPosY = mRegisterPath.Dot3D.PosY - mExtendOffset.PosY
                                                .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.EndPosX = mRegisterPath.Dot3D.PosX
                                                .Line3D.EndPosY = mRegisterPath.Dot3D.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.Velocity = mRunUp.Velocity
                                                .Line3D.IsDispense = mRegisterPath.Dot3D.IsDispense
                                                .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                .Line3D.ParameterType = ePathParameterType.Dot
                                                .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                .IsFristPathInDie = False
                                                '20171016
                                                .Line3D.StartVel = mRegisterPath.Dot3D.StartVel
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)
                                        Else
                                            With mPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mRegisterPath.Dot3D.PosX - mExtendOffset.PosX
                                                .Line3D.StartPosY = mRegisterPath.Dot3D.PosY - mExtendOffset.PosY
                                                .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.EndPosX = mRegisterPath.Dot3D.PosX + mExtendOffset.PosX
                                                .Line3D.EndPosY = mRegisterPath.Dot3D.PosY + mExtendOffset.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.Velocity = mRunUp.Velocity
                                                .Line3D.IsDispense = mRegisterPath.Dot3D.IsDispense
                                                .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                .Line3D.ParameterType = ePathParameterType.Dot
                                                .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                .IsFristPathInDie = False
                                                '20171016
                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)
                                            mLastPos.PosX = mPath.Line3D.EndPosX
                                            mLastPos.PosY = mPath.Line3D.EndPosY

                                            '[Note]:紀錄最近一筆的路徑資料
                                            With mLastPatternPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mRegisterPath.Dot3D.PosX - mExtendOffset.PosX
                                                .Line3D.StartPosY = mRegisterPath.Dot3D.PosY - mExtendOffset.PosY
                                                .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.EndPosX = mRegisterPath.Dot3D.PosX + mExtendOffset.PosX
                                                .Line3D.EndPosY = mRegisterPath.Dot3D.PosY + mExtendOffset.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                .Line3D.Velocity = mRunUp.Velocity
                                                '20171016
                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                            End With
                                        End If
                                        '*****************************************
                                    Else
                                        '[Note]:先去掉舊的，再把新的加上去
                                        mMotionDispPathRegister.RemoveAt(mMotionDispPathRegister.Count - 1)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count

                                        If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                            '[Note]:再把當下一個Path加上去
                                            With mPath
                                                .PathType = ePathType.Dot3D
                                                .Dot3D.PosX = mRegisterPath.Dot3D.PosX
                                                .Dot3D.PosY = mRegisterPath.Dot3D.PosY
                                                .Dot3D.PosZ = mRegisterPath.Dot3D.PosZ
                                                .Dot3D.Velocity = mRunUp.Velocity
                                                .Dot3D.IsDispense = mRegisterPath.Dot3D.IsDispense
                                                .Dot3D.ExtendOffsetX = 0
                                                .Dot3D.ExtendOffsetY = 0
                                                .Dot3D.ParameterType = ePathParameterType.Dot
                                                .Dot3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                .IsFristPathInDie = False
                                                '20171016
                                                .Dot3D.StartVel = mRegisterPath.Dot3D.StartVel
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)
                                        Else
                                            '[Note]:把連接的部分也加上去
                                            With mPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mLastPos.PosX
                                                .Line3D.StartPosY = mLastPos.PosY
                                                .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.EndPosX = mRegisterPath.Dot3D.PosX
                                                .Line3D.EndPosY = mRegisterPath.Dot3D.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                mDistance = mr
                                                Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Line3D.Velocity)
                                                .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                .Line3D.IsDispense = False
                                                .Line3D.ParameterType = ePathParameterType.Dot
                                                .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                .IsFristPathInDie = False
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)

                                            '[Note]:再把當下一個Path加上去
                                            With mPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mRegisterPath.Dot3D.PosX
                                                .Line3D.StartPosY = mRegisterPath.Dot3D.PosY
                                                .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.EndPosX = mRegisterPath.Dot3D.PosX + mExtendOffset.PosX
                                                .Line3D.EndPosY = mRegisterPath.Dot3D.PosY + mExtendOffset.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.Velocity = mRunUp.Velocity
                                                .Line3D.IsDispense = mRegisterPath.Dot3D.IsDispense
                                                .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                .Line3D.ParameterType = ePathParameterType.Dot
                                                .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                .IsFristPathInDie = False
                                                '20171016
                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)

                                            mLastPos.PosX = mPath.Line3D.EndPosX
                                            mLastPos.PosY = mPath.Line3D.EndPosY

                                            '[Note]:紀錄最近一筆的路徑資料
                                            With mLastPatternPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mRegisterPath.Dot3D.PosX
                                                .Line3D.StartPosY = mRegisterPath.Dot3D.PosY
                                                .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.EndPosX = mRegisterPath.Dot3D.PosX + mExtendOffset.PosX
                                                .Line3D.EndPosY = mRegisterPath.Dot3D.PosY + mExtendOffset.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                .Line3D.Velocity = mRunUp.Velocity
                                                '20171016
                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                            End With
                                        End If
                                    End If

                                Case eTwoPathModel.ArcLine
                                    '*****************************************
                                    '[Note]:算出需助跑的資料
                                    Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes, mDotWeight, dispPathRegister.Item(mI), mRunUp, mDotPitch)
                                    If mRunUp.Distance > mMaxExtendDistance Then
                                        mMaxExtendDistance = mRunUp.Distance
                                    End If
                                    If mRunUp.Time > mMaxBlendTime Then
                                        mMaxBlendTime = mRunUp.Time
                                    End If
                                    '***************************************************
                                    If mRegisterPath.Line3D.IsDispense = True And updateTriggerDispPathRegister = True Then
                                        '[Note]:塞給Trigger board Data(只有第一組Trigger Cmd 需要助跑資訊，所以要把這資料保留給Cmd)
                                        mTriggerPath = mRegisterPath
                                        If mIs1stTriggerCommand = True Then
                                            mIs1stTriggerCommand = False
                                        End If
                                        '[Note]:塞給Trigger board Data
                                        mTriggerPath.Line3D.Velocity = mRunUp.Velocity
                                        mTriggerPath.Line3D.WeightControl.dotPitch = mDotPitch
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mTriggerDispPathRegister.Capacity = mTriggerDispPathRegister.Count + 1
                                        mTriggerDispPathRegister.Add(mTriggerPath)
                                    End If
                                    '***************************************************

                                    With mRegisterPath.Line3D
                                        mdx = .EndPosX - .StartPosX
                                        mdy = .EndPosY - .StartPosY
                                        mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                                        If mr = 0 Then
                                            mExtendOffset.PosX = 0
                                            mExtendOffset.PosY = 0
                                        Else
                                            mExtendOffset.PosX = mRunUp.Distance * mdx / mr
                                            mExtendOffset.PosY = mRunUp.Distance * mdy / mr
                                            mArcOffset.PosX = dispParam.Recipe.LeadAngle.Distance * mdx / mr
                                            mArcOffset.PosY = dispParam.Recipe.LeadAngle.Distance * mdy / mr
                                        End If
                                    End With

                                    '[Note]:先判斷是否為直接串接之路徑
                                    If IsUseExtendPath(mLastPatternPath, mRegisterPath) = True Then
                                        '************************
                                        '[Note]:需要增加圓弧導角
                                        With mPath
                                            .PathType = ePathType.Line3D
                                            .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                            .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                            .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                            .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                            .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                            .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                            .Line3D.Velocity = mRunUp.Velocity
                                            .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                            .Line3D.ParameterType = ePathParameterType.Line
                                            .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                            .IsFristPathInDie = False
                                            '20171016
                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                        End With

                                        If dispParam.Recipe.LeadAngle.Degress <> 0 Then
                                            '*************************************************************************************
                                            'Step1:找最佳圓弧導角的圓心
                                            With mPath.Line3D
                                                mPath.PathType = ePathType.Line3D
                                                mCirclePos.PosX = .StartPosX
                                                mCirclePos.PosY = .StartPosY
                                                mCenterPos.PosX = .StartPosX - mArcOffset.PosX
                                                mCenterPos.PosY = .StartPosY - mArcOffset.PosY
                                                mAidPosNo1.PosX = mLastPos.PosX
                                                mAidPosNo1.PosY = mLastPos.PosY
                                                mAidPosNo2.PosX = .EndPosX
                                                mAidPosNo2.PosY = .EndPosY
                                                Call FindArcNoodle(dispParam.Recipe, mCirclePos, mCenterPos, mAidPosNo1, mAidPosNo2, mAddCenterPos, mNoodlePos, mArcDir)
                                            End With

                                            '[Note]:先加圓弧切點
                                            With mPath
                                                .PathType = ePathType.Dot3D
                                                .Dot3D.PosX = mNoodlePos.PosX
                                                .Dot3D.PosY = mNoodlePos.PosY
                                                .Dot3D.PosZ = mRegisterPath.Line3D.StartPosZ
                                                mDistance = CDec(Math.Sqrt((mNoodlePos.PosX - mLastPos.PosX) ^ 2 + (mNoodlePos.PosY - mLastPos.PosY) ^ 2))
                                                'Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Dot3D.Velocity)
                                                Premtek.CDispensingMath.GetCrossVelocity(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, gSSystemParameter.CrossVerticalTime, .Dot3D.Velocity) 'Soni + 2017.08.24
                                                .Dot3D.IsDispense = False
                                                .Dot3D.ParameterType = ePathParameterType.Line
                                                .Dot3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                .IsFristPathInDie = False
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)

                                            '[Note]:再加圓弧路徑
                                            With mPath
                                                .PathType = ePathType.Arc2D
                                                .Arc2D.StartPosX = mNoodlePos.PosX
                                                .Arc2D.StartPosY = mNoodlePos.PosY
                                                .Arc2D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                .Arc2D.CenterPosX = mAddCenterPos.PosX
                                                .Arc2D.CenterPosY = mAddCenterPos.PosY
                                                .Arc2D.CenterPosZ = mRegisterPath.Line3D.StartPosZ
                                                .Arc2D.EndPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX - mArcOffset.PosX
                                                .Arc2D.EndPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY - mArcOffset.PosY
                                                .Arc2D.EndPosZ = mRegisterPath.Line3D.StartPosZ
                                                .Arc2D.ArcDirection = mArcDir
                                                mDistance = (dispParam.Recipe.LeadAngle.Degress * (Math.PI / 180)) * Math.Sqrt(((.Arc2D.CenterPosX - .Arc2D.StartPosX) ^ 2) + ((.Arc2D.CenterPosY - .Arc2D.StartPosY) ^ 2))
                                                'Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Arc2D.Velocity)
                                                Premtek.CDispensingMath.GetCrossVelocity(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, gSSystemParameter.CrossVerticalTime, .Arc2D.Velocity) 'Soni + 2017.08.24
                                                .Arc2D.IsDispense = False
                                                .Arc2D.ParameterType = ePathParameterType.Line
                                                .Arc2D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                .IsFristPathInDie = False
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)

                                            '[Note]:最後再加入原先的路徑
                                            If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                With mPath
                                                    .PathType = ePathType.Line3D
                                                    .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX - mArcOffset.PosX
                                                    .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY - mArcOffset.PosY
                                                    .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                    .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX
                                                    .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY
                                                    .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                    .Line3D.Velocity = mRunUp.Velocity
                                                    .Line3D.ExtendOffsetX = 0
                                                    .Line3D.ExtendOffsetY = 0
                                                    .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                    .Line3D.ParameterType = ePathParameterType.Line
                                                    .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                    .IsFristPathInDie = False
                                                    '20171016
                                                    .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                End With
                                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                mMotionDispPathRegister.Add(mPath)
                                            Else
                                                With mPath
                                                    .PathType = ePathType.Line3D
                                                    .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX - mArcOffset.PosX
                                                    .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY - mArcOffset.PosY
                                                    .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                    .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                    .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                    .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                    .Line3D.Velocity = mRunUp.Velocity
                                                    .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                    .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                    .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                    .Line3D.ParameterType = ePathParameterType.Line
                                                    .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                    .IsFristPathInDie = False
                                                    '20171016
                                                    .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                End With
                                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                mMotionDispPathRegister.Add(mPath)

                                                mLastPos.PosX = mPath.Line3D.EndPosX
                                                mLastPos.PosY = mPath.Line3D.EndPosY

                                                '[Note]:紀錄最近一筆的路徑資料
                                                With mLastPatternPath
                                                    .PathType = ePathType.Line3D
                                                    .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX - mArcOffset.PosX
                                                    .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY - mArcOffset.PosY
                                                    .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                    .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                    .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                    .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                    .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                    .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                    .Line3D.Velocity = mRunUp.Velocity
                                                    '20171016
                                                    .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                End With
                                            End If
                                            '*************************************************************************************
                                        Else
                                            '[Note]:直接加，不額外增加路徑

                                            '[Note]:把連接的部分也加上去
                                            With mPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mLastPos.PosX
                                                .Line3D.StartPosY = mLastPos.PosY
                                                .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                .Line3D.EndPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                .Line3D.EndPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Line3D.StartPosZ
                                                mDistance = CDec(Math.Sqrt((.Line3D.StartPosX - .Line3D.EndPosX) ^ 2 + (.Line3D.StartPosY - .Line3D.EndPosY) ^ 2))
                                                Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Line3D.Velocity)
                                                .Line3D.IsDispense = False
                                                .Line3D.ParameterType = ePathParameterType.Line
                                                .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                .IsFristPathInDie = False
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)

                                            If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                With mPath
                                                    .PathType = ePathType.Line3D
                                                    .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                    .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                    .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                    .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX
                                                    .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY
                                                    .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                    .Line3D.Velocity = mRunUp.Velocity
                                                    .Line3D.ExtendOffsetX = 0
                                                    .Line3D.ExtendOffsetY = 0
                                                    .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                    .Line3D.ParameterType = ePathParameterType.Line
                                                    .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                    .IsFristPathInDie = False
                                                    '20171016
                                                    .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                End With
                                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                mMotionDispPathRegister.Add(mPath)
                                            Else
                                                With mPath
                                                    .PathType = ePathType.Line3D
                                                    .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                    .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                    .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                    .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                    .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                    .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                    .Line3D.Velocity = mRunUp.Velocity
                                                    .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                    .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                    .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                    .Line3D.ParameterType = ePathParameterType.Line
                                                    .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                    .IsFristPathInDie = False
                                                    '20171016
                                                    .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                End With
                                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                mMotionDispPathRegister.Add(mPath)

                                                mLastPos.PosX = mPath.Line3D.EndPosX
                                                mLastPos.PosY = mPath.Line3D.EndPosY

                                                '[Note]:紀錄最近一筆的路徑資料
                                                With mLastPatternPath
                                                    .PathType = ePathType.Line3D
                                                    .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                    .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                    .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                    .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                    .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                    .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                    .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                    .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                    .Line3D.Velocity = mRunUp.Velocity
                                                    '20171016
                                                    .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                End With
                                            End If
                                        End If
                                        '************************
                                    Else
                                        '[Note]:直接接上去，但要先把前一個預延伸路徑去除掉
                                        mMotionDispPathRegister.RemoveAt(mMotionDispPathRegister.Count - 1)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count

                                        If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                            '[Note]:直接把當下一個Path加上去
                                            With mPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX
                                                .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY
                                                .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX
                                                .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY
                                                .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                .Line3D.Velocity = mRunUp.Velocity
                                                .Line3D.ExtendOffsetX = 0
                                                .Line3D.ExtendOffsetY = 0
                                                .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                .Line3D.ParameterType = ePathParameterType.Line
                                                .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                .IsFristPathInDie = False
                                                '20171016
                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)
                                        Else
                                            '[Note]:直接把當下一個Path加上去
                                            With mPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX
                                                .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY
                                                .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                .Line3D.Velocity = mRunUp.Velocity
                                                .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                .Line3D.ParameterType = ePathParameterType.Line
                                                .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                .IsFristPathInDie = False
                                                '20171016
                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)

                                            mLastPos.PosX = mPath.Line3D.EndPosX
                                            mLastPos.PosY = mPath.Line3D.EndPosY

                                            '[Note]:紀錄最近一筆的路徑資料
                                            With mLastPatternPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX
                                                .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY
                                                .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                .Line3D.Velocity = mRunUp.Velocity
                                                '20171016
                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                            End With
                                        End If
                                    End If

                                Case eTwoPathModel.DotsArc
                                    '[Note]:基本上也不會有這個組合
                                    '[Note]:算出需助跑的資料
                                    Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes, mDotWeight, dispPathRegister.Item(mI), mRunUp, mDotPitch)
                                    If mRunUp.Distance > mMaxExtendDistance Then
                                        mMaxExtendDistance = mRunUp.Distance
                                    End If
                                    If mRunUp.Time > mMaxBlendTime Then
                                        mMaxBlendTime = mRunUp.Time
                                    End If
                                    '***************************************************
                                    If mRegisterPath.Arc2D.IsDispense = True And updateTriggerDispPathRegister = True Then
                                        '[Note]:塞給Trigger board Data(只有第一組Trigger Cmd 需要助跑資訊，所以要把這資料保留給Cmd)
                                        mTriggerPath = mRegisterPath
                                        If mIs1stTriggerCommand = True Then
                                            mIs1stTriggerCommand = False
                                        End If
                                        '[Note]:塞給Trigger board Data
                                        mTriggerPath.Arc2D.Velocity = mRunUp.Velocity
                                        mTriggerPath.Arc2D.WeightControl.dotPitch = mDotPitch
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mTriggerDispPathRegister.Capacity = mTriggerDispPathRegister.Count + 1
                                        mTriggerDispPathRegister.Add(mTriggerPath)
                                    End If
                                    '***************************************************
                                    Call EstimateArcExtendPath(mRegisterPath, mRunUp.Distance, mArcExtendOffsetCutIn, mArcExtendOffsetCutOut)

                                    '[Note]:先判斷是否為直接串接之路徑
                                    If IsUseExtendPath(mLastPatternPath, mRegisterPath) Then
                                        '************************
                                        '[Note]:直接將二個延伸出來的端點接起來
                                        With mPath
                                            .PathType = ePathType.Line3D
                                            .Line3D.StartPosX = mLastPos.PosX
                                            .Line3D.StartPosY = mLastPos.PosY
                                            .Line3D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                            .Line3D.EndPosX = mRegisterPath.Arc2D.StartPosX - mArcExtendOffsetCutIn.PosX
                                            .Line3D.EndPosY = mRegisterPath.Arc2D.StartPosY - mArcExtendOffsetCutIn.PosY
                                            .Line3D.EndPosZ = mRegisterPath.Arc2D.StartPosZ
                                            .Line3D.ParameterType = ePathParameterType.Arc
                                            .Line3D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                            mDistance = CDec(Math.Sqrt((.Line3D.StartPosX - .Line3D.EndPosX) ^ 2 + (.Line3D.StartPosY - .Line3D.EndPosY) ^ 2))
                                            Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Line3D.Velocity)
                                            .Line3D.IsDispense = False
                                            .IsFristPathInDie = False
                                        End With
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)

                                        '[Note]:Arc延伸出來的路徑
                                        With mPath
                                            .PathType = ePathType.Line3D
                                            .Line3D.StartPosX = mRegisterPath.Arc2D.StartPosX - mArcExtendOffsetCutIn.PosX
                                            .Line3D.StartPosY = mRegisterPath.Arc2D.StartPosY - mArcExtendOffsetCutIn.PosY
                                            .Line3D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                            .Line3D.EndPosX = mRegisterPath.Arc2D.StartPosX
                                            .Line3D.EndPosY = mRegisterPath.Arc2D.StartPosY
                                            .Line3D.EndPosZ = mRegisterPath.Arc2D.StartPosZ
                                            .Line3D.Velocity = mRunUp.Velocity
                                            .Line3D.IsDispense = False
                                            .Line3D.ParameterType = ePathParameterType.Arc
                                            .Line3D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                            .IsFristPathInDie = False
                                            '20171016
                                            .Line3D.StartVel = mRegisterPath.Arc2D.StartVel
                                        End With
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)

                                        '[Note]:把原本的Arc路徑加入
                                        With mPath
                                            .PathType = ePathType.Arc2D
                                            .Arc2D.StartPosX = mRegisterPath.Arc2D.StartPosX
                                            .Arc2D.StartPosY = mRegisterPath.Arc2D.StartPosY
                                            .Arc2D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                            .Arc2D.CenterPosX = mRegisterPath.Arc2D.CenterPosX
                                            .Arc2D.CenterPosY = mRegisterPath.Arc2D.CenterPosY
                                            .Arc2D.CenterPosZ = mRegisterPath.Arc2D.CenterPosZ
                                            .Arc2D.EndPosX = mRegisterPath.Arc2D.EndPosX
                                            .Arc2D.EndPosY = mRegisterPath.Arc2D.EndPosY
                                            .Arc2D.EndPosZ = mRegisterPath.Arc2D.EndPosZ
                                            .Arc2D.ArcDirection = mRegisterPath.Arc2D.ArcDirection
                                            .Arc2D.Velocity = mRunUp.Velocity
                                            .Arc2D.IsDispense = mRegisterPath.Arc2D.IsDispense
                                            .Arc2D.ParameterType = ePathParameterType.Arc
                                            .Arc2D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                            .IsFristPathInDie = False
                                            '20171016
                                            .Arc2D.StartVel = mRegisterPath.Arc2D.StartVel
                                        End With
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)

                                        If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = False Then
                                            '[Note]:Arc延伸出來的線段
                                            With mPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mRegisterPath.Arc2D.EndPosX
                                                .Line3D.StartPosY = mRegisterPath.Arc2D.EndPosY
                                                .Line3D.StartPosZ = mRegisterPath.Arc2D.EndPosZ
                                                .Line3D.EndPosX = mRegisterPath.Arc2D.EndPosX + mArcExtendOffsetCutOut.PosX
                                                .Line3D.EndPosY = mRegisterPath.Arc2D.EndPosY + mArcExtendOffsetCutOut.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Arc2D.EndPosZ
                                                .Line3D.Velocity = mRunUp.Velocity
                                                .Line3D.IsDispense = False
                                                .Line3D.ExtendOffsetX = mArcExtendOffsetCutOut.PosX
                                                .Line3D.ExtendOffsetY = mArcExtendOffsetCutOut.PosY
                                                .Line3D.ParameterType = ePathParameterType.Arc
                                                .Line3D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                                .IsFristPathInDie = False
                                                '20171016
                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)
                                            mArcExtendLinePath = mPath

                                            mLastPos.PosX = mPath.Line3D.EndPosX
                                            mLastPos.PosY = mPath.Line3D.EndPosY

                                            '[Note]:紀錄最近一筆的路徑資料
                                            With mLastPatternPath
                                                .PathType = ePathType.Arc2D
                                                .Arc2D.StartPosX = mRegisterPath.Arc2D.StartPosX
                                                .Arc2D.StartPosY = mRegisterPath.Arc2D.StartPosY
                                                .Arc2D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                                .Arc2D.CenterPosX = mRegisterPath.Arc2D.CenterPosX
                                                .Arc2D.CenterPosY = mRegisterPath.Arc2D.CenterPosY
                                                .Arc2D.CenterPosZ = mRegisterPath.Arc2D.CenterPosZ
                                                .Arc2D.EndPosX = mRegisterPath.Arc2D.EndPosX
                                                .Arc2D.EndPosY = mRegisterPath.Arc2D.EndPosY
                                                .Arc2D.EndPosZ = mRegisterPath.Arc2D.EndPosZ
                                                .Arc2D.ArcDirection = mRegisterPath.Arc2D.ArcDirection
                                                .Arc2D.Velocity = mRunUp.Velocity
                                                '[Note]:給後面比對用的
                                                .Arc2D.ExtendOffsetX = mArcExtendOffsetCutOut.PosX
                                                .Arc2D.ExtendOffsetY = mArcExtendOffsetCutOut.PosY
                                                '20171016
                                                .Arc2D.StartVel = mRegisterPath.Arc2D.StartVel
                                            End With
                                        End If
                                        '************************
                                    Else
                                        '[Note]:把原本的Arc路徑加入
                                        With mPath
                                            .PathType = ePathType.Arc2D
                                            .Arc2D.StartPosX = mRegisterPath.Arc2D.StartPosX
                                            .Arc2D.StartPosY = mRegisterPath.Arc2D.StartPosY
                                            .Arc2D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                            .Arc2D.CenterPosX = mRegisterPath.Arc2D.CenterPosX
                                            .Arc2D.CenterPosY = mRegisterPath.Arc2D.CenterPosY
                                            .Arc2D.CenterPosZ = mRegisterPath.Arc2D.CenterPosZ
                                            .Arc2D.EndPosX = mRegisterPath.Arc2D.EndPosX
                                            .Arc2D.EndPosY = mRegisterPath.Arc2D.EndPosY
                                            .Arc2D.EndPosZ = mRegisterPath.Arc2D.EndPosZ
                                            .Arc2D.ArcDirection = mRegisterPath.Arc2D.ArcDirection
                                            .Arc2D.Velocity = mRunUp.Velocity
                                            .Arc2D.IsDispense = mRegisterPath.Arc2D.IsDispense
                                            .Arc2D.ParameterType = ePathParameterType.Arc
                                            .Arc2D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                            .IsFristPathInDie = False
                                            '20171016
                                            .Arc2D.StartVel = mRegisterPath.Arc2D.StartVel
                                        End With
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)

                                        If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = False Then
                                            '[Note]:Arc延伸出來的線段
                                            With mPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mRegisterPath.Arc2D.EndPosX
                                                .Line3D.StartPosY = mRegisterPath.Arc2D.EndPosY
                                                .Line3D.StartPosZ = mRegisterPath.Arc2D.EndPosZ
                                                .Line3D.EndPosX = mRegisterPath.Arc2D.EndPosX + mArcExtendOffsetCutOut.PosX
                                                .Line3D.EndPosY = mRegisterPath.Arc2D.EndPosY + mArcExtendOffsetCutOut.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Arc2D.EndPosZ
                                                .Line3D.Velocity = mRunUp.Velocity
                                                .Line3D.ExtendOffsetX = mArcExtendOffsetCutOut.PosX
                                                .Line3D.ExtendOffsetY = mArcExtendOffsetCutOut.PosY
                                                .Line3D.IsDispense = False
                                                .Line3D.ParameterType = ePathParameterType.Arc
                                                .Line3D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                                .IsFristPathInDie = False
                                                '20171016
                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)
                                            mArcExtendLinePath = mPath

                                            mLastPos.PosX = mPath.Line3D.EndPosX
                                            mLastPos.PosY = mPath.Line3D.EndPosY

                                            '[Note]:紀錄最近一筆的路徑資料
                                            With mLastPatternPath
                                                .PathType = ePathType.Arc2D
                                                .Arc2D.StartPosX = mRegisterPath.Arc2D.StartPosX
                                                .Arc2D.StartPosY = mRegisterPath.Arc2D.StartPosY
                                                .Arc2D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                                .Arc2D.CenterPosX = mRegisterPath.Arc2D.CenterPosX
                                                .Arc2D.CenterPosY = mRegisterPath.Arc2D.CenterPosY
                                                .Arc2D.CenterPosZ = mRegisterPath.Arc2D.CenterPosZ
                                                .Arc2D.EndPosX = mRegisterPath.Arc2D.EndPosX
                                                .Arc2D.EndPosY = mRegisterPath.Arc2D.EndPosY
                                                .Arc2D.EndPosZ = mRegisterPath.Arc2D.EndPosZ
                                                .Arc2D.ArcDirection = mRegisterPath.Arc2D.ArcDirection
                                                .Arc2D.Velocity = mRunUp.Velocity
                                                '[Note]:給後面比對用的
                                                .Arc2D.ExtendOffsetX = mArcExtendOffsetCutOut.PosX
                                                .Arc2D.ExtendOffsetY = mArcExtendOffsetCutOut.PosY
                                                '20171016
                                                .Arc2D.StartVel = mRegisterPath.Arc2D.StartVel
                                            End With
                                        End If
                                    End If

                                Case eTwoPathModel.DotsDots
                                    '*****************************************
                                    '[Note]:Dots的RunUp目前只支援手動設定速度(自動換算暫不支援，後續再優化)
                                    Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes, mDotWeight, dispPathRegister.Item(mI), mRunUp, mDotPitch)
                                    If mRunUp.Distance > mMaxExtendDistance Then
                                        mMaxExtendDistance = mRunUp.Distance
                                    End If
                                    If mRunUp.Time > mMaxBlendTime Then
                                        mMaxBlendTime = mRunUp.Time
                                    End If
                                    '***************************************************
                                    If mRegisterPath.Dot3D.IsDispense = True And updateTriggerDispPathRegister = True Then
                                        '[Note]:塞給Trigger board Data(只有第一組Trigger Cmd 需要助跑資訊，所以要把這資料保留給Cmd)
                                        mTriggerPath = mRegisterPath
                                        If mIs1stTriggerCommand = True Then
                                            mIs1stTriggerCommand = False
                                        End If
                                        '[Note]:塞給Trigger board Data
                                        mTriggerPath.Dot3D.Velocity = mRunUp.Velocity
                                        mTriggerPath.Dot3D.WeightControl.dotPitch = mDotPitch
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mTriggerDispPathRegister.Capacity = mTriggerDispPathRegister.Count + 1
                                        mTriggerDispPathRegister.Add(mTriggerPath)
                                    End If
                                    '***************************************************

                                    With mRegisterPath.Dot3D
                                        mdx = .PosX - mLastPatternPath.Dot3D.PosX
                                        mdy = .PosY - mLastPatternPath.Dot3D.PosY
                                        mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                                        If mr = 0 Then
                                            mExtendOffset.PosX = 0
                                            mExtendOffset.PosY = 0
                                        Else
                                            mExtendOffset.PosX = mRunUp.Distance * mdx / mr
                                            mExtendOffset.PosY = mRunUp.Distance * mdy / mr
                                        End If
                                    End With

                                    '[Note]:先判斷是否為直接串接之路徑
                                    If IsUseExtendPath(mLastPatternPath, mRegisterPath) = True Then
                                        '[Note]:先判斷二條線端點的距離(不含助跑)
                                        '距離若大於(減速段+助跑段)，則安心的直接加上去
                                        '    若小於(減速段+助跑段)，則縮短二條線的助跑段(前一條的剎車段與這一條的加速段距離相同)
                                        '    距離不可能為0，為Recipe設定有問題[目前沒有防呆]

                                        '[Note]:二線段的距離
                                        mDisDx = mRegisterPath.Dot3D.PosX - (mLastPatternPath.Dot3D.PosX - mLastPatternPath.Dot3D.ExtendOffsetX)
                                        mDisDy = mRegisterPath.Dot3D.PosY - (mLastPatternPath.Dot3D.PosY - mLastPatternPath.Dot3D.ExtendOffsetY)
                                        mDistance = Math.Sqrt((mDisDx * mDisDx) + (mDisDy * mDisDy))

                                        With mLastPatternPath.Dot3D
                                            mRunDownDisance = Math.Sqrt((.ExtendOffsetX * .ExtendOffsetX) + (.ExtendOffsetY * .ExtendOffsetY))
                                        End With
                                        mRunUpDisance = mRunUp.Distance

                                        If mDistance >= (mRunDownDisance + mRunUpDisance) Then
                                            '[Note]:'距離若大於(減速段+助跑段)，則安心的直接加上去

                                            '[Note]:把連接的部分也加上去
                                            With mPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mLastPos.PosX
                                                .Line3D.StartPosY = mLastPos.PosY
                                                .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.EndPosX = mRegisterPath.Dot3D.PosX - mExtendOffset.PosX
                                                .Line3D.EndPosY = mRegisterPath.Dot3D.PosY - mExtendOffset.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.ParameterType = ePathParameterType.Dot
                                                .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                mDistance = CDec(Math.Sqrt((.Line3D.StartPosX - .Line3D.EndPosX) ^ 2 + (.Line3D.StartPosY - .Line3D.EndPosY) ^ 2))
                                                Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Line3D.Velocity)
                                                .Line3D.IsDispense = False
                                                .IsFristPathInDie = False
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)

                                            If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                With mPath
                                                    .PathType = ePathType.Line3D
                                                    .Line3D.StartPosX = mRegisterPath.Dot3D.PosX - mExtendOffset.PosX
                                                    .Line3D.StartPosY = mRegisterPath.Dot3D.PosY - mExtendOffset.PosY
                                                    .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                    .Line3D.EndPosX = mRegisterPath.Dot3D.PosX
                                                    .Line3D.EndPosY = mRegisterPath.Dot3D.PosY
                                                    .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                    .Line3D.Velocity = mRunUp.Velocity
                                                    .Line3D.IsDispense = mRegisterPath.Dot3D.IsDispense
                                                    .Line3D.ExtendOffsetX = 0
                                                    .Line3D.ExtendOffsetY = 0
                                                    .Line3D.ParameterType = ePathParameterType.Dot
                                                    .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                    .IsFristPathInDie = False
                                                    '20171016
                                                    .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                End With
                                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                mMotionDispPathRegister.Add(mPath)
                                            Else
                                                With mPath
                                                    .PathType = ePathType.Line3D
                                                    .Line3D.StartPosX = mRegisterPath.Dot3D.PosX - mExtendOffset.PosX
                                                    .Line3D.StartPosY = mRegisterPath.Dot3D.PosY - mExtendOffset.PosY
                                                    .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                    .Line3D.EndPosX = mRegisterPath.Dot3D.PosX + mExtendOffset.PosX
                                                    .Line3D.EndPosY = mRegisterPath.Dot3D.PosY + mExtendOffset.PosY
                                                    .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                    .Line3D.Velocity = mRunUp.Velocity
                                                    .Line3D.IsDispense = mRegisterPath.Dot3D.IsDispense
                                                    .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                    .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                    .Line3D.ParameterType = ePathParameterType.Dot
                                                    .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                    .IsFristPathInDie = False
                                                    '20171016
                                                    .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                End With
                                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                mMotionDispPathRegister.Add(mPath)
                                                mLastPos.PosX = mPath.Line3D.EndPosX
                                                mLastPos.PosY = mPath.Line3D.EndPosY

                                                '[Note]:紀錄最近一筆的路徑資料
                                                With mLastPatternPath
                                                    .PathType = ePathType.Line3D
                                                    .Line3D.StartPosX = mRegisterPath.Dot3D.PosX - mExtendOffset.PosX
                                                    .Line3D.StartPosY = mRegisterPath.Dot3D.PosY - mExtendOffset.PosY
                                                    .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                    .Line3D.EndPosX = mRegisterPath.Dot3D.PosX + mExtendOffset.PosX
                                                    .Line3D.EndPosY = mRegisterPath.Dot3D.PosY + mExtendOffset.PosY
                                                    .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                    .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                    .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                    .Line3D.Velocity = mRunUp.Velocity
                                                    '20171016
                                                    .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                End With
                                            End If
                                        Else
                                            '[Note]:距離若小於(減速段+助跑段)，則縮短二條線的助跑段(前一條的剎車段與這一條的加速段距離相同)
                                            mDisExtend.PosX = mDisDx / 2
                                            mDisExtend.PosY = mDisDy / 2

                                            '[Note]:把前一Path的延伸縮短-->再加上本體這一條(延伸一樣縮短)
                                            mPath = mMotionDispPathRegister.Item(mMotionDispPathRegister.Count - 1)
                                            mMemoryPatternPath = mMotionDispPathRegister.Item(mMotionDispPathRegister.Count - 1)

                                            '[Note]:只改終點
                                            With mPath.Dot3D
                                                .PosX = mMemoryPatternPath.Dot3D.PosX - mMemoryPatternPath.Dot3D.ExtendOffsetX + mDisExtend.PosX
                                                .PosY = mMemoryPatternPath.Dot3D.PosY - mMemoryPatternPath.Dot3D.ExtendOffsetY + mDisExtend.PosY
                                            End With
                                            '[Note]:先去掉舊的，再把新的加上去
                                            mMotionDispPathRegister.RemoveAt(mMotionDispPathRegister.Count - 1)
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)

                                            '[Note]:把連接的部分也加上去
                                            With mPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mPath.Dot3D.PosX
                                                .Line3D.StartPosY = mPath.Dot3D.PosY
                                                .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.EndPosX = mRegisterPath.Dot3D.PosX - mDisExtend.PosX
                                                .Line3D.EndPosY = mRegisterPath.Dot3D.PosY - mDisExtend.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                mDistance = CDec(Math.Sqrt((.Line3D.StartPosX - .Line3D.EndPosX) ^ 2 + (.Line3D.StartPosY - .Line3D.EndPosY) ^ 2))
                                                Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Line3D.Velocity)
                                                .Line3D.IsDispense = False
                                                .Line3D.ParameterType = ePathParameterType.Dot
                                                .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                .IsFristPathInDie = False
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)

                                            If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                '[Note]:再把當下一個Path加上去(起點延伸縮短，端點延伸不變)
                                                With mPath
                                                    .PathType = ePathType.Line3D
                                                    .Line3D.StartPosX = mRegisterPath.Dot3D.PosX - mDisExtend.PosX
                                                    .Line3D.StartPosY = mRegisterPath.Dot3D.PosY - mDisExtend.PosY
                                                    .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                    .Line3D.EndPosX = mRegisterPath.Dot3D.PosX
                                                    .Line3D.EndPosY = mRegisterPath.Dot3D.PosY
                                                    .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                    .Line3D.Velocity = mRunUp.Velocity
                                                    .Line3D.IsDispense = mRegisterPath.Dot3D.IsDispense
                                                    .Line3D.ExtendOffsetX = 0
                                                    .Line3D.ExtendOffsetY = 0
                                                    .Line3D.ParameterType = ePathParameterType.Dot
                                                    .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                    .IsFristPathInDie = False
                                                    '20171016
                                                    .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                End With
                                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                mMotionDispPathRegister.Add(mPath)
                                            Else
                                                '[Note]:再把當下一個Path加上去(起點延伸縮短，端點延伸不變)
                                                With mPath
                                                    .PathType = ePathType.Line3D
                                                    .Line3D.StartPosX = mRegisterPath.Dot3D.PosX - mDisExtend.PosX
                                                    .Line3D.StartPosY = mRegisterPath.Dot3D.PosY - mDisExtend.PosY
                                                    .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                    .Line3D.EndPosX = mRegisterPath.Dot3D.PosX + mExtendOffset.PosX
                                                    .Line3D.EndPosY = mRegisterPath.Dot3D.PosY + mExtendOffset.PosY
                                                    .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                    .Line3D.Velocity = mRunUp.Velocity
                                                    .Line3D.IsDispense = mRegisterPath.Dot3D.IsDispense
                                                    .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                    .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                    .Line3D.ParameterType = ePathParameterType.Dot
                                                    .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                    .IsFristPathInDie = False
                                                    '20171016
                                                    .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                End With
                                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                mMotionDispPathRegister.Add(mPath)
                                                mLastPos.PosX = mPath.Line3D.EndPosX
                                                mLastPos.PosY = mPath.Line3D.EndPosY

                                                '[Note]:紀錄最近一筆的路徑資料
                                                With mLastPatternPath
                                                    .PathType = ePathType.Line3D
                                                    .Line3D.StartPosX = mRegisterPath.Dot3D.PosX - mDisExtend.PosX
                                                    .Line3D.StartPosY = mRegisterPath.Dot3D.PosY - mDisExtend.PosY
                                                    .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                    .Line3D.EndPosX = mRegisterPath.Dot3D.PosX + mExtendOffset.PosX
                                                    .Line3D.EndPosY = mRegisterPath.Dot3D.PosY + mExtendOffset.PosY
                                                    .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                    .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                    .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                    .Line3D.Velocity = mRunUp.Velocity
                                                    '20171016
                                                    .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                End With
                                            End If
                                        End If
                                        '*****************************************
                                    Else
                                        '[Note]:先去掉舊的，再把新的加上去
                                        mMotionDispPathRegister.RemoveAt(mMotionDispPathRegister.Count - 1)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count

                                        If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                            '[Note]:再把當下一個Path加上去
                                            With mPath
                                                .PathType = ePathType.Dot3D
                                                .Dot3D.PosX = mRegisterPath.Dot3D.PosX
                                                .Dot3D.PosY = mRegisterPath.Dot3D.PosY
                                                .Dot3D.PosZ = mRegisterPath.Dot3D.PosZ
                                                .Dot3D.Velocity = mRunUp.Velocity
                                                .Dot3D.IsDispense = mRegisterPath.Dot3D.IsDispense
                                                .Dot3D.ExtendOffsetX = 0
                                                .Dot3D.ExtendOffsetY = 0
                                                .Line3D.ParameterType = ePathParameterType.Dot
                                                .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                .IsFristPathInDie = False
                                                '20171016
                                                .Dot3D.StartVel = mRegisterPath.Dot3D.StartVel
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)
                                        Else
                                            '[Note]:再把當下一個Path加上去
                                            With mPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mRegisterPath.Dot3D.PosX
                                                .Line3D.StartPosY = mRegisterPath.Dot3D.PosY
                                                .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.EndPosX = mRegisterPath.Dot3D.PosX + mExtendOffset.PosX
                                                .Line3D.EndPosY = mRegisterPath.Dot3D.PosY + mExtendOffset.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.Velocity = mRunUp.Velocity
                                                .Line3D.IsDispense = mRegisterPath.Dot3D.IsDispense
                                                .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                .Line3D.ParameterType = ePathParameterType.Dot
                                                .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                .IsFristPathInDie = False
                                                '20171016
                                                .Line3D.StartVel = mRegisterPath.Dot3D.StartVel
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)

                                            mLastPos.PosX = mPath.Line3D.EndPosX
                                            mLastPos.PosY = mPath.Line3D.EndPosY

                                            '[Note]:紀錄最近一筆的路徑資料
                                            With mLastPatternPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mRegisterPath.Dot3D.PosX
                                                .Line3D.StartPosY = mRegisterPath.Dot3D.PosY
                                                .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.EndPosX = mRegisterPath.Dot3D.PosX + mExtendOffset.PosX
                                                .Line3D.EndPosY = mRegisterPath.Dot3D.PosY + mExtendOffset.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                .Line3D.Velocity = mRunUp.Velocity
                                                '20171016
                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                            End With
                                        End If
                                    End If

                                Case eTwoPathModel.DotsLine
                                    '[Note]:Dots、Line--> 只有LineAndDirectionIsTheSame、LineIsTheSameButDirectionIsNot、None這三種關係

                                    '[Note]:算出需助跑的資料
                                    Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes, mDotWeight, dispPathRegister.Item(mI), mRunUp, mDotPitch)
                                    If mRunUp.Distance > mMaxExtendDistance Then
                                        mMaxExtendDistance = mRunUp.Distance
                                    End If
                                    If mRunUp.Time > mMaxBlendTime Then
                                        mMaxBlendTime = mRunUp.Time
                                    End If
                                    '***************************************************
                                    If mRegisterPath.Line3D.IsDispense = True And updateTriggerDispPathRegister = True Then
                                        '[Note]:塞給Trigger board Data(只有第一組Trigger Cmd 需要助跑資訊，所以要把這資料保留給Cmd)
                                        '[Note]:塞給Trigger board Data
                                        mTriggerPath = mRegisterPath
                                        If mIs1stTriggerCommand = True Then
                                            mIs1stTriggerCommand = False
                                        End If
                                        mTriggerPath.Line3D.Velocity = mRunUp.Velocity
                                        mTriggerPath.Line3D.WeightControl.dotPitch = mDotPitch
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mTriggerDispPathRegister.Capacity = mTriggerDispPathRegister.Count + 1
                                        mTriggerDispPathRegister.Add(mTriggerPath)
                                    End If
                                    '***************************************************

                                    With mRegisterPath.Line3D
                                        mdx = .EndPosX - .StartPosX
                                        mdy = .EndPosY - .StartPosY
                                        mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                                        If mr = 0 Then
                                            mExtendOffset.PosX = 0
                                            mExtendOffset.PosY = 0
                                        Else
                                            mExtendOffset.PosX = mRunUp.Distance * mdx / mr
                                            mExtendOffset.PosY = mRunUp.Distance * mdy / mr
                                            mArcOffset.PosX = dispParam.Recipe.LeadAngle.Distance * mdx / mr
                                            mArcOffset.PosY = dispParam.Recipe.LeadAngle.Distance * mdy / mr
                                        End If
                                    End With

                                    '[Note]:先判斷是否為直接串接之路徑
                                    If IsUseExtendPath(mLastPatternPath, mRegisterPath) Then
                                        Select Case EstimatePathNoArcRelationship(dispParam.Acc, mLastPatternPath, mRegisterPath)
                                            Case TwoPathRelationship.LineAndDirectionIsTheSame
                                                '*********************************************
                                                With mPath
                                                    .PathType = ePathType.Line3D
                                                    .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                    .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                    .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                    .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                    .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                    .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                    .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                    .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                    .Line3D.Velocity = mRunUp.Velocity
                                                    .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                    .Line3D.ParameterType = ePathParameterType.Line
                                                    .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                    .IsFristPathInDie = False
                                                    '20171016
                                                    .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                End With

                                                '[Note]:先判斷二條線端點的距離(不含助跑)
                                                '距離若大於(減速段+助跑段)，則安心的直接加上去
                                                '    若小於(減速段+助跑段)，則縮短二條線的助跑段(前一條的剎車段與這一條的加速段距離相同)
                                                '    距離不可能為0，因為這二組路徑為LineAndDirectionIsTheSame(上一條已經延伸出來了)

                                                '[Note]:二線段的距離
                                                mDisDx = mRegisterPath.Line3D.StartPosX - (mLastPatternPath.Dot3D.PosX - mLastPatternPath.Dot3D.ExtendOffsetX)
                                                mDisDy = mRegisterPath.Line3D.StartPosY - (mLastPatternPath.Dot3D.PosY - mLastPatternPath.Dot3D.ExtendOffsetY)
                                                mDistance = Math.Sqrt((mDisDx * mDisDx) + (mDisDy * mDisDy))

                                                With mLastPatternPath.Dot3D
                                                    mRunDownDisance = Math.Sqrt((.ExtendOffsetX * .ExtendOffsetX) + (.ExtendOffsetY * .ExtendOffsetY))
                                                End With
                                                mRunUpDisance = mRunUp.Distance

                                                If mDistance >= (mRunDownDisance + mRunUpDisance) Then
                                                    '[Note]:'距離若大於(減速段+助跑段)，則安心的直接加上去

                                                    '[Note]:把連接的部分也加上去
                                                    With mPath
                                                        .PathType = ePathType.Line3D
                                                        .Line3D.StartPosX = mLastPos.PosX
                                                        .Line3D.StartPosY = mLastPos.PosY
                                                        .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                        .Line3D.EndPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                        .Line3D.EndPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                        .Line3D.EndPosZ = mRegisterPath.Line3D.StartPosZ
                                                        mDistance = CDec(Math.Sqrt((.Line3D.StartPosX - .Line3D.EndPosX) ^ 2 + (.Line3D.StartPosY - .Line3D.EndPosY) ^ 2))
                                                        Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Line3D.Velocity)
                                                        .Line3D.IsDispense = False
                                                        .Line3D.ParameterType = ePathParameterType.Line
                                                        .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                        .IsFristPathInDie = False
                                                    End With
                                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                    mMotionDispPathRegister.Add(mPath)

                                                    If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                        With mPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                            .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                            .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX
                                                            .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY
                                                            .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                            .Line3D.Velocity = mRunUp.Velocity
                                                            .Line3D.ExtendOffsetX = 0
                                                            .Line3D.ExtendOffsetY = 0
                                                            .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                            .Line3D.ParameterType = ePathParameterType.Line
                                                            .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                            .IsFristPathInDie = False
                                                            '20171016
                                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                        End With
                                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                        mMotionDispPathRegister.Add(mPath)
                                                    Else
                                                        With mPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                            .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                            .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                            .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                            .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                            .Line3D.Velocity = mRunUp.Velocity
                                                            .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                            .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                            .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                            .Line3D.ParameterType = ePathParameterType.Line
                                                            .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                            .IsFristPathInDie = False
                                                            '20171016
                                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                        End With
                                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                        mMotionDispPathRegister.Add(mPath)
                                                        mLastPos.PosX = mPath.Line3D.EndPosX
                                                        mLastPos.PosY = mPath.Line3D.EndPosY

                                                        '[Note]:紀錄最近一筆的路徑資料
                                                        With mLastPatternPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                            .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                            .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                            .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                            .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                            .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                            .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                            .Line3D.Velocity = mRunUp.Velocity
                                                            .IsFristPathInDie = False
                                                            '20171016
                                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                        End With
                                                    End If
                                                Else
                                                    '[Note]:距離若小於(減速段+助跑段)，則縮短二條線的助跑段(前一條的剎車段與這一條的加速段距離相同)
                                                    mDisExtend.PosX = mDisDx / 2
                                                    mDisExtend.PosY = mDisDy / 2

                                                    '[Note]:把前一Path的延伸縮短-->再加上本體這一條(延伸一樣縮短)
                                                    mPath = mMotionDispPathRegister.Item(mMotionDispPathRegister.Count - 1)
                                                    mMemoryPatternPath = mMotionDispPathRegister.Item(mMotionDispPathRegister.Count - 1)

                                                    '[Note]:只改終點
                                                    With mPath.Dot3D
                                                        .PosX = mMemoryPatternPath.Dot3D.PosX - mMemoryPatternPath.Dot3D.ExtendOffsetX + mDisExtend.PosX
                                                        .PosY = mMemoryPatternPath.Dot3D.PosY - mMemoryPatternPath.Dot3D.ExtendOffsetY + mDisExtend.PosY
                                                    End With
                                                    '[Note]:先去掉舊的，再把新的加上去
                                                    mMotionDispPathRegister.RemoveAt(mMotionDispPathRegister.Count - 1)
                                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                    mMotionDispPathRegister.Add(mPath)

                                                    '[Note]:把連接的部分也加上去
                                                    With mPath
                                                        .PathType = ePathType.Line3D
                                                        .Line3D.StartPosX = mPath.Dot3D.PosX
                                                        .Line3D.StartPosY = mPath.Dot3D.PosY
                                                        .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                        .Line3D.EndPosX = mRegisterPath.Line3D.StartPosX - mDisExtend.PosX
                                                        .Line3D.EndPosY = mRegisterPath.Line3D.StartPosY - mDisExtend.PosY
                                                        .Line3D.EndPosZ = mRegisterPath.Line3D.StartPosZ
                                                        mDistance = CDec(Math.Sqrt((.Line3D.StartPosX - .Line3D.EndPosX) ^ 2 + (.Line3D.StartPosY - .Line3D.EndPosY) ^ 2))
                                                        Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Line3D.Velocity)
                                                        .Line3D.IsDispense = False
                                                        .Line3D.ParameterType = ePathParameterType.Line
                                                        .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                        .IsFristPathInDie = False

                                                    End With
                                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                    mMotionDispPathRegister.Add(mPath)

                                                    If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                        '[Note]:再把當下一個Path加上去(起點延伸縮短，端點延伸不變)
                                                        With mPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mDisExtend.PosX
                                                            .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mDisExtend.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                            .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX
                                                            .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY
                                                            .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                            .Line3D.Velocity = mRunUp.Velocity
                                                            .Line3D.ExtendOffsetX = 0
                                                            .Line3D.ExtendOffsetY = 0
                                                            .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                            .Line3D.ParameterType = ePathParameterType.Line
                                                            .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                            .IsFristPathInDie = False
                                                            '20171016
                                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                        End With
                                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                        mMotionDispPathRegister.Add(mPath)
                                                    Else
                                                        '[Note]:再把當下一個Path加上去(起點延伸縮短，端點延伸不變)
                                                        With mPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mDisExtend.PosX
                                                            .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mDisExtend.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                            .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                            .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                            .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                            .Line3D.Velocity = mRunUp.Velocity
                                                            .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                            .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                            .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                            .Line3D.ParameterType = ePathParameterType.Line
                                                            .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                            .IsFristPathInDie = False
                                                            '20171016
                                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                        End With
                                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                        mMotionDispPathRegister.Add(mPath)
                                                        mLastPos.PosX = mPath.Line3D.EndPosX
                                                        mLastPos.PosY = mPath.Line3D.EndPosY

                                                        '[Note]:紀錄最近一筆的路徑資料
                                                        With mLastPatternPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mDisExtend.PosX
                                                            .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mDisExtend.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                            .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                            .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                            .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                            .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                            .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                            .Line3D.Velocity = mRunUp.Velocity
                                                            '20171016
                                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                        End With
                                                    End If
                                                End If
                                                '*********************************************

                                            Case TwoPathRelationship.LineIsTheSameButDirectionIsNot
                                                '**************************************************
                                                '[Note]:直接加入即可，風險為可能誤觸Trigger訊號

                                                '[Note]:把連接的部分也加上去
                                                With mPath
                                                    .PathType = ePathType.Line3D
                                                    .Line3D.StartPosX = mPath.Dot3D.PosX
                                                    .Line3D.StartPosY = mPath.Dot3D.PosY
                                                    .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                    .Line3D.EndPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                    .Line3D.EndPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                    .Line3D.EndPosZ = mRegisterPath.Line3D.StartPosZ
                                                    mDistance = CDec(Math.Sqrt((.Line3D.StartPosX - .Line3D.EndPosX) ^ 2 + (.Line3D.StartPosY - .Line3D.EndPosY) ^ 2))
                                                    Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Line3D.Velocity)
                                                    .Line3D.IsDispense = False
                                                    .Line3D.ParameterType = ePathParameterType.Line
                                                    .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                    .IsFristPathInDie = False
                                                End With
                                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                mMotionDispPathRegister.Add(mPath)

                                                If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                    With mPath
                                                        .PathType = ePathType.Line3D
                                                        .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                        .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                        .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                        .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX
                                                        .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY
                                                        .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                        .Line3D.Velocity = mRunUp.Velocity
                                                        .Line3D.ExtendOffsetX = 0
                                                        .Line3D.ExtendOffsetY = 0
                                                        .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                        .Line3D.ParameterType = ePathParameterType.Line
                                                        .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                        .IsFristPathInDie = False
                                                        '20171016
                                                        .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                    End With
                                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                    mMotionDispPathRegister.Add(mPath)
                                                Else
                                                    With mPath
                                                        .PathType = ePathType.Line3D
                                                        .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                        .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                        .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                        .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                        .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                        .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                        .Line3D.Velocity = mRunUp.Velocity
                                                        .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                        .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                        .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                        .Line3D.ParameterType = ePathParameterType.Line
                                                        .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                        .IsFristPathInDie = False
                                                        '20171016
                                                        .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                    End With
                                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                    mMotionDispPathRegister.Add(mPath)
                                                    mLastPos.PosX = mPath.Line3D.EndPosX
                                                    mLastPos.PosY = mPath.Line3D.EndPosY

                                                    '[Note]:紀錄最近一筆的路徑資料
                                                    With mLastPatternPath
                                                        .PathType = ePathType.Line3D
                                                        .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                        .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                        .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                        .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                        .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                        .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                        .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                        .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                        .Line3D.Velocity = mRunUp.Velocity
                                                        '20171016
                                                        .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                    End With
                                                End If
                                                '**************************************************

                                            Case TwoPathRelationship.None
                                                '************************
                                                '[Note]:需要增加圓弧導角
                                                With mPath
                                                    .PathType = ePathType.Line3D
                                                    .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                    .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                    .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                    .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                    .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                    .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                    .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                    .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                    .Line3D.Velocity = mRunUp.Velocity
                                                    .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                    .Line3D.ParameterType = ePathParameterType.Line
                                                    .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                    .IsFristPathInDie = False
                                                    '20171016
                                                    .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                End With

                                                If dispParam.Recipe.LeadAngle.Degress <> 0 Then
                                                    '*************************************************************************************
                                                    'Step1:找最佳圓弧導角的圓心
                                                    With mPath.Line3D
                                                        mPath.PathType = ePathType.Line3D
                                                        mCirclePos.PosX = .StartPosX
                                                        mCirclePos.PosY = .StartPosY
                                                        mCenterPos.PosX = .StartPosX - mArcOffset.PosX
                                                        mCenterPos.PosY = .StartPosY - mArcOffset.PosY
                                                        mAidPosNo1.PosX = mLastPos.PosX
                                                        mAidPosNo1.PosY = mLastPos.PosY
                                                        mAidPosNo2.PosX = .EndPosX
                                                        mAidPosNo2.PosY = .EndPosY
                                                        Call FindArcNoodle(dispParam.Recipe, mCirclePos, mCenterPos, mAidPosNo1, mAidPosNo2, mAddCenterPos, mNoodlePos, mArcDir)
                                                    End With

                                                    '[Note]:先加圓弧切點
                                                    With mPath
                                                        .PathType = ePathType.Dot3D
                                                        .Dot3D.PosX = mNoodlePos.PosX
                                                        .Dot3D.PosY = mNoodlePos.PosY
                                                        .Dot3D.PosZ = mRegisterPath.Line3D.StartPosZ
                                                        mDistance = CDec(Math.Sqrt((mNoodlePos.PosX - mLastPos.PosX) ^ 2 + (mNoodlePos.PosY - mLastPos.PosY) ^ 2))
                                                        'Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Dot3D.Velocity)
                                                        Premtek.CDispensingMath.GetCrossVelocity(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, gSSystemParameter.CrossVerticalTime, .Dot3D.Velocity) 'Soni + 2017.08.24
                                                        .Dot3D.IsDispense = False
                                                        .Dot3D.ParameterType = ePathParameterType.Line
                                                        .Dot3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                        .IsFristPathInDie = False
                                                    End With
                                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                    mMotionDispPathRegister.Add(mPath)

                                                    '[Note]:再加圓弧路徑
                                                    With mPath
                                                        .PathType = ePathType.Arc2D
                                                        .Arc2D.StartPosX = mNoodlePos.PosX
                                                        .Arc2D.StartPosY = mNoodlePos.PosY
                                                        .Arc2D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                        .Arc2D.CenterPosX = mAddCenterPos.PosX
                                                        .Arc2D.CenterPosY = mAddCenterPos.PosY
                                                        .Arc2D.CenterPosZ = mRegisterPath.Line3D.StartPosZ
                                                        .Arc2D.EndPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX - mArcOffset.PosX
                                                        .Arc2D.EndPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY - mArcOffset.PosY
                                                        .Arc2D.EndPosZ = mRegisterPath.Line3D.StartPosZ
                                                        .Arc2D.ArcDirection = mArcDir
                                                        mDistance = (dispParam.Recipe.LeadAngle.Degress * (Math.PI / 180)) * Math.Sqrt(((.Arc2D.CenterPosX - .Arc2D.StartPosX) ^ 2) + ((.Arc2D.CenterPosY - .Arc2D.StartPosY) ^ 2))
                                                        'Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Arc2D.Velocity)
                                                        Premtek.CDispensingMath.GetCrossVelocity(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, gSSystemParameter.CrossVerticalTime, .Arc2D.Velocity) 'Soni + 2017.08.24
                                                        .Arc2D.IsDispense = False
                                                        .Arc2D.ParameterType = ePathParameterType.Line
                                                        .Arc2D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                        .IsFristPathInDie = False
                                                    End With
                                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                    mMotionDispPathRegister.Add(mPath)

                                                    '[Note]:最後再加入原先的路徑
                                                    If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                        With mPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX - mArcOffset.PosX
                                                            .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY - mArcOffset.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                            .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX
                                                            .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY
                                                            .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                            .Line3D.Velocity = mRunUp.Velocity
                                                            .Line3D.ExtendOffsetX = 0
                                                            .Line3D.ExtendOffsetY = 0
                                                            .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                            .Line3D.ParameterType = ePathParameterType.Line
                                                            .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                            .IsFristPathInDie = False
                                                            '20171016
                                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                        End With
                                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                        mMotionDispPathRegister.Add(mPath)
                                                    Else
                                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                        mMotionDispPathRegister.Add(mPath)

                                                        mLastPos.PosX = mPath.Line3D.EndPosX
                                                        mLastPos.PosY = mPath.Line3D.EndPosY

                                                        '[Note]:紀錄最近一筆的路徑資料
                                                        With mLastPatternPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX - mArcOffset.PosX
                                                            .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY - mArcOffset.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                            .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                            .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                            .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                            .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                            .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                            .Line3D.Velocity = mRunUp.Velocity
                                                            '20171016
                                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                        End With
                                                    End If
                                                    '*************************************************************************************
                                                Else
                                                    '[Note]:直接加，不額外增加路徑
                                                    If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                        With mPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                            .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                            .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX
                                                            .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY
                                                            .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                            .Line3D.ExtendOffsetX = 0
                                                            .Line3D.ExtendOffsetY = 0
                                                            .Line3D.Velocity = mRunUp.Velocity
                                                            .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                            .Line3D.ParameterType = ePathParameterType.Line
                                                            .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                            .IsFristPathInDie = False
                                                            '20171016
                                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                        End With
                                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                        mMotionDispPathRegister.Add(mPath)
                                                    Else
                                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                        mMotionDispPathRegister.Add(mPath)
                                                        mLastPos.PosX = mPath.Line3D.EndPosX
                                                        mLastPos.PosY = mPath.Line3D.EndPosY

                                                        '[Note]:紀錄最近一筆的路徑資料
                                                        With mLastPatternPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                            .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                            .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                            .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                            .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                            .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                            .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                            .Line3D.Velocity = mRunUp.Velocity
                                                            '20171016
                                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                        End With
                                                    End If
                                                End If
                                                '************************

                                        End Select
                                    Else
                                        '[Note]:先去掉舊的，再把新的加上去
                                        mMotionDispPathRegister.RemoveAt(mMotionDispPathRegister.Count - 1)
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count

                                        If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                            '[Note]:再把當下一個Path加上去
                                            With mPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX
                                                .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY
                                                .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX
                                                .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY
                                                .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                .Line3D.Velocity = mRunUp.Velocity
                                                .Line3D.ExtendOffsetX = 0
                                                .Line3D.ExtendOffsetY = 0
                                                .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                .Line3D.ParameterType = ePathParameterType.Line
                                                .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                .IsFristPathInDie = False
                                                '20171016
                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)
                                        Else
                                            '[Note]:再把當下一個Path加上去
                                            With mPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX
                                                .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY
                                                .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                .Line3D.Velocity = mRunUp.Velocity
                                                .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                .Line3D.ParameterType = ePathParameterType.Line
                                                .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                .IsFristPathInDie = False
                                                '20171016
                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)

                                            mLastPos.PosX = mPath.Line3D.EndPosX
                                            mLastPos.PosY = mPath.Line3D.EndPosY

                                            '[Note]:紀錄最近一筆的路徑資料
                                            With mLastPatternPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX
                                                .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY
                                                .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                .Line3D.Velocity = mRunUp.Velocity
                                                '20171016
                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                            End With
                                        End If
                                    End If

                                Case eTwoPathModel.LineArc
                                    '[Note]:算出需助跑的資料
                                    Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes, mDotWeight, dispPathRegister.Item(mI), mRunUp, mDotPitch)
                                    If mRunUp.Distance > mMaxExtendDistance Then
                                        mMaxExtendDistance = mRunUp.Distance
                                    End If
                                    If mRunUp.Time > mMaxBlendTime Then
                                        mMaxBlendTime = mRunUp.Time
                                    End If
                                    '***************************************************
                                    If mRegisterPath.Arc2D.IsDispense = True And updateTriggerDispPathRegister = True Then
                                        '[Note]:塞給Trigger board Data(只有第一組Trigger Cmd 需要助跑資訊，所以要把這資料保留給Cmd)
                                        mTriggerPath = mRegisterPath
                                        If mIs1stTriggerCommand = True Then
                                            mIs1stTriggerCommand = False
                                        End If
                                        '[Note]:塞給Trigger board Data
                                        mTriggerPath.Arc2D.Velocity = mRunUp.Velocity
                                        mTriggerPath.Arc2D.WeightControl.dotPitch = mDotPitch
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mTriggerDispPathRegister.Capacity = mTriggerDispPathRegister.Count + 1
                                        mTriggerDispPathRegister.Add(mTriggerPath)
                                    End If
                                    '***************************************************
                                    Call EstimateArcExtendPath(mRegisterPath, mRunUp.Distance, mArcExtendOffsetCutIn, mArcExtendOffsetCutOut)

                                    '[Note]:先判斷是否為直接串接之路徑
                                    If IsUseExtendPath(mLastPatternPath, mRegisterPath) = True Then
                                        '************************
                                        '[Note]:直接將二個延伸出來的端點接起來
                                        With mPath
                                            .PathType = ePathType.Line3D
                                            .Line3D.StartPosX = mLastPos.PosX
                                            .Line3D.StartPosY = mLastPos.PosY
                                            .Line3D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                            .Line3D.EndPosX = mRegisterPath.Arc2D.StartPosX - mArcExtendOffsetCutIn.PosX
                                            .Line3D.EndPosY = mRegisterPath.Arc2D.StartPosY - mArcExtendOffsetCutIn.PosY
                                            .Line3D.EndPosZ = mRegisterPath.Arc2D.StartPosZ
                                            mDistance = CDec(Math.Sqrt((.Line3D.StartPosX - .Line3D.EndPosX) ^ 2 + (.Line3D.StartPosY - .Line3D.EndPosY) ^ 2))
                                            Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Line3D.Velocity)
                                            .Line3D.IsDispense = False
                                            .Line3D.ParameterType = ePathParameterType.Arc
                                            .Line3D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                            .IsFristPathInDie = False
                                        End With
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)

                                        '[Note]:Arc延伸出來的路徑
                                        With mPath
                                            .PathType = ePathType.Line3D
                                            .Line3D.StartPosX = mRegisterPath.Arc2D.StartPosX - mArcExtendOffsetCutIn.PosX
                                            .Line3D.StartPosY = mRegisterPath.Arc2D.StartPosY - mArcExtendOffsetCutIn.PosY
                                            .Line3D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                            .Line3D.EndPosX = mRegisterPath.Arc2D.StartPosX
                                            .Line3D.EndPosY = mRegisterPath.Arc2D.StartPosY
                                            .Line3D.EndPosZ = mRegisterPath.Arc2D.StartPosZ
                                            .Line3D.Velocity = mRunUp.Velocity
                                            .Line3D.IsDispense = False
                                            .Line3D.ParameterType = ePathParameterType.Arc
                                            .Line3D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                            .IsFristPathInDie = False
                                            '20171016
                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                        End With
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)

                                        '[Note]:把原本的Arc路徑加入
                                        With mPath
                                            .PathType = ePathType.Arc2D
                                            .Arc2D.StartPosX = mRegisterPath.Arc2D.StartPosX
                                            .Arc2D.StartPosY = mRegisterPath.Arc2D.StartPosY
                                            .Arc2D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                            .Arc2D.CenterPosX = mRegisterPath.Arc2D.CenterPosX
                                            .Arc2D.CenterPosY = mRegisterPath.Arc2D.CenterPosY
                                            .Arc2D.CenterPosZ = mRegisterPath.Arc2D.CenterPosZ
                                            .Arc2D.EndPosX = mRegisterPath.Arc2D.EndPosX
                                            .Arc2D.EndPosY = mRegisterPath.Arc2D.EndPosY
                                            .Arc2D.EndPosZ = mRegisterPath.Arc2D.EndPosZ
                                            .Arc2D.ArcDirection = mRegisterPath.Arc2D.ArcDirection
                                            .Arc2D.Velocity = mRunUp.Velocity
                                            .Arc2D.IsDispense = mRegisterPath.Arc2D.IsDispense
                                            .Arc2D.ParameterType = ePathParameterType.Arc
                                            .Arc2D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                            .IsFristPathInDie = False
                                            '20171016
                                            .Arc2D.StartVel = mRegisterPath.Arc2D.StartVel
                                        End With
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)

                                        If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = False Then
                                            '[Note]:Arc延伸出來的線段
                                            With mPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mRegisterPath.Arc2D.EndPosX
                                                .Line3D.StartPosY = mRegisterPath.Arc2D.EndPosY
                                                .Line3D.StartPosZ = mRegisterPath.Arc2D.EndPosZ
                                                .Line3D.EndPosX = mRegisterPath.Arc2D.EndPosX + mArcExtendOffsetCutOut.PosX
                                                .Line3D.EndPosY = mRegisterPath.Arc2D.EndPosY + mArcExtendOffsetCutOut.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Arc2D.EndPosZ
                                                .Line3D.Velocity = mRunUp.Velocity
                                                .Line3D.ExtendOffsetX = mArcExtendOffsetCutOut.PosX
                                                .Line3D.ExtendOffsetY = mArcExtendOffsetCutOut.PosY
                                                .Line3D.IsDispense = False
                                                .Line3D.ParameterType = ePathParameterType.Arc
                                                .Line3D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                                .IsFristPathInDie = False
                                                '20171016
                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)
                                            mArcExtendLinePath = mPath

                                            mLastPos.PosX = mPath.Line3D.EndPosX
                                            mLastPos.PosY = mPath.Line3D.EndPosY

                                            '[Note]:紀錄最近一筆的路徑資料
                                            With mLastPatternPath
                                                .PathType = ePathType.Arc2D
                                                .Arc2D.StartPosX = mRegisterPath.Arc2D.StartPosX
                                                .Arc2D.StartPosY = mRegisterPath.Arc2D.StartPosY
                                                .Arc2D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                                .Arc2D.CenterPosX = mRegisterPath.Arc2D.CenterPosX
                                                .Arc2D.CenterPosY = mRegisterPath.Arc2D.CenterPosY
                                                .Arc2D.CenterPosZ = mRegisterPath.Arc2D.CenterPosZ
                                                .Arc2D.EndPosX = mRegisterPath.Arc2D.EndPosX
                                                .Arc2D.EndPosY = mRegisterPath.Arc2D.EndPosY
                                                .Arc2D.EndPosZ = mRegisterPath.Arc2D.EndPosZ
                                                .Arc2D.ArcDirection = mRegisterPath.Arc2D.ArcDirection
                                                .Arc2D.Velocity = mRunUp.Velocity
                                                '[Note]:給後面比對用的
                                                .Arc2D.ExtendOffsetX = mArcExtendOffsetCutOut.PosX
                                                .Arc2D.ExtendOffsetY = mArcExtendOffsetCutOut.PosY
                                                '20171016
                                                .Arc2D.StartVel = mRegisterPath.Arc2D.StartVel
                                            End With
                                        End If
                                        '************************
                                    Else
                                        '[Note]:把延伸出來的路徑縮回去
                                        mPath = mMotionDispPathRegister.Item(mMotionDispPathRegister.Count - 1)
                                        mMemoryPatternPath = mMotionDispPathRegister.Item(mMotionDispPathRegister.Count - 1)
                                        '[Note]:只改終點
                                        With mPath.Line3D
                                            .EndPosX = mMemoryPatternPath.Line3D.EndPosX - mMemoryPatternPath.Line3D.ExtendOffsetX
                                            .EndPosY = mMemoryPatternPath.Line3D.EndPosY - mMemoryPatternPath.Line3D.ExtendOffsetY
                                        End With
                                        '[Note]:先去掉舊的，再把新的加上去
                                        mMotionDispPathRegister.RemoveAt(mMotionDispPathRegister.Count - 1)
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)

                                        '[Note]:把原本的Arc路徑加入
                                        With mPath
                                            .PathType = ePathType.Arc2D
                                            .Arc2D.StartPosX = mRegisterPath.Arc2D.StartPosX
                                            .Arc2D.StartPosY = mRegisterPath.Arc2D.StartPosY
                                            .Arc2D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                            .Arc2D.CenterPosX = mRegisterPath.Arc2D.CenterPosX
                                            .Arc2D.CenterPosY = mRegisterPath.Arc2D.CenterPosY
                                            .Arc2D.CenterPosZ = mRegisterPath.Arc2D.CenterPosZ
                                            .Arc2D.EndPosX = mRegisterPath.Arc2D.EndPosX
                                            .Arc2D.EndPosY = mRegisterPath.Arc2D.EndPosY
                                            .Arc2D.EndPosZ = mRegisterPath.Arc2D.EndPosZ
                                            .Arc2D.ArcDirection = mRegisterPath.Arc2D.ArcDirection
                                            .Arc2D.Velocity = mRunUp.Velocity
                                            .Arc2D.IsDispense = mRegisterPath.Arc2D.IsDispense
                                            .Arc2D.ParameterType = ePathParameterType.Arc
                                            .Arc2D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                            .IsFristPathInDie = False
                                            '20171016
                                            .Arc2D.StartVel = mRegisterPath.Arc2D.StartVel
                                        End With
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)

                                        If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = False Then
                                            '[Note]:Arc延伸出來的線段
                                            With mPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mRegisterPath.Arc2D.EndPosX
                                                .Line3D.StartPosY = mRegisterPath.Arc2D.EndPosY
                                                .Line3D.StartPosZ = mRegisterPath.Arc2D.EndPosZ
                                                .Line3D.EndPosX = mRegisterPath.Arc2D.EndPosX + mArcExtendOffsetCutOut.PosX
                                                .Line3D.EndPosY = mRegisterPath.Arc2D.EndPosY + mArcExtendOffsetCutOut.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Arc2D.EndPosZ
                                                .Line3D.Velocity = mRunUp.Velocity
                                                .Line3D.ExtendOffsetX = mArcExtendOffsetCutOut.PosX
                                                .Line3D.ExtendOffsetY = mArcExtendOffsetCutOut.PosY
                                                .Line3D.IsDispense = False
                                                .Line3D.ParameterType = ePathParameterType.Arc
                                                .Line3D.ParameterName = mRegisterPath.Arc2D.ParameterName
                                                .IsFristPathInDie = False
                                                '20171016
                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)
                                            mArcExtendLinePath = mPath

                                            mLastPos.PosX = mPath.Line3D.EndPosX
                                            mLastPos.PosY = mPath.Line3D.EndPosY

                                            '[Note]:紀錄最近一筆的路徑資料
                                            With mLastPatternPath
                                                .PathType = ePathType.Arc2D
                                                .Arc2D.StartPosX = mRegisterPath.Arc2D.StartPosX
                                                .Arc2D.StartPosY = mRegisterPath.Arc2D.StartPosY
                                                .Arc2D.StartPosZ = mRegisterPath.Arc2D.StartPosZ
                                                .Arc2D.CenterPosX = mRegisterPath.Arc2D.CenterPosX
                                                .Arc2D.CenterPosY = mRegisterPath.Arc2D.CenterPosY
                                                .Arc2D.CenterPosZ = mRegisterPath.Arc2D.CenterPosZ
                                                .Arc2D.EndPosX = mRegisterPath.Arc2D.EndPosX
                                                .Arc2D.EndPosY = mRegisterPath.Arc2D.EndPosY
                                                .Arc2D.EndPosZ = mRegisterPath.Arc2D.EndPosZ
                                                .Arc2D.ArcDirection = mRegisterPath.Arc2D.ArcDirection
                                                .Arc2D.Velocity = mRunUp.Velocity
                                                '[Note]:給後面比對用的
                                                .Arc2D.ExtendOffsetX = mArcExtendOffsetCutOut.PosX
                                                .Arc2D.ExtendOffsetY = mArcExtendOffsetCutOut.PosY
                                                '20171016
                                                .Arc2D.StartVel = mRegisterPath.Arc2D.StartVel
                                            End With
                                        End If
                                    End If

                                Case eTwoPathModel.LineDots
                                    '[Note]:先判斷有沒有下一筆資訊
                                    If mI = dispPathRegister.Count - 1 Then
                                        '[Note]:沒有下一筆Path
                                        mNextPatternPath = Nothing
                                    Else
                                        mNextPatternPath = dispPathRegister.Item(mI + 1)
                                    End If
                                    '[Note]:沿用使用前一段路徑之RunUp(後面再想怎麼優化)
                                    '[Note]:目前先暫時透過直接塞速度的方式給定Dots的點膠速度(後面再想怎麼優化)
                                    'Call DetermineRunUpTimeDistance(dispParam.Acc, dispParam.Recipe.RunType, mCycleTimes, mDotWeight, dispPathRegister.Item(mI - 1), mRunUp)
                                    Call DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes, mDotWeight, dispPathRegister.Item(mI), mRunUp, mDotPitch)
                                    If mRunUp.Distance > mMaxExtendDistance Then
                                        mMaxExtendDistance = mRunUp.Distance
                                    End If
                                    If mRunUp.Time > mMaxBlendTime Then
                                        mMaxBlendTime = mRunUp.Time
                                    End If
                                    '***************************************************
                                    If mRegisterPath.Dot3D.IsDispense = True And updateTriggerDispPathRegister = True Then
                                        '[Note]:塞給Trigger board Data(只有第一組Trigger Cmd 需要助跑資訊，所以要把這資料保留給Cmd)
                                        mTriggerPath = mRegisterPath
                                        If mIs1stTriggerCommand = True Then
                                            mIs1stTriggerCommand = False
                                        End If
                                        mTriggerPath.Dot3D.Velocity = mRunUp.Velocity
                                        mTriggerPath.Dot3D.WeightControl.dotPitch = mDotPitch
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mTriggerDispPathRegister.Capacity = mTriggerDispPathRegister.Count + 1
                                        mTriggerDispPathRegister.Add(mTriggerPath)
                                    End If
                                    '***************************************************
                                    '[Note]:先判斷是否為直接串接之路徑
                                    If IsUseExtendPath(mLastPatternPath, mRegisterPath) Then
                                        Select Case EstimatePathNoArcRelationship(dispParam.Acc, mLastPatternPath, mRegisterPath, mNextPatternPath)
                                            '[Note]:Line、Dot-->有只 LineAndDirectionIsTheSame、ParallelAndDirectionIsNonSame、LineIsTheSameButDirectionIsNot、None這四種關係
                                            Case TwoPathRelationship.LineAndDirectionIsTheSame
                                                With mRegisterPath.Dot3D
                                                    mdx = .PosX - (mLastPatternPath.Line3D.EndPosX - mLastPatternPath.Line3D.ExtendOffsetX)
                                                    mdy = .PosY - (mLastPatternPath.Line3D.EndPosY - mLastPatternPath.Line3D.ExtendOffsetY)
                                                    mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                                                    If mr = 0 Then
                                                        mExtendOffset.PosX = 0
                                                        mExtendOffset.PosY = 0
                                                    Else
                                                        mExtendOffset.PosX = mRunUp.Distance * mdx / mr
                                                        mExtendOffset.PosY = mRunUp.Distance * mdy / mr
                                                    End If
                                                End With

                                                '[Note]:先判斷二條線端點的距離(不含助跑)
                                                '距離若大於(減速段+助跑段)，則安心的直接加上去
                                                '    若小於(減速段+助跑段)，則縮短二條線的助跑段(前一條的剎車段與這一條的加速段距離相同)
                                                '    距離不可能為0，因為這二組路徑為LineAndDirectionIsTheSame(上一條已經延伸出來了)

                                                '[Note]:二線段的距離
                                                mDisDx = mRegisterPath.Dot3D.PosX - (mLastPatternPath.Line3D.EndPosX - mLastPatternPath.Line3D.ExtendOffsetX)
                                                mDisDy = mRegisterPath.Dot3D.PosY - (mLastPatternPath.Line3D.EndPosY - mLastPatternPath.Line3D.ExtendOffsetY)
                                                mDistance = Math.Sqrt((mDisDx * mDisDx) + (mDisDy * mDisDy))

                                                With mLastPatternPath.Line3D
                                                    mRunDownDisance = Math.Sqrt((.ExtendOffsetX * .ExtendOffsetX) + (.ExtendOffsetY * .ExtendOffsetY))
                                                End With
                                                mRunUpDisance = mRunUp.Distance

                                                If mDistance >= (mRunDownDisance + mRunUpDisance) Then
                                                    '[Note]:'距離若大於(減速段+助跑段)，則安心的直接加上去

                                                    '[Note]:直接將二個延伸出來的端點接起來
                                                    With mPath
                                                        .PathType = ePathType.Line3D
                                                        .Line3D.StartPosX = mLastPos.PosX
                                                        .Line3D.StartPosY = mLastPos.PosY
                                                        .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                        .Line3D.EndPosX = mRegisterPath.Dot3D.PosX - mExtendOffset.PosX
                                                        .Line3D.EndPosY = mRegisterPath.Dot3D.PosY - mExtendOffset.PosY
                                                        .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                        mDistance = CDec(Math.Sqrt((.Line3D.StartPosX - .Line3D.EndPosX) ^ 2 + (.Line3D.StartPosY - .Line3D.EndPosY) ^ 2))
                                                        'Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Line3D.Velocity)
                                                        Premtek.CDispensingMath.GetCrossVelocity(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, gSSystemParameter.CrossVerticalTime, .Line3D.Velocity) 'Soni + 2017.08.24
                                                        '.Line3D.Velocity = mRunUp.Velocity
                                                        .Line3D.IsDispense = False
                                                        .Line3D.ParameterType = ePathParameterType.Dot
                                                        .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                        .IsFristPathInDie = False
                                                    End With
                                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                    mMotionDispPathRegister.Add(mPath)

                                                    If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                        With mPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mRegisterPath.Dot3D.PosX - mExtendOffset.PosX
                                                            .Line3D.StartPosY = mRegisterPath.Dot3D.PosY - mExtendOffset.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                            .Line3D.EndPosX = mRegisterPath.Dot3D.PosX
                                                            .Line3D.EndPosY = mRegisterPath.Dot3D.PosY
                                                            .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                            .Line3D.Velocity = mRunUp.Velocity
                                                            .Line3D.IsDispense = mRegisterPath.Dot3D.IsDispense
                                                            .Line3D.ExtendOffsetX = 0
                                                            .Line3D.ExtendOffsetY = 0
                                                            .Line3D.ParameterType = ePathParameterType.Dot
                                                            .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                            .IsFristPathInDie = False
                                                            '20171016
                                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                        End With
                                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                        mMotionDispPathRegister.Add(mPath)
                                                    Else
                                                        With mPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mRegisterPath.Dot3D.PosX - mExtendOffset.PosX
                                                            .Line3D.StartPosY = mRegisterPath.Dot3D.PosY - mExtendOffset.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                            .Line3D.EndPosX = mRegisterPath.Dot3D.PosX + mExtendOffset.PosX
                                                            .Line3D.EndPosY = mRegisterPath.Dot3D.PosY + mExtendOffset.PosY
                                                            .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                            .Line3D.Velocity = mRunUp.Velocity
                                                            .Line3D.IsDispense = mRegisterPath.Dot3D.IsDispense
                                                            .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                            .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                            .Line3D.ParameterType = ePathParameterType.Dot
                                                            .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                            .IsFristPathInDie = False
                                                            '20171016
                                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                        End With
                                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                        mMotionDispPathRegister.Add(mPath)
                                                        mLastPos.PosX = mPath.Line3D.EndPosX
                                                        mLastPos.PosY = mPath.Line3D.EndPosY

                                                        '[Note]:紀錄最近一筆的路徑資料
                                                        With mLastPatternPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mRegisterPath.Dot3D.PosX - mExtendOffset.PosX
                                                            .Line3D.StartPosY = mRegisterPath.Dot3D.PosY - mExtendOffset.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                            .Line3D.EndPosX = mRegisterPath.Dot3D.PosX + mExtendOffset.PosX
                                                            .Line3D.EndPosY = mRegisterPath.Dot3D.PosY + mExtendOffset.PosY
                                                            .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                            .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                            .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                            .Line3D.Velocity = mRunUp.Velocity
                                                            '20171016
                                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                        End With
                                                    End If
                                                Else
                                                    '[Note]:距離若小於(減速段+助跑段)，則縮短二條線的助跑段(前一條的剎車段與這一條的加速段距離相同)
                                                    mDisExtend.PosX = mDisDx / 2
                                                    mDisExtend.PosY = mDisDy / 2

                                                    '[Note]:把前一Path的延伸縮短-->再加上本體這一條(延伸一樣縮短)
                                                    mPath = mMotionDispPathRegister.Item(mMotionDispPathRegister.Count - 1)
                                                    mMemoryPatternPath = mMotionDispPathRegister.Item(mMotionDispPathRegister.Count - 1)

                                                    '[Note]:只改終點
                                                    With mPath.Line3D
                                                        .EndPosX = mMemoryPatternPath.Line3D.EndPosX - mMemoryPatternPath.Line3D.ExtendOffsetX + mDisExtend.PosX
                                                        .EndPosY = mMemoryPatternPath.Line3D.EndPosY - mMemoryPatternPath.Line3D.ExtendOffsetY + mDisExtend.PosY
                                                    End With
                                                    '[Note]:先去掉舊的，再把新的加上去
                                                    mMotionDispPathRegister.RemoveAt(mMotionDispPathRegister.Count - 1)
                                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                    mMotionDispPathRegister.Add(mPath)

                                                    '[Note]:直接將二個延伸出來的端點接起來
                                                    With mPath
                                                        .PathType = ePathType.Line3D
                                                        .Line3D.StartPosX = mPath.Line3D.EndPosX
                                                        .Line3D.StartPosY = mPath.Line3D.EndPosY
                                                        .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                        .Line3D.EndPosX = mRegisterPath.Dot3D.PosX - mDisExtend.PosX
                                                        .Line3D.EndPosY = mRegisterPath.Dot3D.PosY - mDisExtend.PosY
                                                        .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                        mDistance = CDec(Math.Sqrt((.Line3D.StartPosX - .Line3D.EndPosX) ^ 2 + (.Line3D.StartPosY - .Line3D.EndPosY) ^ 2))
                                                        'Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Line3D.Velocity)
                                                        Premtek.CDispensingMath.GetCrossVelocity(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, gSSystemParameter.CrossVerticalTime, .Line3D.Velocity) 'Soni + 2017.08.24
                                                        '.Line3D.Velocity = mRunUp.Velocity
                                                        .Line3D.IsDispense = False
                                                        .Line3D.ParameterType = ePathParameterType.Dot
                                                        .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                        .IsFristPathInDie = False
                                                    End With
                                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                    mMotionDispPathRegister.Add(mPath)

                                                    '[Note]:再把當下一個Path加上去(起點延伸縮短，端點延伸不變)
                                                    If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                        With mPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mRegisterPath.Dot3D.PosX - mDisExtend.PosX
                                                            .Line3D.StartPosY = mRegisterPath.Dot3D.PosY - mDisExtend.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                            .Line3D.EndPosX = mRegisterPath.Dot3D.PosX
                                                            .Line3D.EndPosY = mRegisterPath.Dot3D.PosY
                                                            .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                            .Line3D.Velocity = mRunUp.Velocity
                                                            .Line3D.IsDispense = mRegisterPath.Dot3D.IsDispense
                                                            .Line3D.ExtendOffsetX = 0
                                                            .Line3D.ExtendOffsetY = 0
                                                            .Line3D.ParameterType = ePathParameterType.Dot
                                                            .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                            .IsFristPathInDie = False
                                                            '20171016
                                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                        End With
                                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                        mMotionDispPathRegister.Add(mPath)
                                                    Else
                                                        With mPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mRegisterPath.Dot3D.PosX - mDisExtend.PosX
                                                            .Line3D.StartPosY = mRegisterPath.Dot3D.PosY - mDisExtend.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                            .Line3D.EndPosX = mRegisterPath.Dot3D.PosX + mExtendOffset.PosX
                                                            .Line3D.EndPosY = mRegisterPath.Dot3D.PosY + mExtendOffset.PosY
                                                            .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                            .Line3D.Velocity = mRunUp.Velocity
                                                            .Line3D.IsDispense = mRegisterPath.Dot3D.IsDispense
                                                            .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                            .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                            .Line3D.ParameterType = ePathParameterType.Dot
                                                            .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                            .IsFristPathInDie = False
                                                            '20171016
                                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                        End With
                                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                        mMotionDispPathRegister.Add(mPath)
                                                        mLastPos.PosX = mPath.Line3D.EndPosX
                                                        mLastPos.PosY = mPath.Line3D.EndPosY

                                                        '[Note]:紀錄最近一筆的路徑資料
                                                        With mLastPatternPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mRegisterPath.Dot3D.PosX - mDisExtend.PosX
                                                            .Line3D.StartPosY = mRegisterPath.Dot3D.PosY - mDisExtend.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                            .Line3D.EndPosX = mRegisterPath.Dot3D.PosX + mExtendOffset.PosX
                                                            .Line3D.EndPosY = mRegisterPath.Dot3D.PosY + mExtendOffset.PosY
                                                            .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                            .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                            .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                            .Line3D.Velocity = mRunUp.Velocity
                                                            .Line3D.ParameterType = ePathParameterType.Dot
                                                            .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                            '20171016
                                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                        End With
                                                    End If
                                                End If

                                            Case TwoPathRelationship.ParallelAndDirectionIsNonSame
                                                '[Note]:找最佳路徑(加原先的路徑)
                                                '[Note]:先偷加下一個Path資料進來，待下一次處理時再進行路徑調整(LineIsTheSame)
                                                '       一定會有下一組Path且該Path只可能為Line、Dots
                                                Select Case dispPathRegister.Item(mI + 1).PathType
                                                    Case ePathType.Line3D
                                                        mdx = dispPathRegister.Item(mI + 1).Line3D.StartPosX - mRegisterPath.Dot3D.PosX
                                                        mdy = dispPathRegister.Item(mI + 1).Line3D.StartPosY - mRegisterPath.Dot3D.PosY

                                                    Case ePathType.Dot3D
                                                        mdx = dispPathRegister.Item(mI + 1).Dot3D.PosX - mRegisterPath.Dot3D.PosX
                                                        mdy = dispPathRegister.Item(mI + 1).Dot3D.PosY - mRegisterPath.Dot3D.PosY

                                                End Select
                                                mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                                                If mr = 0 Then
                                                    mExtendOffset.PosX = 0
                                                    mExtendOffset.PosY = 0
                                                Else
                                                    mExtendOffset.PosX = mRunUp.Distance * mdx / mr
                                                    mExtendOffset.PosY = mRunUp.Distance * mdy / mr
                                                End If

                                                If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                    With mPath
                                                        .PathType = ePathType.Line3D
                                                        .Line3D.StartPosX = mRegisterPath.Dot3D.PosX - mExtendOffset.PosX
                                                        .Line3D.StartPosY = mRegisterPath.Dot3D.PosY - mExtendOffset.PosY
                                                        .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                        .Line3D.EndPosX = mRegisterPath.Dot3D.PosX
                                                        .Line3D.EndPosY = mRegisterPath.Dot3D.PosY
                                                        .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                        .Line3D.Velocity = mRunUp.Velocity
                                                        .Line3D.ExtendOffsetX = 0
                                                        .Line3D.ExtendOffsetY = 0
                                                        .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                        .Line3D.ParameterType = ePathParameterType.Dot
                                                        .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                        .IsFristPathInDie = False
                                                        '20171016
                                                        .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                    End With
                                                Else
                                                    With mPath
                                                        .PathType = ePathType.Line3D
                                                        .Line3D.StartPosX = mRegisterPath.Dot3D.PosX - mExtendOffset.PosX
                                                        .Line3D.StartPosY = mRegisterPath.Dot3D.PosY - mExtendOffset.PosY
                                                        .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                        .Line3D.EndPosX = mRegisterPath.Dot3D.PosX + mExtendOffset.PosX
                                                        .Line3D.EndPosY = mRegisterPath.Dot3D.PosY + mExtendOffset.PosY
                                                        .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                        .Line3D.Velocity = mRunUp.Velocity
                                                        .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                        .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                        .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                        .Line3D.ParameterType = ePathParameterType.Dot
                                                        .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                        .IsFristPathInDie = False
                                                        '20171016
                                                        .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                    End With
                                                End If
                                                dispParam.VelHigh = IIf(gSSystemParameter.MaxCrossStepVelocity > 0, gSSystemParameter.MaxCrossStepVelocity, dispParam.VelHigh) 'Soni + 2017.08.14 跨線段速度上限
                                                Call DetermineExtendWhichLine(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mLastPatternPath, mPath, mMotionDispPathRegister)
                                                mLastPos.PosX = mPath.Line3D.EndPosX
                                                mLastPos.PosY = mPath.Line3D.EndPosY

                                                '[Note]:紀錄最近一筆的路徑資料
                                                With mLastPatternPath
                                                    .PathType = ePathType.Line3D
                                                    .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                    .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                    .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                    .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                    .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                    .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                    .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                    .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                    .Line3D.Velocity = mRunUp.Velocity
                                                    '20171016
                                                    .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                End With

                                            Case TwoPathRelationship.LineIsTheSameButDirectionIsNot
                                                '************************************************************
                                                '[Note]:直接加入即可，風險為可能誤觸Trigger訊號
                                                With mRegisterPath.Dot3D
                                                    mdx = .PosX - mLastPatternPath.Line3D.EndPosX
                                                    mdy = .PosY - mLastPatternPath.Line3D.EndPosY
                                                    mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                                                    If mr = 0 Then
                                                        mExtendOffset.PosX = 0
                                                        mExtendOffset.PosY = 0
                                                    Else
                                                        mExtendOffset.PosX = mRunUp.Distance * mdx / mr
                                                        mExtendOffset.PosY = mRunUp.Distance * mdy / mr
                                                    End If
                                                End With

                                                '[Note]:直接將二個延伸出來的端點接起來
                                                With mPath
                                                    .PathType = ePathType.Line3D
                                                    .Line3D.StartPosX = mLastPos.PosX
                                                    .Line3D.StartPosY = mLastPos.PosY
                                                    .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                    .Line3D.EndPosX = mRegisterPath.Dot3D.PosX - mExtendOffset.PosX
                                                    .Line3D.EndPosY = mRegisterPath.Dot3D.PosY - mExtendOffset.PosY
                                                    .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                    mDistance = CDec(Math.Sqrt((.Line3D.StartPosX - .Line3D.EndPosX) ^ 2 + (.Line3D.StartPosY - .Line3D.EndPosY) ^ 2))
                                                    'Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Line3D.Velocity)
                                                    Premtek.CDispensingMath.GetCrossVelocity(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, gSSystemParameter.CrossVerticalTime, .Line3D.Velocity) 'Soni + 2017.08.24
                                                    '.Line3D.Velocity = mRunUp.Velocity
                                                    .Line3D.IsDispense = False
                                                    .Line3D.ParameterType = ePathParameterType.Dot
                                                    .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                    .IsFristPathInDie = False
                                                End With
                                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                mMotionDispPathRegister.Add(mPath)

                                                If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                    With mPath
                                                        .PathType = ePathType.Line3D
                                                        .Line3D.StartPosX = mRegisterPath.Dot3D.PosX - mExtendOffset.PosX
                                                        .Line3D.StartPosY = mRegisterPath.Dot3D.PosY - mExtendOffset.PosY
                                                        .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                        .Line3D.EndPosX = mRegisterPath.Dot3D.PosX
                                                        .Line3D.EndPosY = mRegisterPath.Dot3D.PosY
                                                        .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                        .Line3D.Velocity = mRunUp.Velocity
                                                        .Line3D.ExtendOffsetX = 0
                                                        .Line3D.ExtendOffsetY = 0
                                                        .Line3D.IsDispense = mRegisterPath.Dot3D.IsDispense
                                                        .Line3D.ParameterType = ePathParameterType.Dot
                                                        .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                        .IsFristPathInDie = False
                                                        '20171016
                                                        .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                    End With
                                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                    mMotionDispPathRegister.Add(mPath)
                                                Else
                                                    With mPath
                                                        .PathType = ePathType.Line3D
                                                        .Line3D.StartPosX = mRegisterPath.Dot3D.PosX - mExtendOffset.PosX
                                                        .Line3D.StartPosY = mRegisterPath.Dot3D.PosY - mExtendOffset.PosY
                                                        .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                        .Line3D.EndPosX = mRegisterPath.Dot3D.PosX + mExtendOffset.PosX
                                                        .Line3D.EndPosY = mRegisterPath.Dot3D.PosY + mExtendOffset.PosY
                                                        .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                        .Line3D.Velocity = mRunUp.Velocity
                                                        .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                        .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                        .Line3D.IsDispense = mRegisterPath.Dot3D.IsDispense
                                                        .Line3D.ParameterType = ePathParameterType.Dot
                                                        .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                        .IsFristPathInDie = False
                                                        '20171016
                                                        .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                    End With
                                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                    mMotionDispPathRegister.Add(mPath)
                                                    mLastPos.PosX = mPath.Line3D.EndPosX
                                                    mLastPos.PosY = mPath.Line3D.EndPosY

                                                    '[Note]:紀錄最近一筆的路徑資料
                                                    With mLastPatternPath
                                                        .PathType = ePathType.Dot3D
                                                        .Line3D.StartPosX = mRegisterPath.Dot3D.PosX - mExtendOffset.PosX
                                                        .Line3D.StartPosY = mRegisterPath.Dot3D.PosY - mExtendOffset.PosY
                                                        .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                        .Line3D.EndPosX = mRegisterPath.Dot3D.PosX + mExtendOffset.PosX
                                                        .Line3D.EndPosY = mRegisterPath.Dot3D.PosY + mExtendOffset.PosY
                                                        .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                        .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                        .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                        .Line3D.Velocity = mRunUp.Velocity
                                                        '20171016
                                                        .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                    End With
                                                End If
                                                '************************************************************

                                            Case TwoPathRelationship.None
                                                '[Note]:直接接上去了，不能將X、Y二個向量分開來走(除非不走延伸出去)
                                                With mRegisterPath.Dot3D
                                                    mdx = .PosX - mLastPatternPath.Line3D.EndPosX
                                                    mdy = .PosY - mLastPatternPath.Line3D.EndPosY
                                                    mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                                                    If mr = 0 Then
                                                        mExtendOffset.PosX = 0
                                                        mExtendOffset.PosY = 0
                                                    Else
                                                        mExtendOffset.PosX = mRunUp.Distance * mdx / mr
                                                        mExtendOffset.PosY = mRunUp.Distance * mdy / mr
                                                    End If
                                                End With

                                                If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                    With mPath
                                                        .PathType = ePathType.Dot3D
                                                        .Dot3D.PosX = mRegisterPath.Dot3D.PosX
                                                        .Dot3D.PosY = mRegisterPath.Dot3D.PosY
                                                        .Dot3D.PosZ = mRegisterPath.Dot3D.PosZ
                                                        .Dot3D.Velocity = mRunUp.Velocity
                                                        .Dot3D.ExtendOffsetX = 0
                                                        .Dot3D.ExtendOffsetY = 0
                                                        .Dot3D.IsDispense = mRegisterPath.Dot3D.IsDispense
                                                        .Dot3D.ParameterType = ePathParameterType.Dot
                                                        .Dot3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                        .IsFristPathInDie = False
                                                    End With
                                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                    mMotionDispPathRegister.Add(mPath)
                                                Else
                                                    With mPath
                                                        .PathType = ePathType.Line3D
                                                        .Line3D.StartPosX = mRegisterPath.Dot3D.PosX
                                                        .Line3D.StartPosY = mRegisterPath.Dot3D.PosY
                                                        .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                        .Line3D.EndPosX = mRegisterPath.Dot3D.PosX + mExtendOffset.PosX
                                                        .Line3D.EndPosY = mRegisterPath.Dot3D.PosY + mExtendOffset.PosY
                                                        .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                        .Line3D.Velocity = mRunUp.Velocity
                                                        .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                        .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                        .Line3D.IsDispense = mRegisterPath.Dot3D.IsDispense
                                                        .Line3D.ParameterType = ePathParameterType.Dot
                                                        .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                        .IsFristPathInDie = False
                                                        '20171016
                                                        .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                    End With

                                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                    mMotionDispPathRegister.Add(mPath)

                                                    mLastPos.PosX = mPath.Line3D.EndPosX
                                                    mLastPos.PosY = mPath.Line3D.EndPosY

                                                    '[Note]:紀錄最近一筆的路徑資料
                                                    With mLastPatternPath
                                                        .PathType = ePathType.Line3D
                                                        .Line3D.StartPosX = mRegisterPath.Dot3D.PosX
                                                        .Line3D.StartPosY = mRegisterPath.Dot3D.PosY
                                                        .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                        .Line3D.EndPosX = mRegisterPath.Dot3D.PosX + mExtendOffset.PosX
                                                        .Line3D.EndPosY = mRegisterPath.Dot3D.PosY + mExtendOffset.PosY
                                                        .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                        .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                        .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                        .Line3D.Velocity = mRunUp.Velocity
                                                        '20171016
                                                        .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                    End With
                                                End If

                                        End Select
                                    Else
                                        With mRegisterPath.Dot3D
                                            mdx = .PosX - mLastPatternPath.Line3D.StartPosX
                                            mdy = .PosY - mLastPatternPath.Line3D.StartPosY
                                            mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                                            If mr = 0 Then
                                                mExtendOffset.PosX = 0
                                                mExtendOffset.PosY = 0
                                            Else
                                                mExtendOffset.PosX = mRunUp.Distance * mdx / mr
                                                mExtendOffset.PosY = mRunUp.Distance * mdy / mr
                                            End If
                                        End With

                                        '[Note]:直接接起來
                                        '[Note]:先修改前一條路徑，把延伸出來的縮回去-->再把新的路徑加進來
                                        mPath = mMotionDispPathRegister.Item(mMotionDispPathRegister.Count - 1)
                                        mMemoryPatternPath = mMotionDispPathRegister.Item(mMotionDispPathRegister.Count - 1)
                                        '[Note]:只改終點
                                        With mPath.Line3D
                                            .EndPosX = mMemoryPatternPath.Line3D.EndPosX - mMemoryPatternPath.Dot3D.ExtendOffsetX
                                            .EndPosY = mMemoryPatternPath.Line3D.EndPosY - mMemoryPatternPath.Dot3D.ExtendOffsetY
                                        End With
                                        '[Note]:先去掉舊的，再把新的加上去
                                        mMotionDispPathRegister.RemoveAt(mMotionDispPathRegister.Count - 1)
                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                        mMotionDispPathRegister.Add(mPath)

                                        '[Note]:再把當下一個Path加上去
                                        If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                            With mPath
                                                .PathType = ePathType.Line3D
                                                .Dot3D.PosX = mRegisterPath.Dot3D.PosX
                                                .Dot3D.PosY = mRegisterPath.Dot3D.PosY
                                                .Dot3D.PosZ = mRegisterPath.Dot3D.PosZ
                                                .Dot3D.Velocity = mRunUp.Velocity
                                                .Dot3D.ExtendOffsetX = 0
                                                .Dot3D.ExtendOffsetY = 0
                                                .Dot3D.IsDispense = mRegisterPath.Dot3D.IsDispense
                                                .Dot3D.ParameterType = ePathParameterType.Dot
                                                .Dot3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                .IsFristPathInDie = False
                                                '20171016
                                                .Dot3D.StartVel = mRegisterPath.Dot3D.StartVel
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)
                                        Else
                                            With mPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mRegisterPath.Dot3D.PosX
                                                .Line3D.StartPosY = mRegisterPath.Dot3D.PosY
                                                .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.EndPosX = mRegisterPath.Dot3D.PosX + mExtendOffset.PosX
                                                .Line3D.EndPosY = mRegisterPath.Dot3D.PosY + mExtendOffset.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.Velocity = mRunUp.Velocity
                                                .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                .Line3D.IsDispense = mRegisterPath.Dot3D.IsDispense
                                                .Line3D.ParameterType = ePathParameterType.Dot
                                                .Line3D.ParameterName = mRegisterPath.Dot3D.ParameterName
                                                .IsFristPathInDie = False
                                                '20171016
                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                            End With
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)

                                            mLastPos.PosX = mPath.Line3D.EndPosX
                                            mLastPos.PosY = mPath.Line3D.EndPosY

                                            '[Note]:紀錄最近一筆的路徑資料
                                            With mLastPatternPath
                                                .PathType = ePathType.Line3D
                                                .Line3D.StartPosX = mRegisterPath.Dot3D.PosX
                                                .Line3D.StartPosY = mRegisterPath.Dot3D.PosY
                                                .Line3D.StartPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.EndPosX = mRegisterPath.Dot3D.PosX + mExtendOffset.PosX
                                                .Line3D.EndPosY = mRegisterPath.Dot3D.PosY + mExtendOffset.PosY
                                                .Line3D.EndPosZ = mRegisterPath.Dot3D.PosZ
                                                .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                .Line3D.Velocity = mRunUp.Velocity
                                                '20171016
                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                            End With
                                        End If
                                    End If

                                Case eTwoPathModel.LineLine
                                    '[Note]:算出需助跑的資料
                                    If DetermineRunUpTimeDistance(dispParam.Acc, mCycleTimes, mDotWeight, dispPathRegister.Item(mI), mRunUp, mDotPitch) = True Then
                                        If mRunUp.Distance > mMaxExtendDistance Then
                                            mMaxExtendDistance = mRunUp.Distance
                                        End If
                                        If mRunUp.Time > mMaxBlendTime Then
                                            mMaxBlendTime = mRunUp.Time
                                        End If
                                        '***************************************************
                                        If mRegisterPath.Line3D.IsDispense = True And updateTriggerDispPathRegister = True Then
                                            '[Note]:塞給Trigger board Data(只有第一組Trigger Cmd 需要助跑資訊，所以要把這資料保留給Cmd)
                                            mTriggerPath = mRegisterPath
                                            If mIs1stTriggerCommand = True Then
                                                mIs1stTriggerCommand = False
                                            End If
                                            mTriggerPath.Line3D.Velocity = mRunUp.Velocity
                                            mTriggerPath.Line3D.WeightControl.dotPitch = mDotPitch
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mTriggerDispPathRegister.Capacity = mTriggerDispPathRegister.Count + 1
                                            mTriggerDispPathRegister.Add(mTriggerPath)
                                        End If
                                        '***************************************************

                                        With mRegisterPath.Line3D
                                            mdx = .EndPosX - .StartPosX
                                            mdy = .EndPosY - .StartPosY
                                            mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                                            If mr = 0 Then
                                                mExtendOffset.PosX = 0
                                                mExtendOffset.PosY = 0
                                            Else
                                                mExtendOffset.PosX = mRunUp.Distance * mdx / mr
                                                mExtendOffset.PosY = mRunUp.Distance * mdy / mr
                                                mArcOffset.PosX = dispParam.Recipe.LeadAngle.Distance * mdx / mr
                                                mArcOffset.PosY = dispParam.Recipe.LeadAngle.Distance * mdy / mr
                                            End If
                                        End With

                                        '[Note]:先判斷是否為直接串接之路徑
                                        If IsUseExtendPath(mLastPatternPath, mRegisterPath) Then
                                            Select Case EstimatePathNoArcRelationship(dispParam.Acc, mLastPatternPath, mRegisterPath)
                                                Case TwoPathRelationship.None, TwoPathRelationship.ParallelAndDirectionIsSame
                                                    '[Note]:需要增加圓弧導角
                                                    With mRegisterPath.Line3D
                                                        mdx = .EndPosX - .StartPosX
                                                        mdy = .EndPosY - .StartPosY
                                                        mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                                                        If mr = 0 Then
                                                            mExtendOffset.PosX = 0
                                                            mExtendOffset.PosY = 0
                                                        Else
                                                            mExtendOffset.PosX = mRunUp.Distance * mdx / mr
                                                            mExtendOffset.PosY = mRunUp.Distance * mdy / mr
                                                            mArcOffset.PosX = dispParam.Recipe.LeadAngle.Distance * mdx / mr
                                                            mArcOffset.PosY = dispParam.Recipe.LeadAngle.Distance * mdy / mr
                                                        End If
                                                    End With

                                                    With mPath
                                                        .PathType = ePathType.Line3D
                                                        .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                        .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                        .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                        .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                        .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                        .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                        .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                        .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                        .Line3D.Velocity = mRunUp.Velocity
                                                        .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                        .Line3D.ParameterType = ePathParameterType.Line
                                                        .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                        .IsFristPathInDie = False
                                                        '20171016
                                                        .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                    End With

                                                    If dispParam.Recipe.LeadAngle.Degress <> 0 Then
                                                        '*************************************************************************************
                                                        'Step1:找最佳圓弧導角的圓心
                                                        With mPath.Line3D
                                                            mPath.PathType = ePathType.Line3D
                                                            mCirclePos.PosX = .StartPosX
                                                            mCirclePos.PosY = .StartPosY
                                                            mCenterPos.PosX = .StartPosX - mArcOffset.PosX
                                                            mCenterPos.PosY = .StartPosY - mArcOffset.PosY
                                                            mAidPosNo1.PosX = mLastPos.PosX
                                                            mAidPosNo1.PosY = mLastPos.PosY
                                                            mAidPosNo2.PosX = .EndPosX
                                                            mAidPosNo2.PosY = .EndPosY
                                                            Call FindArcNoodle(dispParam.Recipe, mCirclePos, mCenterPos, mAidPosNo1, mAidPosNo2, mAddCenterPos, mNoodlePos, mArcDir)
                                                        End With

                                                        '[Note]:先加圓弧切點
                                                        With mPath
                                                            .PathType = ePathType.Dot3D
                                                            .Dot3D.PosX = mNoodlePos.PosX
                                                            .Dot3D.PosY = mNoodlePos.PosY
                                                            .Dot3D.PosZ = mRegisterPath.Line3D.StartPosZ
                                                            mDistance = CDec(Math.Sqrt((mNoodlePos.PosX - mLastPos.PosX) ^ 2 + (mNoodlePos.PosY - mLastPos.PosY) ^ 2))
                                                            'Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Dot3D.Velocity)
                                                            Premtek.CDispensingMath.GetCrossVelocity(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, gSSystemParameter.CrossVerticalTime, .Dot3D.Velocity) 'Soni + 2017.08.24
                                                            .Dot3D.IsDispense = False
                                                            .Dot3D.ParameterType = ePathParameterType.Line
                                                            .Dot3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                            .IsFristPathInDie = False
                                                        End With
                                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                        mMotionDispPathRegister.Add(mPath)

                                                        '[Note]:再加圓弧路徑
                                                        With mPath
                                                            .PathType = ePathType.Arc2D
                                                            .Arc2D.StartPosX = mNoodlePos.PosX
                                                            .Arc2D.StartPosY = mNoodlePos.PosY
                                                            .Arc2D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                            .Arc2D.CenterPosX = mAddCenterPos.PosX
                                                            .Arc2D.CenterPosY = mAddCenterPos.PosY
                                                            .Arc2D.CenterPosZ = mRegisterPath.Line3D.StartPosZ
                                                            .Arc2D.EndPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX - mArcOffset.PosX
                                                            .Arc2D.EndPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY - mArcOffset.PosY
                                                            .Arc2D.EndPosZ = mRegisterPath.Line3D.StartPosZ
                                                            .Arc2D.ArcDirection = mArcDir
                                                            mDistance = (dispParam.Recipe.LeadAngle.Degress * (Math.PI / 180)) * Math.Sqrt(((.Arc2D.CenterPosX - .Arc2D.StartPosX) ^ 2) + ((.Arc2D.CenterPosY - .Arc2D.StartPosY) ^ 2))
                                                            'Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Arc2D.Velocity)
                                                            Premtek.CDispensingMath.GetCrossVelocity(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, gSSystemParameter.CrossVerticalTime, .Arc2D.Velocity) 'Soni + 2017.08.24
                                                            .Arc2D.IsDispense = False
                                                            .Arc2D.ParameterType = ePathParameterType.Line
                                                            .Arc2D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                            .IsFristPathInDie = False
                                                        End With
                                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                        mMotionDispPathRegister.Add(mPath)

                                                        '[Note]:最後再加入原先的路徑
                                                        If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                            With mPath
                                                                .PathType = ePathType.Line3D
                                                                .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX - mArcOffset.PosX
                                                                .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY - mArcOffset.PosY
                                                                .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                                .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX
                                                                .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY
                                                                .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                                .Line3D.Velocity = mRunUp.Velocity
                                                                .Line3D.ExtendOffsetX = 0
                                                                .Line3D.ExtendOffsetY = 0
                                                                .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                                .Line3D.ParameterType = ePathParameterType.Line
                                                                .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                                .IsFristPathInDie = False
                                                                '20171016
                                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                            End With
                                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                            mMotionDispPathRegister.Add(mPath)
                                                        Else
                                                            With mPath
                                                                .PathType = ePathType.Line3D
                                                                .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX - mArcOffset.PosX
                                                                .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY - mArcOffset.PosY
                                                                .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                                .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                                .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                                .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                                .Line3D.Velocity = mRunUp.Velocity
                                                                .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                                .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                                .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                                .Line3D.ParameterType = ePathParameterType.Line
                                                                .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                                .IsFristPathInDie = False
                                                                '20171016
                                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                            End With
                                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                            mMotionDispPathRegister.Add(mPath)

                                                            mLastPos.PosX = mPath.Line3D.EndPosX
                                                            mLastPos.PosY = mPath.Line3D.EndPosY

                                                            '[Note]:紀錄最近一筆的路徑資料
                                                            With mLastPatternPath
                                                                .PathType = ePathType.Line3D
                                                                .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX - mArcOffset.PosX
                                                                .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY - mArcOffset.PosY
                                                                .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                                .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                                .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                                .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                                .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                                .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                                .Line3D.Velocity = mRunUp.Velocity
                                                                '20171016
                                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                            End With
                                                        End If
                                                        '*************************************************************************************
                                                    Else
                                                        '[Note]:直接加，不額外增加路徑

                                                        '[Note]:直接將二個延伸出來的端點接起來
                                                        With mPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mLastPos.PosX
                                                            .Line3D.StartPosY = mLastPos.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                            .Line3D.EndPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                            .Line3D.EndPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                            .Line3D.EndPosZ = mRegisterPath.Line3D.StartPosZ
                                                            mDistance = CDec(Math.Sqrt((.Line3D.StartPosX - .Line3D.EndPosX) ^ 2 + (.Line3D.StartPosY - .Line3D.EndPosY) ^ 2))
                                                            Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Line3D.Velocity)
                                                            .Line3D.IsDispense = False
                                                            .Line3D.ParameterType = ePathParameterType.Line
                                                            .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                            .IsFristPathInDie = False
                                                        End With
                                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                        mMotionDispPathRegister.Add(mPath)

                                                        If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                            With mPath
                                                                .PathType = ePathType.Line3D
                                                                .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                                .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                                .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                                .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX
                                                                .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY
                                                                .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                                .Line3D.ExtendOffsetX = 0
                                                                .Line3D.ExtendOffsetY = 0
                                                                .Line3D.Velocity = mRunUp.Velocity
                                                                .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                                .Line3D.ParameterType = ePathParameterType.Line
                                                                .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                                .IsFristPathInDie = False
                                                                '20171016
                                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                            End With
                                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                            mMotionDispPathRegister.Add(mPath)
                                                        Else
                                                            With mPath
                                                                .PathType = ePathType.Line3D
                                                                .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                                .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                                .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                                .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                                .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                                .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                                .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                                .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                                .Line3D.Velocity = mRunUp.Velocity
                                                                .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                                .Line3D.ParameterType = ePathParameterType.Line
                                                                .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                                .IsFristPathInDie = False
                                                                '20171016
                                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                            End With
                                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                            mMotionDispPathRegister.Add(mPath)
                                                            mLastPos.PosX = mPath.Line3D.EndPosX
                                                            mLastPos.PosY = mPath.Line3D.EndPosY

                                                            '[Note]:紀錄最近一筆的路徑資料
                                                            With mLastPatternPath
                                                                .PathType = ePathType.Line3D
                                                                .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                                .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                                .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                                .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                                .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                                .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                                .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                                .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                                .Line3D.Velocity = mRunUp.Velocity
                                                                '20171016
                                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                            End With
                                                        End If
                                                    End If

                                                Case TwoPathRelationship.LineAndDirectionIsTheSame
                                                    '*****************************************************************************************
                                                    If Math.Abs(mLastPatternPath.Line3D.Velocity - mRunUp.Velocity) < 1 Then
                                                        '[Note]:若速度相近，則直接把線段作連接，不再作猜解的動作

                                                        '[Note]:若是同一條線，則直接修改端點座標
                                                        '[Note]:把前一Path的延伸去掉-->再加上本體這一條
                                                        mPath = mMotionDispPathRegister.Item(mMotionDispPathRegister.Count - 1)
                                                        mMemoryPatternPath = mMotionDispPathRegister.Item(mMotionDispPathRegister.Count - 1)

                                                        '[Note]:再把當下一個Path加上去(起點不延伸，端點延伸)
                                                        If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                            '[Note]:只改終點
                                                            With mPath.Line3D
                                                                .EndPosX = mRegisterPath.Line3D.EndPosX
                                                                .EndPosY = mRegisterPath.Line3D.EndPosY
                                                                .EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                                .ExtendOffsetX = 0
                                                                .ExtendOffsetY = 0
                                                                .ParameterType = ePathParameterType.Line
                                                                .ParameterName = mRegisterPath.Line3D.ParameterName
                                                            End With

                                                            '[Note]:先去掉舊的，再把新的加上去
                                                            mMotionDispPathRegister.RemoveAt(mMotionDispPathRegister.Count - 1)
                                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                            mMotionDispPathRegister.Add(mPath)
                                                        Else
                                                            '[Note]:只改終點
                                                            With mPath.Line3D
                                                                .EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                                .EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                                .EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                                .ExtendOffsetX = mExtendOffset.PosX
                                                                .ExtendOffsetY = mExtendOffset.PosY
                                                                .ParameterType = ePathParameterType.Line
                                                                .ParameterName = mRegisterPath.Line3D.ParameterName
                                                            End With
                                                            '[Note]:先去掉舊的，再把新的加上去
                                                            mMotionDispPathRegister.RemoveAt(mMotionDispPathRegister.Count - 1)
                                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                            mMotionDispPathRegister.Add(mPath)

                                                            mLastPos.PosX = mPath.Line3D.EndPosX
                                                            mLastPos.PosY = mPath.Line3D.EndPosY

                                                            '[Note]:紀錄最近一筆的路徑資料
                                                            With mLastPatternPath
                                                                .PathType = ePathType.Line3D
                                                                .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                                .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                                .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                                .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                                .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                                .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                                .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                                .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                                .Line3D.Velocity = mRunUp.Velocity
                                                                '20171016
                                                                .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                            End With
                                                        End If
                                                    Else
                                                        '[Note]:先判斷二條線端點的距離(不含助跑)
                                                        '距離若大於(減速段+助跑段)，則安心的直接加上去
                                                        '    若小於(減速段+助跑段)，則縮短二條線的助跑段(前一條的剎車段與這一條的加速段距離相同)
                                                        '    若為0，去掉上一條的減速段後，再加上當下的這一條並於結束段延伸出去(速度就不理他了)
                                                        With mRegisterPath.Line3D
                                                            mdx = .EndPosX - .StartPosX
                                                            mdy = .EndPosY - .StartPosY
                                                            mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                                                            If mr = 0 Then
                                                                mExtendOffset.PosX = 0
                                                                mExtendOffset.PosY = 0
                                                            Else
                                                                mExtendOffset.PosX = mRunUp.Distance * mdx / mr
                                                                mExtendOffset.PosY = mRunUp.Distance * mdy / mr
                                                            End If
                                                        End With

                                                        '[Note]:二線段的距離
                                                        mDisDx = mRegisterPath.Line3D.StartPosX - (mLastPatternPath.Line3D.EndPosX - mLastPatternPath.Line3D.ExtendOffsetX)
                                                        mDisDy = mRegisterPath.Line3D.StartPosY - (mLastPatternPath.Line3D.EndPosY - mLastPatternPath.Line3D.ExtendOffsetY)
                                                        mDistance = Math.Sqrt((mDisDx * mDisDx) + (mDisDy * mDisDy))

                                                        If mDistance = 0 Then
                                                            '[Note]:若是同一條線，則直接修改端點座標
                                                            '[Note]:把前一Path的延伸去掉-->再加上本體這一條
                                                            mPath = mMotionDispPathRegister.Item(mMotionDispPathRegister.Count - 1)
                                                            mMemoryPatternPath = mMotionDispPathRegister.Item(mMotionDispPathRegister.Count - 1)

                                                            '[Note]:只改終點
                                                            With mPath.Line3D
                                                                .EndPosX = mMemoryPatternPath.Line3D.EndPosX - mMemoryPatternPath.Line3D.ExtendOffsetX
                                                                .EndPosY = mMemoryPatternPath.Line3D.EndPosY - mMemoryPatternPath.Line3D.ExtendOffsetY
                                                            End With
                                                            '[Note]:先去掉舊的，再把新的加上去
                                                            mMotionDispPathRegister.RemoveAt(mMotionDispPathRegister.Count - 1)
                                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                            mMotionDispPathRegister.Add(mPath)

                                                            '[Note]:再把當下一個Path加上去(起點不延伸，端點延伸)
                                                            If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                                With mPath
                                                                    .PathType = ePathType.Line3D
                                                                    .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX
                                                                    .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY
                                                                    .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                                    .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX
                                                                    .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY
                                                                    .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                                    .Line3D.Velocity = mRunUp.Velocity
                                                                    .Line3D.ExtendOffsetX = 0
                                                                    .Line3D.ExtendOffsetY = 0
                                                                    .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                                    .Line3D.ParameterType = ePathParameterType.Line
                                                                    .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                                    .IsFristPathInDie = False
                                                                    '20171016
                                                                    .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                                End With
                                                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                                mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                                mMotionDispPathRegister.Add(mPath)
                                                            Else
                                                                With mPath
                                                                    .PathType = ePathType.Line3D
                                                                    .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX
                                                                    .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY
                                                                    .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                                    .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                                    .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                                    .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                                    .Line3D.Velocity = mRunUp.Velocity
                                                                    .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                                    .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                                    .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                                    .Line3D.ParameterType = ePathParameterType.Line
                                                                    .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                                    .IsFristPathInDie = False
                                                                    '20171016
                                                                    .Line3D.StartVel = mRegisterPath.Line3D.StartVel

                                                                End With
                                                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                                mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                                mMotionDispPathRegister.Add(mPath)
                                                                mLastPos.PosX = mPath.Line3D.EndPosX
                                                                mLastPos.PosY = mPath.Line3D.EndPosY

                                                                '[Note]:紀錄最近一筆的路徑資料
                                                                With mLastPatternPath
                                                                    .PathType = ePathType.Line3D
                                                                    .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                                    .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                                    .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                                    .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                                    .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                                    .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                                    .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                                    .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                                    .Line3D.Velocity = mRunUp.Velocity
                                                                    '20171016
                                                                    .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                                End With
                                                            End If
                                                        Else
                                                            With mLastPatternPath.Line3D
                                                                mRunDownDisance = Math.Sqrt((.ExtendOffsetX * .ExtendOffsetX) + (.ExtendOffsetY * .ExtendOffsetY))
                                                            End With
                                                            mRunUpDisance = mRunUp.Distance

                                                            If mDistance >= (mRunDownDisance + mRunUpDisance) Then
                                                                '[Note]:'距離若大於(減速段+助跑段)，則安心的直接加上去

                                                                '[Note]:直接將二個延伸出來的端點接起來
                                                                With mPath
                                                                    .PathType = ePathType.Line3D
                                                                    .Line3D.StartPosX = mLastPos.PosX
                                                                    .Line3D.StartPosY = mLastPos.PosY
                                                                    .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                                    .Line3D.EndPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                                    .Line3D.EndPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                                    .Line3D.EndPosZ = mRegisterPath.Line3D.StartPosZ
                                                                    mDistance = CDec(Math.Sqrt((.Line3D.StartPosX - .Line3D.EndPosX) ^ 2 + (.Line3D.StartPosY - .Line3D.EndPosY) ^ 2))
                                                                    Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Line3D.Velocity)
                                                                    .Line3D.IsDispense = False
                                                                    .Line3D.ParameterType = ePathParameterType.Line
                                                                    .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                                    .IsFristPathInDie = False
                                                                End With
                                                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                                mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                                mMotionDispPathRegister.Add(mPath)

                                                                If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                                    With mPath
                                                                        .PathType = ePathType.Line3D
                                                                        .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                                        .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                                        .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                                        .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX
                                                                        .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY
                                                                        .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                                        .Line3D.Velocity = mRunUp.Velocity
                                                                        .Line3D.ExtendOffsetX = 0
                                                                        .Line3D.ExtendOffsetY = 0
                                                                        .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                                        .Line3D.ParameterType = ePathParameterType.Line
                                                                        .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                                        .IsFristPathInDie = False
                                                                        '20171016
                                                                        .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                                    End With
                                                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                                    mMotionDispPathRegister.Add(mPath)
                                                                Else
                                                                    With mPath
                                                                        .PathType = ePathType.Line3D
                                                                        .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                                        .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                                        .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                                        .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                                        .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                                        .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                                        .Line3D.Velocity = mRunUp.Velocity
                                                                        .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                                        .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                                        .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                                        .Line3D.ParameterType = ePathParameterType.Line
                                                                        .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                                        .IsFristPathInDie = False
                                                                        '20171016
                                                                        .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                                    End With
                                                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                                    mMotionDispPathRegister.Add(mPath)
                                                                    mLastPos.PosX = mPath.Line3D.EndPosX
                                                                    mLastPos.PosY = mPath.Line3D.EndPosY

                                                                    '[Note]:紀錄最近一筆的路徑資料
                                                                    With mLastPatternPath
                                                                        .PathType = ePathType.Line3D
                                                                        .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                                        .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                                        .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                                        .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                                        .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                                        .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                                        .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                                        .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                                        .Line3D.Velocity = mRunUp.Velocity
                                                                        '20171016
                                                                        .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                                    End With
                                                                End If
                                                            Else
                                                                '[Note]:距離若小於(減速段+助跑段)，則縮短二條線的助跑段(前一條的剎車段與這一條的加速段距離相同)
                                                                mDisExtend.PosX = mDisDx / 2
                                                                mDisExtend.PosY = mDisDy / 2

                                                                '[Note]:把前一Path的延伸縮短-->再加上本體這一條(延伸一樣縮短)
                                                                mPath = mMotionDispPathRegister.Item(mMotionDispPathRegister.Count - 1)
                                                                mMemoryPatternPath = mMotionDispPathRegister.Item(mMotionDispPathRegister.Count - 1)

                                                                '[Note]:只改終點
                                                                With mPath.Line3D
                                                                    .EndPosX = mMemoryPatternPath.Line3D.EndPosX - mMemoryPatternPath.Line3D.ExtendOffsetX + mDisExtend.PosX
                                                                    .EndPosY = mMemoryPatternPath.Line3D.EndPosY - mMemoryPatternPath.Line3D.ExtendOffsetY + mDisExtend.PosY
                                                                End With
                                                                '[Note]:先去掉舊的，再把新的加上去
                                                                mMotionDispPathRegister.RemoveAt(mMotionDispPathRegister.Count - 1)
                                                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                                mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                                mMotionDispPathRegister.Add(mPath)

                                                                '[Note]:直接將二個延伸出來的端點接起來
                                                                With mPath
                                                                    .PathType = ePathType.Line3D
                                                                    .Line3D.StartPosX = mPath.Line3D.EndPosX
                                                                    .Line3D.StartPosY = mPath.Line3D.EndPosY
                                                                    .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                                    .Line3D.EndPosX = mRegisterPath.Line3D.StartPosX - mDisExtend.PosX
                                                                    .Line3D.EndPosY = mRegisterPath.Line3D.StartPosY - mDisExtend.PosY
                                                                    .Line3D.EndPosZ = mRegisterPath.Line3D.StartPosZ
                                                                    mDistance = CDec(Math.Sqrt((.Line3D.StartPosX - .Line3D.EndPosX) ^ 2 + (.Line3D.StartPosY - .Line3D.EndPosY) ^ 2))
                                                                    Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Line3D.Velocity)
                                                                    .Line3D.IsDispense = False
                                                                    .Line3D.ParameterType = ePathParameterType.Line
                                                                    .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                                    .IsFristPathInDie = False
                                                                End With
                                                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                                mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                                mMotionDispPathRegister.Add(mPath)

                                                                '[Note]:再把當下一個Path加上去(起點延伸縮短，端點延伸不變)
                                                                If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                                    With mPath
                                                                        .PathType = ePathType.Line3D
                                                                        .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mDisExtend.PosX
                                                                        .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mDisExtend.PosY
                                                                        .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                                        .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX
                                                                        .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY
                                                                        .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                                        .Line3D.Velocity = mRunUp.Velocity
                                                                        .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                                        .Line3D.ExtendOffsetX = 0
                                                                        .Line3D.ExtendOffsetY = 0
                                                                        .Line3D.ParameterType = ePathParameterType.Line
                                                                        .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                                        .IsFristPathInDie = False
                                                                        '20171016
                                                                        .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                                    End With
                                                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                                    mMotionDispPathRegister.Add(mPath)
                                                                Else
                                                                    With mPath
                                                                        .PathType = ePathType.Line3D
                                                                        .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mDisExtend.PosX
                                                                        .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mDisExtend.PosY
                                                                        .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                                        .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                                        .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                                        .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                                        .Line3D.Velocity = mRunUp.Velocity
                                                                        .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                                        .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                                        .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                                        .Line3D.ParameterType = ePathParameterType.Line
                                                                        .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                                        .IsFristPathInDie = False
                                                                        '20171016
                                                                        .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                                    End With
                                                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                                    mMotionDispPathRegister.Add(mPath)
                                                                    mLastPos.PosX = mPath.Line3D.EndPosX
                                                                    mLastPos.PosY = mPath.Line3D.EndPosY

                                                                    '[Note]:紀錄最近一筆的路徑資料
                                                                    With mLastPatternPath
                                                                        .PathType = ePathType.Line3D
                                                                        .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mDisExtend.PosX
                                                                        .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mDisExtend.PosY
                                                                        .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                                        .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                                        .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                                        .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                                        .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                                        .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                                        .Line3D.Velocity = mRunUp.Velocity
                                                                        '20171016
                                                                        .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                                    End With
                                                                End If
                                                            End If
                                                        End If
                                                    End If

                                                    '*****************************************************************************************

                                                Case TwoPathRelationship.ParallelAndDirectionIsNonSame
                                                    '*****************************************************************************************
                                                    '[Note]:找最佳路徑(加原先的路徑)
                                                    With mRegisterPath.Line3D
                                                        mdx = .EndPosX - .StartPosX
                                                        mdy = .EndPosY - .StartPosY
                                                        mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                                                        If mr = 0 Then
                                                            mExtendOffset.PosX = 0
                                                            mExtendOffset.PosY = 0
                                                        Else
                                                            mExtendOffset.PosX = mRunUp.Distance * mdx / mr
                                                            mExtendOffset.PosY = mRunUp.Distance * mdy / mr
                                                        End If
                                                    End With

                                                    If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                        With mPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                            .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                            .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX
                                                            .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY
                                                            .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                            .Line3D.Velocity = mRunUp.Velocity
                                                            .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                            .Line3D.ExtendOffsetX = 0
                                                            .Line3D.ExtendOffsetY = 0
                                                            .Line3D.ParameterType = ePathParameterType.Line
                                                            .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                            .IsFristPathInDie = False
                                                            '20171016
                                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                        End With
                                                    Else
                                                        With mPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                            .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                            .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                            .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                            .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                            .Line3D.Velocity = mRunUp.Velocity
                                                            .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                            .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                            .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                            .Line3D.ParameterType = ePathParameterType.Line
                                                            .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                            .IsFristPathInDie = False
                                                            '20171016
                                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                        End With
                                                    End If
                                                    dispParam.VelHigh = IIf(gSSystemParameter.MaxCrossStepVelocity > 0, gSSystemParameter.MaxCrossStepVelocity, dispParam.VelHigh) 'Soni + 2017.08.14 跨線段速度上限
                                                    Call DetermineExtendWhichLine(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mLastPatternPath, mPath, mMotionDispPathRegister)
                                                    mLastPos.PosX = mPath.Line3D.EndPosX
                                                    mLastPos.PosY = mPath.Line3D.EndPosY

                                                    '[Note]:紀錄最近一筆的路徑資料
                                                    With mLastPatternPath
                                                        .PathType = ePathType.Line3D
                                                        .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                        .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                        .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                        .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                        .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                        .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                        .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                        .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                        .Line3D.Velocity = mRunUp.Velocity
                                                        '20171016
                                                        .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                    End With
                                                    '*****************************************************************************************

                                                Case TwoPathRelationship.LineIsTheSameButDirectionIsNot
                                                    '[Note]:直接加入即可，風險為可能誤觸Trigger訊號
                                                    With mRegisterPath.Line3D
                                                        mdx = .EndPosX - .StartPosX
                                                        mdy = .EndPosY - .StartPosY
                                                        mr = CDec(Sqrt(mdx * mdx + mdy * mdy))
                                                        If mr = 0 Then
                                                            mExtendOffset.PosX = 0
                                                            mExtendOffset.PosY = 0
                                                        Else
                                                            mExtendOffset.PosX = mRunUp.Distance * mdx / mr
                                                            mExtendOffset.PosY = mRunUp.Distance * mdy / mr
                                                        End If
                                                    End With

                                                    '[Note]:直接將二個延伸出來的端點接起來
                                                    With mPath
                                                        .PathType = ePathType.Line3D
                                                        .Line3D.StartPosX = mLastPos.PosX
                                                        .Line3D.StartPosY = mLastPos.PosY
                                                        .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                        .Line3D.EndPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                        .Line3D.EndPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                        .Line3D.EndPosZ = mRegisterPath.Line3D.StartPosZ
                                                        mDistance = CDec(Math.Sqrt((.Line3D.StartPosX - .Line3D.EndPosX) ^ 2 + (.Line3D.StartPosY - .Line3D.EndPosY) ^ 2))
                                                        Call EstimateMaxVel(dispParam.VelHigh, dispParam.Acc, dispParam.Dec, mDistance, mRunUp.Velocity, .Line3D.Velocity)
                                                        .Line3D.IsDispense = False
                                                        .Line3D.ParameterType = ePathParameterType.Line
                                                        .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                        .IsFristPathInDie = False
                                                    End With
                                                    '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                    mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                    mMotionDispPathRegister.Add(mPath)

                                                    If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                        With mPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                            .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                            .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX
                                                            .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY
                                                            .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                            .Line3D.Velocity = mRunUp.Velocity
                                                            .Line3D.ExtendOffsetX = 0
                                                            .Line3D.ExtendOffsetY = 0
                                                            .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                            .Line3D.ParameterType = ePathParameterType.Line
                                                            .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                            .IsFristPathInDie = False
                                                            '20171016
                                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                        End With
                                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                        mMotionDispPathRegister.Add(mPath)
                                                    Else
                                                        With mPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                            .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                            .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                            .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                            .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                            .Line3D.Velocity = mRunUp.Velocity
                                                            .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                            .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                            .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                            .Line3D.ParameterType = ePathParameterType.Line
                                                            .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                            .IsFristPathInDie = False
                                                            '20171016
                                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                        End With
                                                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                        mMotionDispPathRegister.Add(mPath)

                                                        mLastPos.PosX = mPath.Line3D.EndPosX
                                                        mLastPos.PosY = mPath.Line3D.EndPosY

                                                        '[Note]:紀錄最近一筆的路徑資料
                                                        With mLastPatternPath
                                                            .PathType = ePathType.Line3D
                                                            .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX - mExtendOffset.PosX
                                                            .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY - mExtendOffset.PosY
                                                            .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                            .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                            .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                            .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                            .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                            .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                            .Line3D.Velocity = mRunUp.Velocity
                                                            '20171016
                                                            .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                        End With
                                                    End If

                                            End Select
                                        Else
                                            '[Note]:直接接起來
                                            '[Note]:先修改前一條路徑，把延伸出來的縮回去-->再把新的路徑加進來
                                            mPath = mMotionDispPathRegister.Item(mMotionDispPathRegister.Count - 1)
                                            mMemoryPatternPath = mMotionDispPathRegister.Item(mMotionDispPathRegister.Count - 1)
                                            '[Note]:只改終點
                                            With mPath.Line3D
                                                .EndPosX = mMemoryPatternPath.Line3D.EndPosX - mMemoryPatternPath.Line3D.ExtendOffsetX
                                                .EndPosY = mMemoryPatternPath.Line3D.EndPosY - mMemoryPatternPath.Line3D.ExtendOffsetY
                                            End With
                                            '[Note]:先去掉舊的，再把新的加上去
                                            mMotionDispPathRegister.RemoveAt(mMotionDispPathRegister.Count - 1)
                                            '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                            mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                            mMotionDispPathRegister.Add(mPath)

                                            '[Note]:再把當下一個Path加上去
                                            If IsLastNonExtendPath(mI, dispPathRegister.Count, mRegisterPath) = True Then
                                                With mPath
                                                    .PathType = ePathType.Line3D
                                                    .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX
                                                    .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY
                                                    .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                    .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX
                                                    .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY
                                                    .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                    .Line3D.ExtendOffsetX = 0
                                                    .Line3D.ExtendOffsetY = 0
                                                    .Line3D.Velocity = mRunUp.Velocity
                                                    .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                    .Line3D.ParameterType = ePathParameterType.Line
                                                    .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                    .IsFristPathInDie = False
                                                    '20171016
                                                    .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                End With
                                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                mMotionDispPathRegister.Add(mPath)
                                            Else
                                                With mPath
                                                    .PathType = ePathType.Line3D
                                                    .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX
                                                    .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY
                                                    .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                    .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                    .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                    .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                    .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                    .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                    .Line3D.Velocity = mRunUp.Velocity
                                                    .Line3D.IsDispense = mRegisterPath.Line3D.IsDispense
                                                    .Line3D.ParameterType = ePathParameterType.Line
                                                    .Line3D.ParameterName = mRegisterPath.Line3D.ParameterName
                                                    .IsFristPathInDie = False
                                                    '20171016
                                                    .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                End With
                                                '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                                                mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                                                mMotionDispPathRegister.Add(mPath)

                                                mLastPos.PosX = mPath.Line3D.EndPosX
                                                mLastPos.PosY = mPath.Line3D.EndPosY

                                                '[Note]:紀錄最近一筆的路徑資料
                                                With mLastPatternPath
                                                    .PathType = ePathType.Line3D
                                                    .Line3D.StartPosX = mRegisterPath.Line3D.StartPosX
                                                    .Line3D.StartPosY = mRegisterPath.Line3D.StartPosY
                                                    .Line3D.StartPosZ = mRegisterPath.Line3D.StartPosZ
                                                    .Line3D.EndPosX = mRegisterPath.Line3D.EndPosX + mExtendOffset.PosX
                                                    .Line3D.EndPosY = mRegisterPath.Line3D.EndPosY + mExtendOffset.PosY
                                                    .Line3D.EndPosZ = mRegisterPath.Line3D.EndPosZ
                                                    .Line3D.ExtendOffsetX = mExtendOffset.PosX
                                                    .Line3D.ExtendOffsetY = mExtendOffset.PosY
                                                    .Line3D.Velocity = mRunUp.Velocity
                                                    '20171016
                                                    .Line3D.StartVel = mRegisterPath.Line3D.StartVel
                                                End With
                                            End If
                                        End If
                                    Else
                                        '[Note]:有問題(Bug)
                                        Return False
                                    End If
                            End Select
                        End If
                        mIs1stMotionPath = False

                    Case eMotionOrWaitPath.WaitPath
                        mPath.PathType = ePathType.Wait
                        mPath.IsFristPathInDie = False
                        mPath.Wait.DwellTimeInMs = mRegisterPath.Wait.DwellTimeInMs
                        '[Note]:使用List一定要宣告Capacity大小，不然有機會中梗-->一次加入大量的Item(每次Add前都要再提醒系統一次)
                        mMotionDispPathRegister.Capacity = mMotionDispPathRegister.Count + 1
                        mMotionDispPathRegister.Add(mPath)

                End Select
            Next
        End If

        '[Note]:mMaxBlendTime20 單位:s
        dotWeight = mDotWeight
        maxBlendTime = mMaxBlendTime
        maxExtendDistance = mMaxExtendDistance
        motionDispPathRegister = mMotionDispPathRegister
        triggerDispPathRegister = mTriggerDispPathRegister
        Return True

    End Function

    ''' <summary>[判斷是否為最後一筆路徑且為不延伸路徑]</summary>
    ''' <param name="index"></param>
    ''' <param name="lastPathCount"></param>
    ''' <param name="patternPath"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function IsLastNonExtendPath(ByVal index As Integer, ByVal lastPathCount As Integer, ByVal patternPath As sPatternPath) As Boolean
        If index = lastPathCount - 1 Then
            Select Case patternPath.PathType
                Case ePathType.Arc2D
                    If patternPath.Arc2D.IsExtendOn = False Then
                        Return True
                    End If

                Case ePathType.Arc3D
                    If patternPath.Arc3D.IsExtendOn = False Then
                        Return True
                    End If
                Case ePathType.Dot3D
                    If patternPath.Dot3D.IsExtendOn = False Then
                        Return True
                    End If
                Case ePathType.Line3D
                    If patternPath.Line3D.IsExtendOn = False Then
                        Return True
                    End If
            End Select
            Return False
        Else
            Return False
        End If
    End Function

    ''' <summary>[判斷最近的二筆的Path是否為平行(只有Dot、Line的組合)]</summary>
    ''' <param name="LastPath"></param>
    ''' <param name="NewPath"></param>
    ''' <param name="NextPath"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function EstimatePathNoArcRelationship(ByVal acc As Decimal, ByVal LastPath As sPatternPath, ByVal NewPath As sPatternPath, Optional NextPath As sPatternPath = Nothing) As TwoPathRelationship


        Dim mUV As Decimal          '[U。V]
        Dim mdUV As Decimal         '[||U|| ||V||]
        Dim mWV As Decimal          '[W。V]
        Dim mdWV As Decimal         '[||W|| ||V||]
        Dim mYV As Decimal          '[Y。V]
        Dim mdYV As Decimal         '[||Y|| ||V||]


        Dim mU1 As Decimal          '[U=(u1,u2)]  LastPath
        Dim mU2 As Decimal
        Dim mV1 As Decimal          '[V=(v1,v2)]  NowPath  
        Dim mV2 As Decimal
        Dim mW1 As Decimal          '[W=(w1,w2)] LastPath.End-->NowPath.Start
        Dim mW2 As Decimal
        Dim mY1 As Decimal          '[Y=(y1,y2)] LastPath.End(ExtendOff)-->NowPath.Start
        Dim mY2 As Decimal

        Dim mdU As Decimal          '[||U||]
        Dim mdV As Decimal          '[||V||]
        Dim mdW As Decimal          '[||W||]
        Dim mdY As Decimal          '[||Y||]
        Dim mTolerance As Decimal   '[容許誤差]

        Dim mW1V2 As Decimal
        Dim mW2V1 As Decimal
        Dim mY1V2 As Decimal
        Dim mY2V1 As Decimal

        Dim dx As Decimal
        Dim dy As Decimal


        Dim mVelocityDiffDistance As Decimal
        Dim mDistance As Decimal


        Select Case LastPath.PathType
            Case ePathType.Line3D
                Select Case NewPath.PathType
                    Case ePathType.Line3D
                        With LastPath.Line3D
                            mU1 = .EndPosX - .StartPosX
                            mU2 = .EndPosY - .StartPosY
                        End With
                        mdU = CDec(Sqrt(mU1 * mU1 + mU2 * mU2))

                        With NewPath.Line3D
                            mV1 = .EndPosX - .StartPosX
                            mV2 = .EndPosY - .StartPosY
                        End With
                        mdV = CDec(Sqrt(mV1 * mV1 + mV2 * mV2))

                        mW1 = NewPath.Line3D.StartPosX - LastPath.Line3D.EndPosX
                        mW2 = NewPath.Line3D.StartPosY - LastPath.Line3D.EndPosY
                        mdW = CDec(Sqrt(mW1 * mW1 + mW2 * mW2))

                        mY1 = NewPath.Line3D.StartPosX - (LastPath.Line3D.EndPosX - LastPath.Line3D.ExtendOffsetX)
                        mY2 = NewPath.Line3D.StartPosY - (LastPath.Line3D.EndPosY - LastPath.Line3D.ExtendOffsetY)
                        mdY = CDec(Sqrt(mY1 * mY1 + mY2 * mY2))



                        mUV = (mU1 * mV1) + (mU2 * mV2)
                        mdUV = mdU * mdV

                        mWV = (mW1 * mV1) + (mW2 * mV2)
                        mdWV = mdW * mdV

                        mYV = (mY1 * mV1) + (mY2 * mV2)
                        mdYV = mdY * mdV



                        mW1V2 = mW1 * mV2
                        mW2V1 = mW2 * mV1

                        mY1V2 = mY1 * mV2
                        mY2V1 = mY2 * mV1

                        mVelocityDiffDistance = Math.Abs((LastPath.Line3D.Velocity * LastPath.Line3D.Velocity) - (NewPath.Line3D.Velocity * NewPath.Line3D.Velocity)) / (2 * acc)

                        dx = NewPath.Line3D.StartPosX - LastPath.Line3D.EndPosX
                        dy = NewPath.Line3D.StartPosY - LastPath.Line3D.EndPosY

                        mDistance = Math.Sqrt((dx * dx) + (dy * dy))

                        '[Note]:容許誤差就抓1%
                        mTolerance = gSSystemParameter.MotionTolerance
                        'mTolerance = mdUV * gSSystemParameter.MotionTolerance
                        If Math.Abs(mUV - mdUV) < mTolerance Then
                            '[Note]:mUV = mdUV
                            '[Note]:二條線為平行&同方向
                            If Math.Abs(mW1V2 - mW2V1) < mTolerance Then
                                '[Note]:mU1V2 = mU2V1
                                '[Note]:共線
                                If Math.Abs(mWV - mdWV) < mTolerance Then
                                    '[Note]:行進路徑為同方向
                                    Return TwoPathRelationship.LineAndDirectionIsTheSame
                                Else
                                    If Math.Abs(mWV + mdWV) < mTolerance Then
                                        '[Note]:行進路徑為反方向

                                        '[Note]:若行進路徑為同方且若變速的距離大於實際所需的距離(這是特例喔)
                                        If Math.Abs(mYV - mdYV) < mTolerance Then
                                            '[Note]:若變速的距離小於實際所需的距離
                                            If mVelocityDiffDistance <= mDistance Then
                                                Return TwoPathRelationship.LineAndDirectionIsTheSame
                                            End If
                                        End If

                                        Return TwoPathRelationship.LineIsTheSameButDirectionIsNot

                                    Else
                                        '[Note]:基本上不可能，預到再來看
                                        Return TwoPathRelationship.None
                                    End If
                                End If
                            Else
                                Return TwoPathRelationship.ParallelAndDirectionIsSame
                            End If
                        Else
                            If Math.Abs(mUV + mdUV) < mTolerance Then
                                '[Note]:mUV = -mdUV
                                '[Note]:二條線為平行&反方向
                                If Math.Abs(mW1V2 - mW2V1) < mTolerance Then
                                    '[Note]:mU1V2 = mU2V1
                                    Return TwoPathRelationship.LineIsTheSameButDirectionIsNot
                                Else
                                    Return TwoPathRelationship.ParallelAndDirectionIsNonSame
                                End If
                            Else
                                Return TwoPathRelationship.None
                            End If
                        End If

                    Case ePathType.Dot3D
                        '[Note]:線&點的比對(須判斷是否在同一條直線上[在增補前後二段距離之前])
                        With LastPath.Line3D
                            mU1 = .EndPosX - .StartPosX
                            mU2 = .EndPosY - .StartPosY
                        End With
                        mdU = CDec(Sqrt(mU1 * mU1 + mU2 * mU2))

                        '[去掉延伸出來的那一段]
                        mV1 = NewPath.Dot3D.PosX - (LastPath.Line3D.EndPosX - LastPath.Line3D.ExtendOffsetX)
                        mV2 = NewPath.Dot3D.PosY - (LastPath.Line3D.EndPosY - LastPath.Line3D.ExtendOffsetY)
                        mdV = CDec(Sqrt(mV1 * mV1 + mV2 * mV2))

                        mW1 = NewPath.Dot3D.PosX - LastPath.Line3D.EndPosX
                        mW2 = NewPath.Dot3D.PosY - LastPath.Line3D.EndPosY
                        mdW = CDec(Sqrt(mW1 * mW1 + mW2 * mW2))


                        mUV = (mU1 * mV1) + (mU2 * mV2)
                        mdUV = mdU * mdV

                        mWV = (mW1 * mV1) + (mW2 * mV2)
                        mdWV = mdW * mdV

                        mW1V2 = mW1 * mV2
                        mW2V1 = mW2 * mV1

                        '[Note]:容許誤差就抓1%
                        mTolerance = gSSystemParameter.MotionTolerance
                        'mTolerance = mdUV * gSSystemParameter.MotionTolerance
                        If Math.Abs(mUV - mdUV) < mTolerance Then
                            '[Note]:mUV = mdUV
                            '[Note]:二條線為平行&同方向
                            If Math.Abs(mW1V2 - mW2V1) < mTolerance Then
                                '[Note]:mU1V2 = mU2V1
                                '[Note]:共線
                                If Math.Abs(mWV - mdWV) < mTolerance Then
                                    '[Note]:行進路徑為同方向
                                    Return TwoPathRelationship.LineAndDirectionIsTheSame
                                Else
                                    If Math.Abs(mWV + mdWV) < mTolerance Then
                                        '[Note]:行進路徑為反方向
                                        Return TwoPathRelationship.LineIsTheSameButDirectionIsNot
                                    Else
                                        '[Note]:基本上不可能，預到再來看
                                        Return TwoPathRelationship.None
                                    End If
                                End If
                            End If
                        Else
                            If Math.Abs(mUV + mdUV) < mTolerance Then
                                '[Note]:mUV = -mdUV
                                '[Note]:二條線為平行&反方向
                                If Math.Abs(mW1V2 - mW2V1) < mTolerance Then
                                    '[Note]:mU1V2 = mU2V1
                                    '[Note]:共線
                                    Return TwoPathRelationship.LineIsTheSameButDirectionIsNot
                                End If
                            End If
                        End If

                        '[Note]:再做一次判斷，加入下一條路徑的資訊進來，此次主要是判斷是否為(ParallelAndDirectionIsNonSame)
                        If IsNothing(NextPath) = True Then
                            '[Note]:沒有下一條線可以協助判斷
                            Return TwoPathRelationship.None
                        Else
                            Select Case NextPath.PathType
                                Case ePathType.Dot3D
                                    mV1 = NextPath.Dot3D.PosX - NewPath.Dot3D.PosX
                                    mV2 = NextPath.Dot3D.PosY - NewPath.Dot3D.PosY

                                Case ePathType.Line3D
                                    mV1 = NextPath.Line3D.StartPosX - NewPath.Dot3D.PosX
                                    mV2 = NextPath.Line3D.StartPosY - NewPath.Dot3D.PosY

                                Case ePathType.Arc2D
                                    '[Note]:在路線規劃上需視為不同線段
                                    Return TwoPathRelationship.None

                                Case ePathType.Arc3D
                                    '[Note]:在路線規劃上需視為不同線段
                                    Return TwoPathRelationship.None

                            End Select
                        End If


                        With LastPath.Line3D
                            mU1 = .EndPosX - .StartPosX
                            mU2 = .EndPosY - .StartPosY
                        End With
                        mdU = CDec(Sqrt(mU1 * mU1 + mU2 * mU2))

                        mdV = CDec(Sqrt(mV1 * mV1 + mV2 * mV2))

                        mW1 = NewPath.Dot3D.PosX - LastPath.Line3D.EndPosX
                        mW2 = NewPath.Dot3D.PosY - LastPath.Line3D.EndPosY
                        mdW = CDec(Sqrt(mW1 * mW1 + mW2 * mW2))


                        mUV = (mU1 * mV1) + (mU2 * mV2)
                        mdUV = mdU * mdV

                        mWV = (mW1 * mV1) + (mW2 * mV2)
                        mdWV = mdW * mdV

                        mW1V2 = mW1 * mV2
                        mW2V1 = mW2 * mV1

                        '[Note]:容許誤差就抓1%
                        'mTolerance = mdUV * gSSystemParameter.MotionTolerance
                        mTolerance = gSSystemParameter.MotionTolerance
                        '[Note]:判斷是否為 ParallelAndDirectionIsNonSame
                        '[Note]:只要非ParallelAndDirectionIsNonSame，則在路線規劃上需視為不同線段

                        If Math.Abs(mUV - mdUV) < mTolerance Then
                            '[Note]:mUV = mdUV
                            '[Note]:二條線為平行&同方向
                            Return TwoPathRelationship.None
                        Else
                            If Math.Abs(mUV + mdUV) < mTolerance Then
                                '[Note]:mUV = -mdUV
                                '[Note]:二條線為平行&反方向
                                If Math.Abs(mW1V2 - mW2V1) < mTolerance Then
                                    '[Note]:mU1V2 = mU2V1
                                    '[Note]:共線，雖然共線但在路線規劃上需視為不同線段
                                    Return TwoPathRelationship.None
                                Else
                                    Return TwoPathRelationship.ParallelAndDirectionIsNonSame
                                End If
                            Else
                                Return TwoPathRelationship.None
                            End If
                        End If

                    Case Else
                        Return TwoPathRelationship.None

                End Select

            Case ePathType.Dot3D
                Select Case NewPath.PathType
                    Case ePathType.Line3D
                        '[Note]:點&線的比對(須判斷是否在同一條直線上[在增補前後二段距離之前])
                        '[Note]:去掉延伸出來的那一段
                        mU1 = NewPath.Line3D.StartPosX - (LastPath.Dot3D.PosX - LastPath.Dot3D.ExtendOffsetX)
                        mU2 = NewPath.Line3D.StartPosY - (LastPath.Dot3D.PosY - LastPath.Dot3D.ExtendOffsetY)
                        mdU = CDec(Sqrt(mU1 * mU1 + mU2 * mU2))

                        With NewPath.Line3D
                            mV1 = .EndPosX - .StartPosX
                            mV2 = .EndPosY - .StartPosY
                        End With
                        mdV = CDec(Sqrt(mV1 * mV1 + mV2 * mV2))

                        mW1 = NewPath.Line3D.StartPosX - (LastPath.Dot3D.PosX - LastPath.Dot3D.ExtendOffsetX)
                        mW2 = NewPath.Line3D.StartPosY - (LastPath.Dot3D.PosY - LastPath.Dot3D.ExtendOffsetY)
                        mdW = CDec(Sqrt(mW1 * mW1 + mW2 * mW2))

                        mUV = (mU1 * mV1) + (mU2 * mV2)
                        mdUV = mdU * mdV

                        mWV = (mW1 * mV1) + (mW2 * mV2)
                        mdWV = mdW * mdV

                        mW1V2 = mW1 * mV2
                        mW2V1 = mW2 * mV1

                        '[Note]:容許誤差就抓1%
                        'mTolerance = mdUV * gSSystemParameter.MotionTolerance
                        mTolerance = gSSystemParameter.MotionTolerance
                        If Math.Abs(mUV - mdUV) < mTolerance Then
                            '[Note]:mUV = mdUV
                            '[Note]:二條線為平行&同方向
                            If Math.Abs(mW1V2 - mW2V1) < mTolerance Then
                                '[Note]:mU1V2 = mU2V1
                                '[Note]:共線
                                If Math.Abs(mWV - mdWV) < mTolerance Then
                                    '[Note]:行進路徑為同方向
                                    Return TwoPathRelationship.LineAndDirectionIsTheSame
                                Else
                                    If Math.Abs(mWV + mdWV) < mTolerance Then
                                        '[Note]:行進路徑為反方向
                                        Return TwoPathRelationship.LineIsTheSameButDirectionIsNot
                                    Else
                                        '[Note]:基本上不可能，預到再來看
                                        Return TwoPathRelationship.None
                                    End If
                                End If
                            Else
                                '[Note]:只要是非(共線)則在路線規劃上需視為不同線段
                                Return TwoPathRelationship.None
                            End If
                        Else
                            If Math.Abs(mUV + mdUV) < mTolerance Then
                                '[Note]:mUV = -mdUV
                                '[Note]:二條線為平行&反方向
                                If Math.Abs(mW1V2 - mW2V1) < mTolerance Then
                                    '[Note]:mU1V2 = mU2V1
                                    '[Note]:共線
                                    Return TwoPathRelationship.LineIsTheSameButDirectionIsNot
                                Else
                                    '[Note]:只要是非(共線)則在路線規劃上需視為不同線段
                                    Return TwoPathRelationship.None
                                End If
                            Else
                                '[Note]:只要是非(平行&共線)則在路線規劃上需視為不同線段
                                Return TwoPathRelationship.None
                            End If
                        End If

                    Case Else
                        Return TwoPathRelationship.None

                End Select

            Case Else
                Return TwoPathRelationship.None

        End Select

    End Function



    ''' <summary>[SubStage配接]</summary>
    ''' <param name="machineNo"></param>
    ''' <param name="dispStageNo1"></param>
    ''' <param name="dispStageNo2"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function AdapterUsedStageNo(ByVal machineNo As enmMachineStation, ByRef dispStageNo1() As Integer, ByRef dispStageNo2() As Integer) As Boolean

        Static mbUseStageNo(enmStage.Max) As Boolean


        For index = enmStage.No1 To gSSystemParameter.StageCount - 1
            If gCRecipe.Node(index).Count > 0 Then
                mbUseStageNo(index) = True
            Else
                mbUseStageNo(index) = False
            End If
        Next

        Select Case machineNo
            Case enmMachineStation.MachineA
                '[Note]:先做配接-->根據機種，決定需要哪幾組Stage復歸
                Select Case mbUseStageNo(enmStage.No1)
                    Case True
                        Select Case mbUseStageNo(enmStage.No2)
                            Case True
                                dispStageNo1(machineNo) = eSys.SubDisp1
                                dispStageNo2(machineNo) = eSys.SubDisp2

                            Case False
                                dispStageNo1(machineNo) = eSys.SubDisp1
                                dispStageNo2(machineNo) = eSys.SubDisp1

                        End Select

                    Case False
                        Select Case mbUseStageNo(enmStage.No2)
                            Case True
                                dispStageNo1(machineNo) = eSys.SubDisp2
                                dispStageNo2(machineNo) = eSys.SubDisp2

                            Case False
                                '[Note]:不正常喔，不正常就配置第一組
                                dispStageNo1(machineNo) = eSys.SubDisp1
                                dispStageNo2(machineNo) = eSys.SubDisp1
                        End Select

                End Select

            Case enmMachineStation.MachineB
                Select Case mbUseStageNo(enmStage.No3)
                    Case True
                        Select Case mbUseStageNo(enmStage.No4)
                            Case True
                                dispStageNo1(machineNo) = eSys.SubDisp3
                                dispStageNo2(machineNo) = eSys.SubDisp4

                            Case False
                                dispStageNo1(machineNo) = eSys.SubDisp3
                                dispStageNo2(machineNo) = eSys.SubDisp3

                        End Select

                    Case False
                        Select Case mbUseStageNo(enmStage.No4)
                            Case True
                                dispStageNo1(machineNo) = eSys.SubDisp4
                                dispStageNo2(machineNo) = eSys.SubDisp4

                            Case False
                                '[Note]:不正常喔，不正常就配置第一組
                                dispStageNo1(machineNo) = eSys.SubDisp3
                                dispStageNo2(machineNo) = eSys.SubDisp3
                        End Select

                End Select

        End Select
        Return True
    End Function


    ''' <summary>[取得對應的nozzleNo、Valve Body 、 Syringe Body]</summary>
    ''' <param name="stageNo"></param>
    ''' <param name="valveNo"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function GetValveIndex(ByVal stageNo As enmStage, ByVal valveNo As eValveWorkMode, ByRef nozzleNo As enmTemp) As Boolean
        '[Note]:目前只處理Nozzle的部分，Valve Body  Syringe Body以後在加

        Select Case gSSystemParameter.StageUseValveCount
            Case eMechanismModule.OneValveOneStage
                Select Case stageNo
                    Case enmStage.No1
                        Select Case valveNo
                            Case eValveWorkMode.Valve1
                                nozzleNo = enmTemp.Nozzle1

                            Case Else
                                '[Note]:單閥的情況不可能進入此條件，有鬼要查
                                nozzleNo = enmTemp.Nozzle1

                        End Select

                    Case enmStage.No2
                        Select Case valveNo
                            Case eValveWorkMode.Valve1
                                nozzleNo = enmTemp.Nozzle2

                            Case Else
                                '[Note]:單閥的情況不可能進入此條件，有鬼要查
                                nozzleNo = enmTemp.Nozzle1

                        End Select

                    Case enmStage.No3
                        Select Case valveNo
                            Case eValveWorkMode.Valve1
                                nozzleNo = enmTemp.Nozzle3

                            Case Else
                                '[Note]:單閥的情況不可能進入此條件，有鬼要查
                                nozzleNo = enmTemp.Nozzle1

                        End Select

                    Case enmStage.No4
                        Select Case valveNo
                            Case eValveWorkMode.Valve1
                                nozzleNo = enmTemp.Nozzle4

                            Case Else
                                '[Note]:單閥的情況不可能進入此條件，有鬼要查
                                nozzleNo = enmTemp.Nozzle1

                        End Select

                End Select

            Case eMechanismModule.TwoValveOneStage
                Select Case stageNo
                    Case enmStage.No1
                        Select Case valveNo
                            Case eValveWorkMode.Valve1
                                nozzleNo = enmTemp.Nozzle1

                            Case eValveWorkMode.Valve2
                                nozzleNo = enmTemp.Nozzle2

                        End Select

                    Case enmStage.No2
                        Select Case valveNo
                            Case eValveWorkMode.Valve1
                                nozzleNo = enmTemp.Nozzle3

                            Case eValveWorkMode.Valve2
                                nozzleNo = enmTemp.Nozzle4

                        End Select

                    Case enmStage.No3
                        '[Note]:帶修改，目前閥數量只到四組
                        Select Case valveNo
                            Case eValveWorkMode.Valve1
                                nozzleNo = enmTemp.Nozzle3

                            Case eValveWorkMode.Valve2
                                nozzleNo = enmTemp.Nozzle3

                        End Select

                    Case enmStage.No4
                        '[Note]:帶修改，目前閥數量只到四組
                        Select Case valveNo
                            Case eValveWorkMode.Valve1
                                nozzleNo = enmTemp.Nozzle4

                            Case eValveWorkMode.Valve2
                                nozzleNo = enmTemp.Nozzle4

                        End Select

                End Select
        End Select

        Return True

    End Function

    '***************************************************************************************************************

#Region "Dispense Parameter"

    ''' <summary>[Dispense Gap]</summary>
    ''' <param name="pathParameterType"></param>
    ''' <param name="parameterName"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GetDispenseGap(ByVal pathParameterType As ePathParameterType, ByVal parameterName As String) As Decimal
        If gSSystemParameter.EnableVideoRun Then
            Return 0
        End If

        Select Case pathParameterType
            Case ePathParameterType.Dot
                If gDotValueDB.ContainsKey(parameterName) = True Then
                    Return gDotValueDB(parameterName).PreDispenseGap
                Else
                    Return 0
                End If

            Case ePathParameterType.Line
                If gLineValueDB.ContainsKey(parameterName) = True Then
                    Return gLineValueDB(parameterName).PreDispenseGap
                Else
                    Return 0
                End If

            Case ePathParameterType.Arc
                If gArcValueDB.ContainsKey(parameterName) = True Then
                    Return gArcValueDB(parameterName).PreDispenseGap
                Else
                    Return 0
                End If

            Case Else
                Return 0

        End Select

        Return 0

    End Function

    ''' <summary>[Pre-Dispense Parameter]</summary>
    ''' <param name="pathParameterType"></param>
    ''' <param name="parameterName"></param>
    ''' <param name="velHigh">mm/sec</param>
    ''' <param name="acc">mm/sec^2</param>
    ''' <param name="settlingTime">ms</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GetPreDispenseParameter(ByVal pathParameterType As ePathParameterType, ByVal parameterName As String, ByVal cycleTime As Decimal, ByRef velHigh As Decimal, ByRef acc As Decimal, ByRef settlingTime As Decimal, ByRef valveOnTime As Decimal) As Boolean

        '[Note]:正常來說不應該有非Dot的參數，若參數小於閥開關一次的時間，則ValveOnTime的數值就是依照Cycle Time
        If parameterName Is Nothing Then '輸入不合法
            Return False
        End If
        Select Case pathParameterType
            Case ePathParameterType.Dot
                If gDotValueDB.ContainsKey(parameterName) = True Then
                    velHigh = gDotValueDB(parameterName).PreDownSpeed
                    acc = gDotValueDB(parameterName).PreDownAcc
                    settlingTime = gDotValueDB(parameterName).PreSettlingTime * 1000     'sec-->ms
                    '[Note]:全都轉成ms
                    If cycleTime > CInt(gDotValueDB(parameterName).DuringValveOnTime * 1000) Then
                        valveOnTime = cycleTime
                    Else
                        valveOnTime = CInt(gDotValueDB(parameterName).DuringValveOnTime * 1000)
                    End If
                    Return True
                Else
                    Return False
                End If

            Case ePathParameterType.Line
                If gLineValueDB.ContainsKey(parameterName) = True Then
                    velHigh = gLineValueDB(parameterName).PreDownSpeed
                    acc = gLineValueDB(parameterName).PreDownAcc
                    settlingTime = gLineValueDB(parameterName).PreMoveDelayFactor * 1000
                    valveOnTime = cycleTime
                    Return True
                Else
                    Return False
                End If

            Case ePathParameterType.Arc
                If gArcValueDB.ContainsKey(parameterName) = True Then
                    velHigh = gArcValueDB(parameterName).PreDownSpeed
                    acc = gArcValueDB(parameterName).PreDownAcc
                    settlingTime = gArcValueDB(parameterName).PreMoveDelayFactor * 1000
                    valveOnTime = cycleTime
                    Return True
                Else
                    Return False
                End If

            Case Else
                Return False

        End Select

        Return False

    End Function

    ''' <summary>[Post-Dispense Parameter]</summary>
    ''' <param name="pathParameterType"></param>
    ''' <param name="parameterName"></param>
    ''' <param name="retractVelocity"></param>
    ''' <param name="retractAcc"></param>
    ''' <param name="retractDistance"></param>
    ''' <param name="dwellTime"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GetPostDispenseParameter(ByVal pathParameterType As ePathParameterType, ByVal parameterName As String, ByRef retractVelocity As Decimal, ByRef retractAcc As Decimal, ByRef retractDistance As Decimal, ByRef dwellTime As Decimal) As Boolean
        '[Note]:取出參數

        '[Note]:正常來說不應該有非Dot的參數，若參數小於閥開關一次的時間，則ValveOnTime的數值就是依照Cycle Time

        Select Case pathParameterType
            Case ePathParameterType.Dot
                If gDotValueDB.ContainsKey(parameterName) = True Then
                    retractVelocity = gDotValueDB(parameterName).PostRetractSpeed
                    retractAcc = gDotValueDB(parameterName).PostRetractAcc
                    retractDistance = gDotValueDB(parameterName).PostRetractDistance
                    dwellTime = CInt(gDotValueDB(parameterName).PostDwellTime * 1000)  'sec-->ms
                    Return True
                Else
                    Return False
                End If

            Case ePathParameterType.Line
                If gLineValueDB.ContainsKey(parameterName) = True Then
                    retractVelocity = gLineValueDB(parameterName).PostRetractSpeed
                    retractAcc = gLineValueDB(parameterName).PostRetractAcc
                    retractDistance = gLineValueDB(parameterName).PostRetractDistance
                    dwellTime = CInt(gLineValueDB(parameterName).PostDwellTime * 1000) 'sec-->ms
                    Return True
                Else
                    Return False
                End If

            Case ePathParameterType.Arc
                If gArcValueDB.ContainsKey(parameterName) = True Then
                    retractVelocity = gArcValueDB(parameterName).PostRetractSpeed
                    retractAcc = gArcValueDB(parameterName).PostRetractAcc
                    retractDistance = gArcValueDB(parameterName).PostRetractDistance
                    dwellTime = CInt(gArcValueDB(parameterName).PostDwellTime * 1000) 'sec-->ms
                    Return True
                Else
                    Return False
                End If

            Case Else
                Return False
        End Select
        Return False
    End Function

    ''' <summary>[取Pulse Time]</summary>
    ''' <param name="valveName"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GetTriggerPulseTime(ByVal valveName As String) As Integer
        If gJetValveDB.ContainsKey(valveName) = True Then
            Select Case gJetValveDB(valveName).ValveModel
                Case eValveModel.Advanjet
                    '[Note]:ms-->us
                    Return CInt(gJetValveDB(valveName).Advanjet.PulseTime * 1000)

                Case eValveModel.PicoPulse
                    '[Note]:ms-->us
                    Return CInt(gJetValveDB(valveName).PicoTouch.PulseTime * 1000)

            End Select
        End If
        Return 1000
    End Function

    ''' <summary>[Get Jet Time]</summary>
    ''' <param name="valveName"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GetTriggerJetTime(ByVal valveName As String) As Integer
        If gJetValveDB.ContainsKey(valveName) = True Then
            Select Case gJetValveDB(valveName).ValveModel
                Case eValveModel.Advanjet
                    '[Note]:ms-->us
                    Return CInt(gJetValveDB(valveName).Advanjet.JetTime * 1000)

                Case eValveModel.PicoPulse
                    '[Note]:ms-->us
                    Return CInt(gJetValveDB(valveName).PicoTouch.JetTime * 1000)

            End Select
        End If
        Return 1000
    End Function

    ''' <summary>[Get Open Time]</summary>
    ''' <param name="valveName"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GetTriggerOpenTime(ByVal valveName As String) As Integer
        If gJetValveDB.ContainsKey(valveName) = True Then
            Select Case gJetValveDB(valveName).ValveModel
                Case eValveModel.Advanjet
                    '[Note]:ms-->us
                    Return 1000

                Case eValveModel.PicoPulse
                    '[Note]:ms-->us
                    Return CInt(gJetValveDB(valveName).PicoTouch.OpenTime * 1000)

            End Select
        End If
        Return 1000
    End Function

    ''' <summary>[Get Close Time]</summary>
    ''' <param name="valveName"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GetTriggerCloseTime(ByVal valveName As String) As Integer
        If gJetValveDB.ContainsKey(valveName) = True Then
            Select Case gJetValveDB(valveName).ValveModel
                Case eValveModel.Advanjet
                    '[Note]:ms-->us
                    Return 1000

                Case eValveModel.PicoPulse
                    '[Note]:ms-->us
                    Return CInt(gJetValveDB(valveName).PicoTouch.CloseTime * 1000)

            End Select
        End If
        Return 1000
    End Function

    ''' <summary>[Get Close Voltage]</summary>
    ''' <param name="valveName"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GetTriggerCloseVoltage(ByVal valveName As String) As Integer
        If gJetValveDB.ContainsKey(valveName) = True Then
            Select Case gJetValveDB(valveName).ValveModel
                Case eValveModel.Advanjet
                    Return 100

                Case eValveModel.PicoPulse
                    Return CInt(gJetValveDB(valveName).PicoTouch.CloseVoltage)

            End Select
        End If
        Return 100
    End Function


    ''' <summary>[Get Stoke]</summary>
    ''' <param name="valveName"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GetTriggerStorke(ByVal valveName As String) As Integer
        If gJetValveDB.ContainsKey(valveName) = True Then
            Select Case gJetValveDB(valveName).ValveModel
                Case eValveModel.Advanjet
                    Return 100

                Case eValveModel.PicoPulse
                    Return CInt(gJetValveDB(valveName).PicoTouch.Stroke)

            End Select
        End If
        Return 100
    End Function


    ''' <summary>[Get Trigger Delay Time]</summary>
    ''' <param name="valveName"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GetTriggerDelayTime(ByVal valveName As String) As Decimal
        If gJetValveDB.ContainsKey(valveName) = True Then
            Select Case gJetValveDB(valveName).ValveModel
                Case eValveModel.Advanjet
                    ' Return (gJetValveDB(valveName).Advanjet.CycleTime + gJetValveDB(valveName).Advanjet.JetTime)
                    Return (gJetValveDB(valveName).Advanjet.RefillTime + gJetValveDB(valveName).Advanjet.JetTime)
                Case eValveModel.PicoPulse
                    Return CInt(gJetValveDB(valveName).PicoTouch.CycleTime + gJetValveDB(valveName).PicoTouch.JetTime)

            End Select
        End If
        Return 100
    End Function


    ''' <summary>[Get Trigger Jet Pressure]</summary>
    ''' <param name="valveName"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GetTriggerJetPressure(ByVal valveName As String) As Integer
        If gJetValveDB.ContainsKey(valveName) = True Then
            Select Case gJetValveDB(valveName).ValveModel
                Case eValveModel.Advanjet
                    Return CInt(gJetValveDB(valveName).Advanjet.ValveAirPressure * 1000)

                Case eValveModel.PicoPulse
                    Return 0

            End Select
        End If
        Return 0
    End Function


    ''' <summary>[Get Trigger Cycle Time]</summary>
    ''' <param name="valveName"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function GetTriggerCycleTime(ByVal valveName As String) As Integer
        If valveName Is Nothing Then
            Return 10000
        End If
        If gJetValveDB.ContainsKey(valveName) = True Then
            Select Case gJetValveDB(valveName).ValveModel
                Case eValveModel.Advanjet
                    Return CInt((gJetValveDB(valveName).Advanjet.CycleTime * 1000))

                Case eValveModel.PicoPulse
                    Return CInt((gJetValveDB(valveName).PicoTouch.CycleTime * 1000))

            End Select
        End If
        Return 10000

    End Function

#End Region

#Region "Trigger Board相關I/O"

    ''' <summary>[確認Trigger Board Ready]</summary>
    ''' <param name="stageNo"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function IsTriggerBoardReady(ByVal stageNo As enmStage) As Boolean
        '[Note]:基本上一組Stage配一塊Trigger Board
        Select Case stageNo
            Case enmStage.No1
                Return gDICollection.GetState(enmDI.TriggerBoardReady1, True)

            Case enmStage.No2
                Return gDICollection.GetState(enmDI.TriggerBoardReady2, True)

            Case enmStage.No3
                Return gDICollection.GetState(enmDI.TriggerBoardReady3, True)

            Case enmStage.No4
                Return gDICollection.GetState(enmDI.TriggerBoardReady4, True)

        End Select

        Return True
    End Function

    ''' <summary>[確認Trigger Board Alarm]</summary>
    ''' <param name="stageNo"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function IsTriggerBoardAlarm(ByVal stageNo As enmStage) As Boolean
        '[Note]:基本上一組Stage配一塊Trigger Board
        Select Case stageNo
            Case enmStage.No1
                Return gDICollection.GetState(enmDI.TriggerBoardAlarm1, False)

            Case enmStage.No2
                Return gDICollection.GetState(enmDI.TriggerBoardAlarm2, False)

            Case enmStage.No3
                Return gDICollection.GetState(enmDI.TriggerBoardAlarm3, False)

            Case enmStage.No4
                Return gDICollection.GetState(enmDI.TriggerBoardAlarm4, False)

        End Select

        Return True
    End Function

#End Region

#Region "其他控制"
    ''' <summary>[點膠觸發訊號 開啟 關閉]</summary>
    ''' <param name="selectValve"></param>
    ''' <param name="state"></param>
    ''' <remarks></remarks>
    Public Sub SetDispensingTrigger(ByVal stageNo As enmStage, ByVal selectValve As eValveWorkMode, ByVal state As enmONOFF)

        Dim mIsOn As Boolean

        If state = enmONOFF.eON Then
            mIsOn = True
        Else
            mIsOn = False
        End If

        Select Case gSSystemParameter.MachineType
            Case enmMachineType.eDTS300A, enmMachineType.eDTS330A
                Select Case selectValve
                    Case eValveWorkMode.Valve1
                        Select Case state
                            Case enmONOFF.eON
                                Call gCMotion.DOOutput(2, enmMDO.GlueOn, enmCardIOONOFF.eON)
                            Case enmONOFF.eOff
                                Call gCMotion.DOOutput(2, enmMDO.GlueOn, enmCardIOONOFF.eOFF)
                        End Select

                    Case eValveWorkMode.Valve2
                        Select Case state
                            Case enmONOFF.eON
                                Call gCMotion.DOOutput(0, enmMDO.GlueOn, enmCardIOONOFF.eON)
                            Case enmONOFF.eOff
                                Call gCMotion.DOOutput(0, enmMDO.GlueOn, enmCardIOONOFF.eOFF)
                        End Select

                    Case Else
                        Select Case state
                            Case enmONOFF.eON
                                Call gCMotion.DOOutput(2, enmMDO.GlueOn, enmCardIOONOFF.eON)
                            Case enmONOFF.eOff
                                Call gCMotion.DOOutput(2, enmMDO.GlueOn, enmCardIOONOFF.eOFF)
                        End Select

                End Select

            Case enmMachineType.eDTS_2S2V, enmMachineType.DCS_500AD
                Select Case stageNo
                    Case enmStage.No1
                        Select Case selectValve
                            Case eValveWorkMode.Valve1
                                gDOCollection.SetState(enmDO.DispensingTrigger1, mIsOn)

                            Case eValveWorkMode.Valve2
                                '[Note]:目前沒有此I/O點位規劃

                        End Select

                    Case enmStage.No2
                        Select Case selectValve
                            Case eValveWorkMode.Valve1
                                gDOCollection.SetState(enmDO.DispensingTrigger2, mIsOn)

                            Case eValveWorkMode.Valve2
                                '[Note]:目前沒有此I/O點位規劃
                        End Select

                    Case enmStage.No3
                        Select Case selectValve
                            Case eValveWorkMode.Valve1
                                gDOCollection.SetState(enmDO.DispensingTrigger3, mIsOn)

                            Case eValveWorkMode.Valve2
                                '[Note]:目前沒有此I/O點位規劃
                        End Select

                    Case enmStage.No4
                        Select Case selectValve
                            Case eValveWorkMode.Valve1
                                gDOCollection.SetState(enmDO.DispensingTrigger4, mIsOn)

                            Case eValveWorkMode.Valve2
                                '[Note]:目前沒有此I/O點位規劃
                        End Select

                End Select

            Case enmMachineType.DCSW_800AQ
                Select Case stageNo
                    Case enmStage.No1
                        Select Case selectValve
                            Case eValveWorkMode.Valve1
                                gDOCollection.SetState(enmDO.DispensingTrigger1, mIsOn)

                            Case eValveWorkMode.Valve2
                                '[Note]:目前沒有此I/O點位規劃

                        End Select

                    Case enmStage.No2
                        Select Case selectValve
                            Case eValveWorkMode.Valve1
                                gDOCollection.SetState(enmDO.DispensingTrigger2, mIsOn)

                            Case eValveWorkMode.Valve2
                                '[Note]:目前沒有此I/O點位規劃
                        End Select

                    Case enmStage.No3
                        Select Case selectValve
                            Case eValveWorkMode.Valve1
                                gDOCollection.SetState(enmDO.DispensingTrigger3, mIsOn)

                            Case eValveWorkMode.Valve2
                                '[Note]:目前沒有此I/O點位規劃
                        End Select

                    Case enmStage.No4
                        Select Case selectValve
                            Case eValveWorkMode.Valve1
                                gDOCollection.SetState(enmDO.DispensingTrigger4, mIsOn)

                            Case eValveWorkMode.Valve2
                                '[Note]:目前沒有此I/O點位規劃
                        End Select

                End Select

            Case Else
                Select Case selectValve
                    Case eValveWorkMode.Valve1
                        gDOCollection.SetState(enmDO.DispensingTrigger1, mIsOn)

                    Case eValveWorkMode.Valve2
                        'gDOCollection.SetState(enmDO.DispensingTrigger2) = mIsOn
                        gDOCollection.SetState(enmDO.DispensingTrigger1, mIsOn)

                End Select

        End Select

    End Sub

    ''' <summary>[閥汽缸升降動作]</summary>
    ''' <param name="stageNo"></param>
    ''' <param name="valveNo"></param>
    ''' <param name="state"></param>
    ''' <remarks></remarks>
    Public Sub ValveCylinderAction(ByVal stageNo As enmStage, ByVal valveNo As eValveWorkMode, ByVal state As enmUpDown, Optional ByVal stopWatch As Stopwatch = Nothing)

        '[Note]:對外部而言，只會對此下Down的指令，不會對此下Up的指令
        '       因為對ValveNo1下Down，就是呼叫汽缸做上升的動作
        '             ValveNo2下Down，就是呼叫汽缸做下降的動作


        '[Note]:不管哪個閥，外部下Down都是點膠前須完成的預備動作
        '       不管如何Valve1都是在Up的狀態，只有Valve2會有Down的動作
        If IsNothing(stopWatch) = False Then
            stopWatch.Restart()
        End If

        Select Case stageNo
            Case enmStage.No1
                Select Case valveNo
                    Case eValveWorkMode.Valve1
                        gDOCollection.SetState(enmDO.ValveCylUp1, True)
                        gDOCollection.SetState(enmDO.ValveCylDown1, False)

                    Case eValveWorkMode.Valve2
                        Select Case state
                            Case enmUpDown.Up
                                gDOCollection.SetState(enmDO.ValveCylUp1, True)
                                gDOCollection.SetState(enmDO.ValveCylDown1, False)

                            Case enmUpDown.Down
                                gDOCollection.SetState(enmDO.ValveCylUp1, False)
                                gDOCollection.SetState(enmDO.ValveCylDown1, True)

                        End Select

                End Select

            Case enmStage.No2
                Select Case valveNo
                    Case eValveWorkMode.Valve1
                        gDOCollection.SetState(enmDO.ValveCylUp2, True)
                        gDOCollection.SetState(enmDO.ValveCylDown2, False)

                    Case eValveWorkMode.Valve2
                        Select Case state
                            Case enmUpDown.Up
                                gDOCollection.SetState(enmDO.ValveCylUp2, True)
                                gDOCollection.SetState(enmDO.ValveCylDown2, False)

                            Case enmUpDown.Down
                                gDOCollection.SetState(enmDO.ValveCylUp2, False)
                                gDOCollection.SetState(enmDO.ValveCylDown2, True)

                        End Select

                End Select

            Case enmStage.No3
                Select Case valveNo
                    Case eValveWorkMode.Valve1
                        gDOCollection.SetState(enmDO.ValveCylUp3, True)
                        gDOCollection.SetState(enmDO.ValveCylDown3, False)

                    Case eValveWorkMode.Valve2
                        Select Case state
                            Case enmUpDown.Up
                                gDOCollection.SetState(enmDO.ValveCylUp3, True)
                                gDOCollection.SetState(enmDO.ValveCylDown3, False)

                            Case enmUpDown.Down
                                gDOCollection.SetState(enmDO.ValveCylUp3, False)
                                gDOCollection.SetState(enmDO.ValveCylDown3, True)

                        End Select
                End Select

            Case enmStage.No4
                Select Case valveNo
                    Case eValveWorkMode.Valve1
                        gDOCollection.SetState(enmDO.ValveCylUp4, True)
                        gDOCollection.SetState(enmDO.ValveCylDown4, False)

                    Case eValveWorkMode.Valve2
                        Select Case state
                            Case enmUpDown.Up
                                gDOCollection.SetState(enmDO.ValveCylUp4, True)
                                gDOCollection.SetState(enmDO.ValveCylDown4, False)

                            Case enmUpDown.Down
                                gDOCollection.SetState(enmDO.ValveCylUp4, False)
                                gDOCollection.SetState(enmDO.ValveCylDown4, True)

                        End Select
                End Select

        End Select
    End Sub

    ''' <summary>[閥汽缸Sensor(上升或下降)狀態檢知]</summary>
    ''' <param name="stageNo"></param>
    ''' <param name="valveNo"></param>
    ''' <param name="state"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function ValveCylinderSensor(ByVal stageNo As enmStage, ByVal valveNo As eValveWorkMode, ByVal state As enmUpDown) As Boolean

        '[Note]:不管哪個閥，外部下Down都是點膠前須完成的預備動作
        '       不管哪個閥，外部下Up都是點膠完須完成的後續動作(也可以只在確定有切換時做)

        '[Note]:不管如何Valve1都是在Up的狀態，只有Valve2會有Down的動作

        '[Note]:若是單閥的機構，則不用做任何的Sensor檢查，直接過關，也不用Pass Sensor的設定
        If gSSystemParameter.StageUseValveCount = eMechanismModule.OneValveOneStage Then
            Return True
        End If

        Select Case stageNo
            Case enmStage.No1
                Select Case valveNo
                    Case eValveWorkMode.Valve1
                        If gDICollection.GetState(enmDI.ValveCylUpReady1, True) = True And gDICollection.GetState(enmDI.ValveCylDownReady1, False) = False Then
                            Return True
                        Else
                            Return False
                        End If

                    Case eValveWorkMode.Valve2
                        Select Case state
                            Case enmUpDown.Up
                                If gDICollection.GetState(enmDI.ValveCylUpReady1, True) = True And gDICollection.GetState(enmDI.ValveCylDownReady1, False) = False Then
                                    Return True
                                Else
                                    Return False
                                End If

                            Case enmUpDown.Down
                                If gDICollection.GetState(enmDI.ValveCylUpReady1, False) = False And gDICollection.GetState(enmDI.ValveCylDownReady1, True) = True Then
                                    Return True
                                Else
                                    Return False
                                End If

                        End Select

                End Select

            Case enmStage.No2
                Select Case valveNo
                    Case eValveWorkMode.Valve1
                        If gDICollection.GetState(enmDI.ValveCylUpReady2, True) = True And gDICollection.GetState(enmDI.ValveCylDownReady2, False) = False Then
                            Return True
                        Else
                            Return False
                        End If

                    Case eValveWorkMode.Valve2
                        Select Case state
                            Case enmUpDown.Up
                                If gDICollection.GetState(enmDI.ValveCylUpReady2, True) = True And gDICollection.GetState(enmDI.ValveCylDownReady2, False) = False Then
                                    Return True
                                Else
                                    Return False
                                End If

                            Case enmUpDown.Down
                                If gDICollection.GetState(enmDI.ValveCylUpReady2, False) = False And gDICollection.GetState(enmDI.ValveCylDownReady2, True) = True Then
                                    Return True
                                Else
                                    Return False
                                End If

                        End Select

                End Select

            Case enmStage.No3
                Select Case valveNo
                    Case eValveWorkMode.Valve1
                        If gDICollection.GetState(enmDI.ValveCylUpReady3, True) = True And gDICollection.GetState(enmDI.ValveCylDownReady3, False) = False Then
                            Return True
                        Else
                            Return False
                        End If

                    Case eValveWorkMode.Valve2
                        Select Case state
                            Case enmUpDown.Up
                                If gDICollection.GetState(enmDI.ValveCylUpReady3, True) = True And gDICollection.GetState(enmDI.ValveCylDownReady3, False) = False Then
                                    Return True
                                Else
                                    Return False
                                End If

                            Case enmUpDown.Down
                                If gDICollection.GetState(enmDI.ValveCylUpReady3, False) = False And gDICollection.GetState(enmDI.ValveCylDownReady3, True) = True Then
                                    Return True
                                Else
                                    Return False
                                End If

                        End Select
                End Select

            Case enmStage.No4
                Select Case valveNo
                    Case eValveWorkMode.Valve1
                        If gDICollection.GetState(enmDI.ValveCylUpReady4, True) = True And gDICollection.GetState(enmDI.ValveCylDownReady4, False) = False Then
                            Return True
                        Else
                            Return False
                        End If

                    Case eValveWorkMode.Valve2
                        Select Case state
                            Case enmUpDown.Up
                                If gDICollection.GetState(enmDI.ValveCylUpReady4, True) = True And gDICollection.GetState(enmDI.ValveCylDownReady4, False) = False Then
                                    Return True
                                Else
                                    Return False
                                End If

                            Case enmUpDown.Down
                                If gDICollection.GetState(enmDI.ValveCylUpReady4, False) = False And gDICollection.GetState(enmDI.ValveCylDownReady4, True) = True Then
                                    Return True
                                Else
                                    Return False
                                End If

                        End Select
                End Select

        End Select

        Return False
    End Function

    ''' <summary>[Software Debug資料]</summary>
    ''' <param name="stageNo"></param>
    ''' <param name="status"></param>
    ''' <param name="value"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function SoftwareDebug(ByVal stageNo As enmStage, ByVal status As String, Optional ByVal value As String = "") As Boolean

        Dim strFileDirectory As String      '[檔案目錄]
        Dim strFileName As String           '[檔案名稱]
        Dim swrFileName As StreamWriter
        Dim intI As Integer

        On Error GoTo ErrorHandler

        '[說明]:檢查目錄是否存在
        strFileDirectory = Application.StartupPath & "\SoftwareDebug"
        If Directory.Exists(strFileDirectory) = False Then
            '[說明]:目錄不存在就建目錄
            Directory.CreateDirectory(strFileDirectory)
        End If

        '[說明]:檢查年目錄是否存在
        strFileDirectory = Application.StartupPath & "\SoftwareDebug\" & Format(Now, "yyyy")
        If Directory.Exists(strFileDirectory) = False Then
            '[說明]:年目錄不存在就建目錄
            Directory.CreateDirectory(strFileDirectory)
        End If

        '[說明]:檢查月目錄是否存在
        strFileDirectory = Application.StartupPath & "\SoftwareDebug\" & Format(Now, "yyyy") & "\" & Format(Now, "MM")
        If Directory.Exists(strFileDirectory) = False Then
            '[說明]:月目錄不存在就建目錄
            Directory.CreateDirectory(strFileDirectory)
        End If

        strFileName = "\" & Format(Now, "yyyyMMdd") & ".txt"

        '[說明]:檢查檔案是否存在
        If File.Exists(strFileDirectory & strFileName) Then
            swrFileName = File.AppendText(strFileDirectory & strFileName)
        Else
            swrFileName = File.AppendText(strFileDirectory & strFileName)
            swrFileName.WriteLine("[ Time ], [ stageNo ], [ Status ], [ Value ]")
        End If

        swrFileName.WriteLine(Now & ", " & stageNo.ToString() & ", " & status & ", " & value)
        swrFileName.Close()

        Return True

ErrorHandler:
        Err.Clear()         '清除錯誤資訊
        Return False

    End Function

    'Eason 20170303 Ticket:100100 , XY Offset from CSV File
    ''' <summary>
    ''' [Stage Offset From SCV File]]
    ''' </summary>
    ''' <remarks></remarks>
    Public gStageOffsetFromSCV(enmStage.Max) As CStageCalibrationOffsetFromSCV

#End Region






    '2017/05/10_Toby 
    Public Function trigger_error(ByVal stage As Integer, ByVal errornum As String) As String
        Dim alarmcode As Integer = 0
        Dim alarmString As String = ""
        Dim alarmnumberfrom() As String

        Select Case stage
            Case 0
                alarmcode = 0
            Case 1
                alarmcode = 100
            Case 2
                alarmcode = 200
            Case 3
                alarmcode = 300
            Case Else
                Return ""
        End Select
        alarmnumberfrom = Split(errornum, ",")
        If CInt(alarmnumberfrom(0)) > 0 Then
            alarmcode = alarmcode + CInt(alarmnumberfrom(0)) + 1
            alarmString = "2016" & alarmcode.ToString("000")
        End If
        'gEqpMsg.AddHistoryAlarm("Alarm_2016001", "CCDFixOnFlyModelAction", sys.SysNum, gMsgHandler.GetMessage(Alarm_2016001), eMessageLevel.Alarm)
        Return alarmString
    End Function
    
End Module
