Imports ProjectRecipe
Imports ProjectCore
Imports ProjectMotion
Imports ProjectConveyor

''' <summary>物料相關功能轉接</summary>
''' <remarks></remarks>
Module MFunctionSubstrate
    ''' <summary>
    ''' [掃描時回傳狀態]
    ''' </summary>
    ''' <remarks></remarks>
    Public Enum enmScanStatus
        ''' <summary>
        ''' [正在執行]
        ''' </summary>
        ''' <remarks></remarks>
        Running = 0
        ''' <summary>
        ''' [當層結束]
        ''' </summary>
        ''' <remarks></remarks>
        LevelEnd = 1
        ''' <summary>
        ''' [全部結束]
        ''' </summary>
        ''' <remarks></remarks>
        Finish = 2
    End Enum


    Private PatternMaxMinOnce As Boolean


    ''' <summary>
    ''' 判斷晶粒的輸出結果
    ''' </summary>
    ''' <param name="index">索引由0開始</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function DetermineResultState(ByVal index As sLevelIndexCollection, ByVal sys As sSysParam) As Boolean

 
        With gStageMap(sys.StageNo).Node(index.NodeName).ChipState(index.Xf, index.Yf)
            Select Case .DieState
                Case enmDieState.OK
                    Select Case .enmDispenserState
                        Case enmDispenserState.Done
                            Select Case .enmDieDetectState
                                Case enmDieDetectState.None, enmDieDetectState.OK
                                    .enmResultState = enmResultState.OK

                                Case enmDieDetectState.NG
                                    .enmResultState = enmResultState.NG

                            End Select

                        Case enmDispenserState.None
                            .enmResultState = enmResultState.Unfinished

                    End Select

                Case enmDieState.NoDie
                    .enmResultState = enmResultState.NoDie

                Case enmDieState.NG
                    .enmResultState = enmResultState.NG

                Case enmDieState.None
                    .enmResultState = enmResultState.None

            End Select
        End With

        Return True

ErrorHandler:

        If Err.Number <> 0 Then  ' No error. Do nothing.
            Err.Clear()         '清除錯誤資訊
        End If

        Return False
    End Function



    Sub CompareMaxMin(ByVal x As Decimal, ByVal y As Decimal, ByRef maxX As Decimal, ByRef minX As Decimal, ByRef maxY As Decimal, ByRef minY As Decimal)
        If x < minX Then minX = x
        If x > maxX Then maxX = x
        If y < minY Then minY = y
        If y > maxY Then maxY = y
    End Sub

    '20170505
    Function FindPatternMaxMinTest(ByRef minX As Double, ByRef minY As Double, ByRef maxX As Double, ByRef maxY As Double, ByVal sys As sSysParam, ByVal index As sLevelIndexCollection) As Boolean

        If gCRecipe Is Nothing Then
            minX = 0
            minY = 0
            maxX = 0
            maxY = 0
            Return False
        End If
        If gCRecipe.Pattern Is Nothing Then
            minX = 0
            minY = 0
            maxX = 0
            maxY = 0
            Return False
        End If
        If gCRecipe.strFileName = "" Or index.PatternName = "" Then
            Return False
        End If

        Dim bXz As Double
        Dim bYz As Double
        Dim mXz As Double
        Dim mYz As Double

        '20161010
        PatternMaxMinOnce = True


        Dim mNodeID As String
        With gCRecipe

            '[說明]:單Stage內有幾個Pattern
            For j As Integer = 0 To gCRecipe.Node(index.StageNo).Keys.Count - 1
                mNodeID = gCRecipe.Node(index.StageNo).Keys(j)
                Dim Name As String = gCRecipe.Node(index.StageNo)(mNodeID).PatternName
                Dim NodeBasicX As Decimal = gCRecipe.Node(index.StageNo)(mNodeID).ConveyorPos(sys.ConveyorNo).BasicPositionX
                Dim NodeBasicY As Decimal = gCRecipe.Node(index.StageNo)(mNodeID).ConveyorPos(sys.ConveyorNo).BasicPositionY
                If .Pattern.ContainsKey(Name) Then
                    '[說明]:每個Pattern內有幾個Round
                    For mRoundNo = 0 To .Pattern(Name).Round.Count - 1
                        Dim num As Integer = .Pattern(Name).Round.Count
                        With .Pattern(Name).Round(mRoundNo)
                            If .CStep.Count > 0 Then 'Soni / 2016.08.20 StepCount改為CStep.Count
                                num = .CStep.Count 'Soni / 2016.08.20 StepCount改為CStep.Count
                                For mStepNo = 0 To .CStep.Count - 1 'Soni / 2016.08.20 StepCount改為CStep.Count
                                    With .CStep(mStepNo)
                                        Select Case .StepType
                                            Case eStepFunctionType.Circle2D
                                                '20170215
                                                Dim EndPos(1) As Decimal
                                                Dim Center(1) As Decimal
                                                Center(0) = NodeBasicX + .Circle2D.CenterPosX
                                                Center(1) = NodeBasicY + .Circle2D.CenterPosY
                                                EndPos(0) = NodeBasicX + .Circle2D.Middle2PosX
                                                EndPos(1) = NodeBasicY + .Circle2D.Middle2PosY
                                                Dim mRadius As Decimal = GetDistance(EndPos(0), EndPos(1), Center(0), Center(1))

                                                '20170505
                                                bXz = max(NodeBasicX + .Circle2D.CenterPosX + 2 * mRadius, NodeBasicX + .Circle2D.EndPosX + 2 * mRadius)
                                                mXz = min(NodeBasicX + .Circle2D.CenterPosX - 2 * mRadius, NodeBasicX + .Circle2D.EndPosX - 2 * mRadius)
                                                bYz = max(NodeBasicY + .Circle2D.CenterPosY + 2 * mRadius, NodeBasicY + .Circle2D.EndPosY + 2 * mRadius)
                                                mYz = min(NodeBasicY + .Circle2D.CenterPosY - 2 * mRadius, NodeBasicY + .Circle2D.EndPosY - 2 * mRadius)

                                                'bXz = max(NodeBasicX + .Circle2D.CenterPosX, NodeBasicX + .Circle2D.EndPosX)
                                                'mXz = min(NodeBasicX + .Circle2D.CenterPosX, NodeBasicX + .Circle2D.EndPosX)
                                                'bYz = max(NodeBasicY + .Circle2D.CenterPosY, NodeBasicY + .Circle2D.EndPosY)
                                                'mYz = min(NodeBasicY + .Circle2D.CenterPosY, NodeBasicY + .Circle2D.EndPosY)


                                                '20161010
                                                If PatternMaxMinOnce = True Then
                                                    maxX = bXz
                                                    minX = mXz
                                                    maxY = bYz
                                                    minY = mYz
                                                    PatternMaxMinOnce = False
                                                ElseIf PatternMaxMinOnce = False Then
                                                    maxX = max(maxX, bXz)
                                                    minX = min(minX, mXz)
                                                    maxY = max(maxY, bYz)
                                                    minY = min(minY, mYz)
                                                End If

                                            Case eStepFunctionType.Arc2D
                                                '20170505
                                                Dim EndPos(1) As Decimal
                                                Dim Center(1) As Decimal
                                                Center(0) = NodeBasicX + .Arc2D.CenterPosX
                                                Center(1) = NodeBasicY + .Arc2D.CenterPosY
                                                EndPos(0) = NodeBasicX + .Arc2D.EndPosX
                                                EndPos(1) = NodeBasicY + .Arc2D.EndPosY
                                                Dim mRadius As Decimal = GetDistance(EndPos(0), EndPos(1), Center(0), Center(1))

                                                bXz = max(NodeBasicX + .Arc2D.CenterPosX + 2 * mRadius, NodeBasicX + .Arc2D.EndPosX + 2 * mRadius)
                                                mXz = min(NodeBasicX + .Arc2D.CenterPosX - 2 * mRadius, NodeBasicX + .Arc2D.EndPosX - 2 * mRadius)
                                                bYz = max(NodeBasicY + .Arc2D.CenterPosY + 2 * mRadius, NodeBasicY + .Arc2D.EndPosY + 2 * mRadius)
                                                mYz = min(NodeBasicY + .Arc2D.CenterPosY - 2 * mRadius, NodeBasicY + .Arc2D.EndPosY - 2 * mRadius)

                                                'bXz = max(NodeBasicX + .Arc2D.CenterPosX, NodeBasicX + .Arc2D.EndPosX)
                                                'mXz = min(NodeBasicX + .Arc2D.CenterPosX, NodeBasicX + .Arc2D.EndPosX)
                                                'bYz = max(NodeBasicY + .Arc2D.CenterPosY, NodeBasicY + .Arc2D.EndPosY)
                                                'mYz = min(NodeBasicY + .Arc2D.CenterPosY, NodeBasicY + .Arc2D.EndPosY)

                                                '20161010
                                                If PatternMaxMinOnce = True Then
                                                    maxX = bXz
                                                    minX = mXz
                                                    maxY = bYz
                                                    minY = mYz
                                                    PatternMaxMinOnce = False
                                                ElseIf PatternMaxMinOnce = False Then
                                                    maxX = max(maxX, bXz)
                                                    minX = min(minX, mXz)
                                                    maxY = max(maxY, bYz)
                                                    minY = min(minY, mYz)
                                                End If

                                            Case eStepFunctionType.Dots3D
                                                bXz = max(NodeBasicX + .Dots3D.PosX, NodeBasicX + .Dots3D.PosX)
                                                mXz = min(NodeBasicX + .Dots3D.PosX, NodeBasicX + .Dots3D.PosX)
                                                bYz = max(NodeBasicY + .Dots3D.PosY, NodeBasicY + .Dots3D.PosY)
                                                mYz = min(NodeBasicY + .Dots3D.PosY, NodeBasicY + .Dots3D.PosY)

                                                '20161010
                                                If PatternMaxMinOnce = True Then
                                                    maxX = bXz
                                                    minX = mXz
                                                    maxY = bYz
                                                    minY = mYz
                                                    PatternMaxMinOnce = False
                                                ElseIf PatternMaxMinOnce = False Then
                                                    maxX = max(maxX, bXz)
                                                    minX = min(minX, mXz)
                                                    maxY = max(maxY, bYz)
                                                    minY = min(minY, mYz)
                                                End If
                                            Case eStepFunctionType.Line3D
                                                bXz = max(NodeBasicX + .Line3D.StartPosX, NodeBasicX + .Line3D.EndPosX)
                                                mXz = min(NodeBasicX + .Line3D.StartPosX, NodeBasicX + .Line3D.EndPosX)
                                                bYz = max(NodeBasicY + .Line3D.StartPosY, NodeBasicY + .Line3D.EndPosY)
                                                mYz = min(NodeBasicY + .Line3D.StartPosY, NodeBasicY + .Line3D.EndPosY)

                                                '20161010
                                                If PatternMaxMinOnce = True Then
                                                    maxX = bXz
                                                    minX = mXz
                                                    maxY = bYz
                                                    minY = mYz
                                                    PatternMaxMinOnce = False
                                                ElseIf PatternMaxMinOnce = False Then
                                                    maxX = max(maxX, bXz)
                                                    minX = min(minX, mXz)
                                                    maxY = max(maxY, bYz)
                                                    minY = min(minY, mYz)
                                                End If
                                            Case eStepFunctionType.Circle3D
                                                bXz = max(NodeBasicX + .Circle3D.CenterPosX, NodeBasicX + .Circle3D.EndPosX)
                                                mXz = min(NodeBasicX + .Circle3D.CenterPosX, NodeBasicX + .Circle3D.EndPosX)
                                                bYz = max(NodeBasicY + .Circle3D.CenterPosY, NodeBasicY + .Circle3D.EndPosY)
                                                mYz = min(NodeBasicY + .Circle3D.CenterPosY, NodeBasicY + .Circle3D.EndPosY)

                                                '20161010
                                                If PatternMaxMinOnce = True Then
                                                    maxX = bXz
                                                    minX = mXz
                                                    maxY = bYz
                                                    minY = mYz
                                                    PatternMaxMinOnce = False
                                                ElseIf PatternMaxMinOnce = False Then
                                                    maxX = max(maxX, bXz)
                                                    minX = min(minX, mXz)
                                                    maxY = max(maxY, bYz)
                                                    minY = min(minY, mYz)
                                                End If
                                            Case eStepFunctionType.Arc3D
                                                bXz = max(NodeBasicX + .Arc3D.CenterPosX, NodeBasicX + .Arc3D.EndPosX)
                                                mXz = min(NodeBasicX + .Arc3D.CenterPosX, NodeBasicX + .Arc3D.EndPosX)
                                                bYz = max(NodeBasicY + .Arc3D.CenterPosY, NodeBasicY + .Arc3D.EndPosY)
                                                mYz = min(NodeBasicY + .Arc3D.CenterPosY, NodeBasicY + .Arc3D.EndPosY)

                                                '20161010
                                                If PatternMaxMinOnce = True Then
                                                    maxX = bXz
                                                    minX = mXz
                                                    maxY = bYz
                                                    minY = mYz
                                                    PatternMaxMinOnce = False
                                                ElseIf PatternMaxMinOnce = False Then
                                                    maxX = max(maxX, bXz)
                                                    minX = min(minX, mXz)
                                                    maxY = max(maxY, bYz)
                                                    minY = min(minY, mYz)
                                                End If
                                            Case eStepFunctionType.Move3D
                                                bXz = max(.Move3D.EndPosX, .Move3D.EndPosX)
                                                mXz = min(.Move3D.EndPosX, .Move3D.EndPosX)
                                                bYz = max(.Move3D.EndPosY, .Move3D.EndPosY)
                                                mYz = min(.Move3D.EndPosY, .Move3D.EndPosY)

                                                '20161010
                                                If PatternMaxMinOnce = True Then
                                                    maxX = bXz
                                                    minX = mXz
                                                    maxY = bYz
                                                    minY = mYz
                                                    PatternMaxMinOnce = False
                                                ElseIf PatternMaxMinOnce = False Then
                                                    maxX = max(maxX, bXz)
                                                    minX = min(minX, mXz)
                                                    maxY = max(maxY, bYz)
                                                    minY = min(minY, mYz)
                                                End If
                                        End Select
                                    End With
                                Next
                            End If
                        End With
                    Next
                End If
                
            Next
        End With

        Return True
    End Function


    '20161102
    'Function FindPatternMaxMinTest(ByRef minX As Double, ByRef minY As Double, ByRef maxX As Double, ByRef maxY As Double, ByVal sys As sSysParam, ByVal index As sLevelIndexCollection) As Boolean

    '    If gCRecipe Is Nothing Then
    '        minX = 0
    '        minY = 0
    '        maxX = 0
    '        maxY = 0
    '        Return False
    '    End If
    '    If gCRecipe.Pattern Is Nothing Then
    '        minX = 0
    '        minY = 0
    '        maxX = 0
    '        maxY = 0
    '        Return False
    '    End If
    '    If gCRecipe.strFileName = "" Or index.PatternName = "" Then
    '        Return False
    '    End If

    '    Dim bXz As Double
    '    Dim bYz As Double
    '    Dim mXz As Double
    '    Dim mYz As Double

    '    '20161010
    '    PatternMaxMinOnce = True


    '    Dim mNodeID As String
    '    With gCRecipe

    '        '[說明]:單Stage內有幾個Pattern
    '        For j As Integer = 0 To gCRecipe.Node(index.StageNo).Keys.Count - 1
    '            mNodeID = gCRecipe.Node(index.StageNo).Keys(j)
    '            Dim Name As String = gCRecipe.Node(index.StageNo)(mNodeID).PatternName
    '            Dim NodeBasicX As Decimal = gCRecipe.Node(index.StageNo)(mNodeID).ConveyorPos(sys.ConveyorNo).BasicPositionX
    '            Dim NodeBasicY As Decimal = gCRecipe.Node(index.StageNo)(mNodeID).ConveyorPos(sys.ConveyorNo).BasicPositionY
    '            '[說明]:每個Pattern內有幾個Round
    '            For mRoundNo = 0 To .Pattern(Name).Round.Count - 1
    '                Dim num As Integer = .Pattern(Name).Round.Count
    '                With .Pattern(Name).Round(mRoundNo)
    '                    If .CStep.Count > 0 Then 'Soni / 2016.08.20 StepCount改為CStep.Count
    '                        num = .CStep.Count 'Soni / 2016.08.20 StepCount改為CStep.Count
    '                        For mStepNo = 0 To .CStep.Count - 1 'Soni / 2016.08.20 StepCount改為CStep.Count
    '                            With .CStep(mStepNo)
    '                                Select Case .StepType
    '                                    Case eStepFunctionType.Circle2D
    '                                        '20170215
    '                                        Dim EndPos(1) As Decimal
    '                                        Dim Center(1) As Decimal
    '                                        Center(0) = NodeBasicX + .Circle2D.CenterPosX
    '                                        Center(1) = NodeBasicY + .Circle2D.CenterPosY
    '                                        EndPos(0) = NodeBasicX + .Circle2D.Middle2PosX
    '                                        EndPos(1) = NodeBasicY + .Circle2D.Middle2PosY
    '                                        Dim mRadius As Decimal = GetDistance(EndPos(0), EndPos(1), Center(0), Center(1))


    '                                        bXz = max(NodeBasicX + .Circle2D.CenterPosX + mRadius, NodeBasicX + .Circle2D.EndPosX + mRadius)
    '                                        mXz = min(NodeBasicX + .Circle2D.CenterPosX - mRadius, NodeBasicX + .Circle2D.EndPosX - mRadius)
    '                                        bYz = max(NodeBasicY + .Circle2D.CenterPosY - mRadius, NodeBasicY + .Circle2D.EndPosY + mRadius)
    '                                        mYz = min(NodeBasicY + .Circle2D.CenterPosY + mRadius, NodeBasicY + .Circle2D.EndPosY - mRadius)
    '                                        'bXz = max(NodeBasicX + .Circle2D.CenterPosX, NodeBasicX + .Circle2D.EndPosX)
    '                                        'mXz = min(NodeBasicX + .Circle2D.CenterPosX, NodeBasicX + .Circle2D.EndPosX)
    '                                        'bYz = max(NodeBasicY + .Circle2D.CenterPosY, NodeBasicY + .Circle2D.EndPosY)
    '                                        'mYz = min(NodeBasicY + .Circle2D.CenterPosY, NodeBasicY + .Circle2D.EndPosY)


    '                                        '20161010
    '                                        If PatternMaxMinOnce = True Then
    '                                            maxX = bXz
    '                                            minX = mXz
    '                                            maxY = bYz
    '                                            minY = mYz
    '                                            PatternMaxMinOnce = False
    '                                        ElseIf PatternMaxMinOnce = False Then
    '                                            maxX = max(maxX, bXz)
    '                                            minX = min(minX, mXz)
    '                                            maxY = max(maxY, bYz)
    '                                            minY = min(minY, mYz)
    '                                        End If

    '                                    Case eStepFunctionType.Arc2D
    '                                        bXz = max(NodeBasicX + .Arc2D.CenterPosX, NodeBasicX + .Arc2D.EndPosX)
    '                                        mXz = min(NodeBasicX + .Arc2D.CenterPosX, NodeBasicX + .Arc2D.EndPosX)
    '                                        bYz = max(NodeBasicY + .Arc2D.CenterPosY, NodeBasicY + .Arc2D.EndPosY)
    '                                        mYz = min(NodeBasicY + .Arc2D.CenterPosY, NodeBasicY + .Arc2D.EndPosY)

    '                                        '20161010
    '                                        If PatternMaxMinOnce = True Then
    '                                            maxX = bXz
    '                                            minX = mXz
    '                                            maxY = bYz
    '                                            minY = mYz
    '                                            PatternMaxMinOnce = False
    '                                        ElseIf PatternMaxMinOnce = False Then
    '                                            maxX = max(maxX, bXz)
    '                                            minX = min(minX, mXz)
    '                                            maxY = max(maxY, bYz)
    '                                            minY = min(minY, mYz)
    '                                        End If

    '                                    Case eStepFunctionType.Dots3D
    '                                        bXz = max(NodeBasicX + .Dots3D.PosX, NodeBasicX + .Dots3D.PosX)
    '                                        mXz = min(NodeBasicX + .Dots3D.PosX, NodeBasicX + .Dots3D.PosX)
    '                                        bYz = max(NodeBasicY + .Dots3D.PosY, NodeBasicY + .Dots3D.PosY)
    '                                        mYz = min(NodeBasicY + .Dots3D.PosY, NodeBasicY + .Dots3D.PosY)

    '                                        '20161010
    '                                        If PatternMaxMinOnce = True Then
    '                                            maxX = bXz
    '                                            minX = mXz
    '                                            maxY = bYz
    '                                            minY = mYz
    '                                            PatternMaxMinOnce = False
    '                                        ElseIf PatternMaxMinOnce = False Then
    '                                            maxX = max(maxX, bXz)
    '                                            minX = min(minX, mXz)
    '                                            maxY = max(maxY, bYz)
    '                                            minY = min(minY, mYz)
    '                                        End If
    '                                    Case eStepFunctionType.Line3D
    '                                        bXz = max(NodeBasicX + .Line3D.StartPosX, NodeBasicX + .Line3D.EndPosX)
    '                                        mXz = min(NodeBasicX + .Line3D.StartPosX, NodeBasicX + .Line3D.EndPosX)
    '                                        bYz = max(NodeBasicY + .Line3D.StartPosY, NodeBasicY + .Line3D.EndPosY)
    '                                        mYz = min(NodeBasicY + .Line3D.StartPosY, NodeBasicY + .Line3D.EndPosY)

    '                                        '20161010
    '                                        If PatternMaxMinOnce = True Then
    '                                            maxX = bXz
    '                                            minX = mXz
    '                                            maxY = bYz
    '                                            minY = mYz
    '                                            PatternMaxMinOnce = False
    '                                        ElseIf PatternMaxMinOnce = False Then
    '                                            maxX = max(maxX, bXz)
    '                                            minX = min(minX, mXz)
    '                                            maxY = max(maxY, bYz)
    '                                            minY = min(minY, mYz)
    '                                        End If
    '                                    Case eStepFunctionType.Circle3D
    '                                        bXz = max(NodeBasicX + .Circle3D.CenterPosX, NodeBasicX + .Circle3D.EndPosX)
    '                                        mXz = min(NodeBasicX + .Circle3D.CenterPosX, NodeBasicX + .Circle3D.EndPosX)
    '                                        bYz = max(NodeBasicY + .Circle3D.CenterPosY, NodeBasicY + .Circle3D.EndPosY)
    '                                        mYz = min(NodeBasicY + .Circle3D.CenterPosY, NodeBasicY + .Circle3D.EndPosY)

    '                                        '20161010
    '                                        If PatternMaxMinOnce = True Then
    '                                            maxX = bXz
    '                                            minX = mXz
    '                                            maxY = bYz
    '                                            minY = mYz
    '                                            PatternMaxMinOnce = False
    '                                        ElseIf PatternMaxMinOnce = False Then
    '                                            maxX = max(maxX, bXz)
    '                                            minX = min(minX, mXz)
    '                                            maxY = max(maxY, bYz)
    '                                            minY = min(minY, mYz)
    '                                        End If
    '                                    Case eStepFunctionType.Arc3D
    '                                        bXz = max(NodeBasicX + .Arc3D.CenterPosX, NodeBasicX + .Arc3D.EndPosX)
    '                                        mXz = min(NodeBasicX + .Arc3D.CenterPosX, NodeBasicX + .Arc3D.EndPosX)
    '                                        bYz = max(NodeBasicY + .Arc3D.CenterPosY, NodeBasicY + .Arc3D.EndPosY)
    '                                        mYz = min(NodeBasicY + .Arc3D.CenterPosY, NodeBasicY + .Arc3D.EndPosY)

    '                                        '20161010
    '                                        If PatternMaxMinOnce = True Then
    '                                            maxX = bXz
    '                                            minX = mXz
    '                                            maxY = bYz
    '                                            minY = mYz
    '                                            PatternMaxMinOnce = False
    '                                        ElseIf PatternMaxMinOnce = False Then
    '                                            maxX = max(maxX, bXz)
    '                                            minX = min(minX, mXz)
    '                                            maxY = max(maxY, bYz)
    '                                            minY = min(minY, mYz)
    '                                        End If
    '                                    Case eStepFunctionType.Move3D
    '                                        bXz = max(.Move3D.EndPosX, .Move3D.EndPosX)
    '                                        mXz = min(.Move3D.EndPosX, .Move3D.EndPosX)
    '                                        bYz = max(.Move3D.EndPosY, .Move3D.EndPosY)
    '                                        mYz = min(.Move3D.EndPosY, .Move3D.EndPosY)

    '                                        '20161010
    '                                        If PatternMaxMinOnce = True Then
    '                                            maxX = bXz
    '                                            minX = mXz
    '                                            maxY = bYz
    '                                            minY = mYz
    '                                            PatternMaxMinOnce = False
    '                                        ElseIf PatternMaxMinOnce = False Then
    '                                            maxX = max(maxX, bXz)
    '                                            minX = min(minX, mXz)
    '                                            maxY = max(maxY, bYz)
    '                                            minY = min(minY, mYz)
    '                                        End If
    '                                End Select
    '                            End With
    '                        Next
    '                    End If
    '                End With
    '            Next
    '        Next
    '    End With

    '    Return True
    'End Function


    Function max(value01 As Double, value02 As Double) As Double
        Dim maxx As Double
        If value01 >= value02 Then
            maxx = value01
        Else
            maxx = value02
        End If
        Return maxx
    End Function

    Function min(value01 As Double, value02 As Double) As Double
        Dim minn As Double
        If value01 >= value02 Then
            minn = value02
        Else
            minn = value01
        End If
        Return minn
    End Function

    ''' <summary>找Pattern的最大最小範圍</summary>
    ''' <param name="minX"></param>
    ''' <param name="minY"></param>
    ''' <param name="maxX"></param>
    ''' <param name="maxY"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Function FindPatternMaxMinOffset(ByRef minX As Decimal, ByRef minY As Decimal, ByRef maxX As Decimal, ByRef maxY As Decimal, ByVal sys As sSysParam) As Boolean
        If gCRecipe Is Nothing Then
            minX = 0
            minY = 0
            maxX = 0
            maxY = 0
            Return False
        End If
        If gCRecipe.Pattern Is Nothing Then
            minX = 0
            minY = 0
            maxX = 0
            maxY = 0
            Return False
        End If

        minX = Decimal.MaxValue
        minY = Decimal.MaxValue
        maxX = Decimal.MinValue
        maxY = Decimal.MinValue

        '無步驟預設值
        If gCRecipe.Pattern.Count = 0 Then
            minX = 0
            minY = 0
            maxX = 10
            maxY = 10
            Return False
        End If
        '無步驟預設值


        If sys.StageNo < 0 Then
            minX = 0
            minY = 0
            maxX = 10
            maxY = 10
            Return False
        End If
        If sys.StageNo >= gCRecipe.StageNodeID.Count Then
            minX = 0
            minY = 0
            maxX = 10
            maxY = 10
            Return False
        End If

        Dim mPatternName As String

        If gCRecipe.StageNodeID(sys.StageNo) = "" Then '找不到開頭
            minX = 0
            minY = 0
            maxX = 10
            maxY = 10
            Return False
        End If
        If Not gCRecipe.Node(sys.StageNo).ContainsKey(gCRecipe.StageNodeID(sys.StageNo)) Then
            minX = 0
            minY = 0
            maxX = 10
            maxY = 10
            Return False
        End If

        mPatternName = gCRecipe.Node(sys.StageNo)(gCRecipe.StageNodeID(sys.StageNo)).PatternName
        If mPatternName = "" Then '找不到開頭
            minX = 0
            minY = 0
            maxX = 10
            maxY = 10
            Return False
        End If
        If Not gCRecipe.Pattern.ContainsKey(mPatternName) Then
            minX = 0
            minY = 0
            maxX = 10
            maxY = 10
            Return False
        End If
        If gCRecipe.Pattern(mPatternName).Round.Count = 0 Then
            minX = 0
            minY = 0
            maxX = 10
            maxY = 10
            Return False
        End If

        '無步驟預設值
        If gCRecipe.Pattern(mPatternName).Round(0).CStep.Count = 0 Then
            minX = 0
            minY = 0
            maxX = 10
            maxY = 10
            Return False
        End If
        '無步驟預設值

        For mRoundNo As Integer = 0 To gCRecipe.Pattern(mPatternName).Round.Count - 1
            For mStepNo As Integer = 0 To gCRecipe.Pattern(mPatternName).Round(mRoundNo).CStep.Count - 1
                With gCRecipe.Pattern(mPatternName).Round(mRoundNo).CStep(mStepNo)
                    Select Case .StepType
                        Case eStepFunctionType.Circle3D
                            Dim radius As Decimal = GetDistance(.Circle3D.EndPosX, .Circle3D.EndPosY, .Circle3D.CenterPosX, .Circle3D.CenterPosY) '找半徑
                            CompareMaxMin(.Circle3D.CenterPosX - radius, .Circle3D.CenterPosY - radius, maxX, minX, maxY, minY) '比大小更新最大最小值
                            CompareMaxMin(.Circle3D.CenterPosX + radius, .Circle3D.CenterPosY + radius, maxX, minX, maxY, minY) '比大小更新最大最小值

                        Case eStepFunctionType.Arc3D
                            Dim StartPos(1) As Decimal
                            Dim EndPos(1) As Decimal
                            Dim Center(1) As Decimal
                            StartPos(0) = .Arc3D.StartPosX
                            StartPos(1) = .Arc3D.StartPosY
                            EndPos(0) = .Arc3D.EndPosX
                            EndPos(1) = .Arc3D.EndPosY
                            If gCRecipe.Pattern(mPatternName).Round(mRoundNo).CStep(mStepNo).Arc3D.Angle >= 0 Then
                                CenterCalculate(StartPos, EndPos, Math.Abs(gCRecipe.Pattern(mPatternName).Round(mRoundNo).CStep(mStepNo).Arc3D.Angle), Center, 0)
                            Else
                                CenterCalculate(StartPos, EndPos, Math.Abs(gCRecipe.Pattern(mPatternName).Round(mRoundNo).CStep(mStepNo).Arc3D.Angle), Center, 1)
                            End If

                            Dim mRadius As Decimal = GetDistance(StartPos(0), StartPos(1), Center(0), Center(1))
                            CompareMaxMin(Center(0) - mRadius, Center(1) - mRadius, maxX, minX, maxY, minY)
                            CompareMaxMin(Center(0) + mRadius, Center(1) + mRadius, maxX, minX, maxY, minY)

                        Case Else
                            CompareMaxMin(.Line3D.StartPosX, .Line3D.StartPosY, maxX, minX, maxY, minY)
                            CompareMaxMin(.Line3D.EndPosX, .Line3D.StartPosY, maxX, minX, maxY, minY)

                    End Select
                End With


            Next
        Next



        Return True
    End Function

    '    ''' <summary>
    '    ''' 描繪出劃膠示意圖(單一顆)  限定只能在主畫面做繪圖
    '    ''' </summary>
    '    ''' <param name="index">繪製參考索引</param>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public Function DrawGraphicsMultiDeviceForDieState(ByVal sys As sSysParam, ByVal index As sLevelIndexCollection) As Boolean

    '        Dim mDraw As Graphics
    '        Dim mPen As New Pen(Color.Black)
    '        Dim mBrush As New Drawing.SolidBrush(Color.DimGray)
    '        Dim mBitmap As Bitmap
    '        Dim mDrawing As New Drawing.Point
    '        Dim mFont As Font


    '        Dim GraphicsPictureBox As PictureBox
    '        Dim mGraphicsStartX As Decimal                           '轉換成畫布大小StartX
    '        Dim mGraphicsStartY As Decimal                           '轉換成畫布大小StartY
    '        Dim mGraphicsWidth As Decimal                            '轉換成畫布大小Width
    '        Dim mGraphicsHeight As Decimal                           '轉換成畫布大小Height
    '        Dim mGraphicsXAxisPitch As Decimal                       '轉換成畫布大小XAxisPitch


    '        GraphicsPictureBox = frmOperator.UcWaferMapA.PictureBox1 ' gfrmOpStatus.picRecipeGraph

    '        mBitmap = GraphicsPictureBox.Image

    '        If index.PatternName Is Nothing Then 'Soni + 2016.09.16 PatternName不存在...
    '            GraphicsPictureBox.Image = mBitmap
    '            Return False
    '        End If
    '        If Not gCRecipe.Node(sys.StageNo).ContainsKey(index.PatternName) Then 'Soni + 2016.09.16 PatternName不存在...
    '            GraphicsPictureBox.Image = mBitmap
    '            Return False
    '        End If

    '        If mBitmap Is Nothing Then
    '            mBitmap = New Bitmap(CInt(GraphicsPictureBox.Width), CInt(GraphicsPictureBox.Height))
    '        End If

    '        mDraw = Graphics.FromImage(mBitmap)
    '        'mDraw.Clear(Color.AliceBlue)

    '        '[說明]:畫外框(chuck大小)
    '        With mPen
    '            .Width = 3
    '            .DashStyle = Drawing2D.DashStyle.Solid
    '        End With

    '        Dim StartPosX As Decimal '起點顆
    '        Dim StartPosY As Decimal '起點顆
    '        Dim startIdx As New sLevelIndexCollection
    '        startIdx.PatternName = index.PatternName
    '        startIdx.Xf = 0
    '        startIdx.Yf = 0
    '        Call GetCCDScanPos(sys, startIdx, StartPosX, StartPosY, enmAlignType.DevicePos1)
    '        Dim maxIndex As New sLevelIndexCollection
    '        maxIndex.PatternName = index.PatternName
    '        Dim mMultiArrayAdapter = New CMultiArrayAdapter(gCRecipe.Node(sys.StageNo)(index.PatternName).Array)
    '        maxIndex.Xf = mMultiArrayAdapter.GetMemoryCountX() - 1
    '        maxIndex.Yf = mMultiArrayAdapter.GetMemoryCountY() - 1

    '        Dim endPosX As Decimal '最末端顆起點
    '        Dim endPosY As Decimal '最末端顆起點
    '        Call GetCCDScanPos(sys, maxIndex, endPosX, endPosY, enmAlignType.DevicePos1)
    '        Dim MinX As Decimal
    '        Dim MinY As Decimal
    '        Dim MaxX As Decimal
    '        Dim MaxY As Decimal
    '        Dim PatternX As Decimal
    '        Dim PatternY As Decimal

    '        Call FindPatternMaxMinOffset(MinX, MinY, MaxX, MaxY, sys) '取得Pattern極限範圍
    '        PatternX = Math.Abs(MaxX - MinX)
    '        PatternY = Math.Abs(MaxY - MinY)
    '        If PatternX > PatternY Then
    '            PatternY = PatternX
    '        Else
    '            PatternX = PatternY
    '        End If

    '        Dim TotalDistanceX As Decimal '總距離X
    '        Dim TotalDistanceY As Decimal '總距離Y
    '        TotalDistanceX = Math.Abs(endPosX - StartPosX) + 2 * PatternX
    '        TotalDistanceY = Math.Abs(endPosY - StartPosY) + 2 * PatternY
    '        Dim scaleX As Decimal
    '        Dim scaleY As Decimal
    '        Dim boardX As Decimal = 25
    '        Dim boardY As Decimal = 25
    '        If TotalDistanceX <> 0 Then
    '            scaleX = (GraphicsPictureBox.Width - 2 * boardX) / TotalDistanceX
    '        Else
    '            scaleX = 1
    '        End If
    '        If TotalDistanceY <> 0 Then
    '            scaleY = (GraphicsPictureBox.Height - 2 * boardY) / TotalDistanceY
    '        Else
    '            scaleY = 1
    '        End If
    '        '[說明]:畫Recipe圖形  先轉換成畫布Size再描畫圖形
    '        With mPen
    '            .Width = 2
    '            .DashStyle = Drawing2D.DashStyle.Solid
    '            .Color = Color.White
    '        End With
    '        mBrush.Color = Color.White
    '        mPen.Width = 2

    '        mGraphicsWidth = Math.Abs(MaxX - MinX) * scaleX
    '        mGraphicsHeight = Math.Abs(MaxY - MinY) * scaleY
    '        If mGraphicsWidth = 0 Then mGraphicsWidth = 25
    '        If mGraphicsHeight = 0 Then mGraphicsHeight = 25

    '        '[說明]:
    '        With gStageMap(sys.StageNo).Node(index.NodeName).ChipState(index.Xf, index.Yf)
    '            Select Case .DieState
    '                Case enmDieState.OK
    '                    Select Case .enmDispenserState
    '                        Case enmDispenserState.Done
    '                            Select Case .enmDieDetectState
    '                                Case enmDieDetectState.None, enmDieDetectState.OK
    '                                    mPen.Color = Color.Green
    '                                    mBrush.Color = Color.Green

    '                                Case enmDieDetectState.NG
    '                                    mPen.Color = Color.Red
    '                                    mBrush.Color = Color.Red

    '                            End Select

    '                        Case enmDispenserState.None
    '                            mPen.Color = Color.White
    '                            mBrush.Color = Color.White

    '                    End Select

    '                Case enmDieState.NG
    '                    mPen.Color = Color.Red
    '                    mBrush.Color = Color.Red

    '                Case enmDieState.NoDie
    '                    mPen.Color = Color.Yellow
    '                    mBrush.Color = Color.Yellow

    '                Case enmDieState.None
    '                    mPen.Color = Color.White
    '                    mBrush.Color = Color.White

    '            End Select
    '        End With

    '        Dim posX As Decimal, posY As Decimal
    '        '[說明]:

    '        Select Case gSSystemParameter.MachineType
    '            Case enmMachineType.eDTS300A, enmMachineType.eDTS330A 'DrawGraphics
    '                If GetChuckStatus(index.Xf, index.Yf, sys) = True Then
    '                    mBrush.Color = Color.Green
    '                Else
    '                    mBrush.Color = Color.White
    '                End If
    '                Call GetCCDScanPos(sys, index, posX, posY, enmAlignType.DevicePos1) '取得座標
    '                mGraphicsStartX = (posX - StartPosX) * scaleX + boardX
    '                mGraphicsStartY = GraphicsPictureBox.Height + (posY - StartPosY) * scaleY - mGraphicsHeight - boardY
    '                mDraw.FillRectangle(mBrush, CInt(mGraphicsStartX), CInt(mGraphicsStartY), CInt(mGraphicsWidth), CInt(mGraphicsHeight))

    '        End Select

    '        mDrawing.X = mGraphicsStartX
    '        mDrawing.Y = mGraphicsStartY
    '        mFont = New Font("", 9)

    '        If mGraphicsWidth > 100 Then
    '            mDraw.DrawString("FS: " & gStageMap(sys.StageNo).Node(index.NodeName).ChipState(index.Xf, index.Yf).intFixSimilar.ToString & "%", mFont, Brushes.Black, mDrawing)
    '        Else
    '            mDraw.DrawString(gStageMap(sys.StageNo).Node(index.NodeName).ChipState(index.Xf, index.Yf).intFixSimilar.ToString & "%", mFont, Brushes.Black, mDrawing)
    '        End If

    '        mDrawing.X = mGraphicsStartX
    '        mDrawing.Y = mGraphicsStartY + CInt(mGraphicsHeight / 2)
    '        If mGraphicsXAxisPitch > 100 Then
    '            mDraw.DrawString("C: " & gStageMap(sys.StageNo).Node(index.NodeName).ChipState(index.Xf, index.Yf).intGlueCoverRate.ToString & "%", mFont, Brushes.Black, mDrawing)
    '        Else
    '            mDraw.DrawString(gStageMap(sys.StageNo).Node(index.NodeName).ChipState(index.Xf, index.Yf).intGlueCoverRate.ToString & "%", mFont, Brushes.Black, mDrawing)
    '        End If



    '        GraphicsPictureBox.Image = mBitmap

    '        Return True

    'ErrorHandler:

    '        If Err.Number <> 0 Then  ' No error. Do nothing.
    '            Err.Clear()         '清除錯誤資訊
    '        End If

    '        Return False
    '    End Function

    ''' <summary>繪製座標系</summary>
    ''' <param name="draw"></param>
    ''' <remarks></remarks>
    Public Sub DrawCoord(ByRef draw As Graphics, ByVal Width As Decimal, ByVal Height As Decimal)
        Dim bluePen As New Pen(Brushes.Blue, 3)
        Dim GreenPen As New Pen(Brushes.Green, 3)
        Dim RedPen As New Pen(Brushes.Red, 3)
        Select Case gSSystemParameter.CoordType
            Case enmCoordinateRelationType.eGN2
                'TH
                draw.DrawArc(RedPen, 0, 0, 30, 30, 0, 90)
                draw.DrawString("Th", New Font("Arial", 12), Brushes.Red, 25, 25)
                draw.DrawLine(RedPen, 8, 28, 15, 35)
                draw.DrawLine(RedPen, 8, 32, 15, 25)

                '藍色箭頭向右
                draw.DrawLine(bluePen, 10, 10, 35, 10)
                draw.DrawLine(bluePen, 37, 12, 30, 5)
                draw.DrawLine(bluePen, 37, 8, 30, 15)
                draw.DrawString("X", New Font("Arial", 12), Brushes.Blue, 37, 2)
                '綠色箭頭向下
                draw.DrawLine(GreenPen, 10, 10, 10, 35)
                draw.DrawLine(GreenPen, 12, 37, 5, 30)
                draw.DrawLine(GreenPen, 8, 37, 15, 30)
                draw.DrawString("Y", New Font("Arial", 12), Brushes.Green, 2, 37)
            Case enmCoordinateRelationType.eDTS
                'TH
                draw.DrawArc(RedPen, 0, CSng(Height) - 30, 30, 30, 0, -90)
                draw.DrawString("C", New Font("Arial", 12), Brushes.Red, 15, CSng(Height) - 45)
                draw.DrawLine(RedPen, 8, CSng(Height) - 28, 15, CSng(Height) - 35)
                draw.DrawLine(RedPen, 8, CSng(Height) - 32, 15, CSng(Height) - 25)

                '藍色箭頭向右
                draw.DrawLine(bluePen, 10, CSng(Height) - 10, 35, CSng(Height) - 10)
                draw.DrawLine(bluePen, 37, CSng(Height) - 12, 30, CSng(Height) - 5)
                draw.DrawLine(bluePen, 37, CSng(Height) - 8, 30, CSng(Height) - 15)
                draw.DrawString("X", New Font("Arial", 12), Brushes.Blue, 37, CSng(Height) - 28)

                '綠色箭頭向上
                draw.DrawLine(GreenPen, 10, CSng(Height) - 10, 10, CSng(Height) - 35)
                draw.DrawLine(GreenPen, 12, CSng(Height) - 37, 5, CSng(Height) - 30)
                draw.DrawLine(GreenPen, 8, CSng(Height) - 37, 15, CSng(Height) - 30)
                draw.DrawString("Y", New Font("Arial", 12), Brushes.Green, 2, CSng(Height) - 57)
        End Select

    End Sub
  
    
    '20170215
    Public Function DrawSingleStepGraphicsTest(ByVal patternID As String, ByVal RoundNo As Integer, ByVal StepNo As Integer, ByVal GraphicsPictureBox As PictureBox, ByVal sys As sSysParam, ByVal index As sLevelIndexCollection) As Boolean
        Dim mRoundNo As Integer
        Dim mStepNo As Integer
        Dim mDraw As Graphics
        Dim mPen As New Pen(Color.Black)
        Dim mBrush As New Drawing.SolidBrush(Color.Black)
        Dim mBitmap As Bitmap
        Dim mScaleHeight As Decimal                              '轉換成畫布大小的Scale
        Dim mScaleWidth As Decimal                               '轉換成畫布大小的Scale
        Dim mGraphicsStartX As Decimal                           '轉換成畫布大小StartX
        Dim mGraphicsStartY As Decimal                           '轉換成畫布大小StartY
        Dim mGraphicsEndX As Decimal                             '轉換成畫布大小EndX
        Dim mGraphicsEndY As Decimal                             '轉換成畫布大小EndY
        Dim mGraphicsWidth As Decimal                            '轉換成畫布大小Width
        Dim mGraphicsHeight As Decimal                           '轉換成畫布大小Height
        Dim mGraphicsRadius As Decimal                           '轉換成畫布大小Radius
        Dim mGraphicsAngle As Decimal                            '轉換成畫布大小Angle
        Dim mShiftX As Decimal
        Dim mShiftY As Decimal
        Dim mPointSize As Integer                                 '單點的大小


        mBitmap = GraphicsPictureBox.Image

        If mBitmap Is Nothing Then
            mBitmap = New Bitmap(CInt(GraphicsPictureBox.Width), CInt(GraphicsPictureBox.Height))
        End If

        mDraw = Graphics.FromImage(mBitmap)

        'mShiftX = 0
        'mShiftY = 0
        'mScaleWidth = GraphicsPictureBox.Width / 16
        'mScaleHeight = GraphicsPictureBox.Height / 16
        'mPointSize = CInt(GraphicsPictureBox.Width / 100) '繪點大小

        '--- Soni + 2014.10.30 圖型過大時自動調整比例 ---
        Dim maxPosX As Decimal, maxPosY As Decimal, minPosX As Decimal, minPosY As Decimal
        'FindPatternMaxMinOffset(minPosX, minPosY, maxPosX, maxPosY, sys) '找最大最小點
        FindPatternMaxMinTest(minPosX, minPosY, maxPosX, maxPosY, sys, index) '找最大最小點   20161102

        '--- 增加邊界空白 ---
        maxPosX += 3
        maxPosY += 3
        minPosX -= 3
        minPosY -= 3
        '--- 增加邊界空白 ---


        '[說明]:換算比例大小
        GetDrawShiftScale(GraphicsPictureBox, maxPosX, minPosX, maxPosY, minPosY, mShiftX, mShiftY, mScaleWidth, mScaleHeight, mPointSize) 'Soni / 2016.12.07
        'mShiftX = 6.5
        'mShiftY = 6.5
        'mScaleWidth = GraphicsPictureBox.Width / 13
        'mScaleHeight = GraphicsPictureBox.Height / 13
        'mPointSize = CInt(GraphicsPictureBox.Width / 100) '繪點大小

        'If maxPosX * mScaleWidth > GraphicsPictureBox.Width / 4 Then '任一邊過界則調整顯示比例
        '    mScaleWidth = 0.25 * GraphicsPictureBox.Width / maxPosX
        '    mScaleHeight = mScaleWidth
        '    mShiftX = GraphicsPictureBox.Width * 0.5 / mScaleWidth
        '    mShiftY = GraphicsPictureBox.Height * 0.5 / mScaleHeight
        'End If
        'If -minPosX * mScaleWidth > GraphicsPictureBox.Width / 4 Then '任一邊過界則調整顯示比例
        '    mScaleWidth = -0.25 * GraphicsPictureBox.Width / minPosX
        '    mScaleHeight = mScaleWidth
        '    mShiftX = GraphicsPictureBox.Width * 0.5 / mScaleWidth
        '    mShiftY = GraphicsPictureBox.Height * 0.5 / mScaleHeight
        'End If
        'If maxPosY * mScaleHeight > GraphicsPictureBox.Height / 4 Then '任一邊過界則調整顯示比例
        '    mScaleHeight = 0.25 * GraphicsPictureBox.Height / maxPosY
        '    mScaleWidth = mScaleHeight
        '    mShiftX = GraphicsPictureBox.Width * 0.5 / mScaleWidth
        '    mShiftY = GraphicsPictureBox.Height * 0.5 / mScaleHeight
        'End If
        'If -minPosY * mScaleHeight > GraphicsPictureBox.Height / 4 Then '任一邊過界則調整顯示比例
        '    mScaleHeight = -0.25 * GraphicsPictureBox.Height / minPosY
        '    mScaleWidth = mScaleHeight
        '    mShiftX = GraphicsPictureBox.Width * 0.5 / mScaleWidth
        '    mShiftY = GraphicsPictureBox.Height * 0.5 / mScaleHeight
        'End If
        '--- Soni + 2014.10.30 圖型過大時自動調整比例 ---

        If index.PatternName = "" Then 'Pattern名稱不存在
            DrawCoord(mDraw, GraphicsPictureBox.Width, GraphicsPictureBox.Height)
            GraphicsPictureBox.Image = mBitmap
            Return True
        End If

        '=== Soni + 2016.09.09 Copy from DrawSingleGraphics ===
        If Not gCRecipe.Pattern.ContainsKey(index.PatternName) Then 'Pattern清單內不存在指定名稱
            DrawCoord(mDraw, GraphicsPictureBox.Width, GraphicsPictureBox.Height)
            GraphicsPictureBox.Image = mBitmap
            Return True
        End If
        If gCRecipe.Pattern(index.PatternName).Round.Count = 0 Then '數量為零不繪製
            DrawCoord(mDraw, GraphicsPictureBox.Width, GraphicsPictureBox.Height)
            GraphicsPictureBox.Image = mBitmap
            Return True
        End If
        '=== Soni + 2016.09.09 Copy from DrawSingleGraphics ===

        '[說明]:畫Recipe圖形  先轉換成畫布Size再描畫圖形
        With mPen
            .Width = GraphicsPictureBox.Width / 500
            .DashStyle = Drawing2D.DashStyle.Solid
            .Color = Color.Red
        End With

        mBrush.Color = Color.Red
        Dim mNodeID As String

        For i As Integer = index.StageNo To index.StageNo
            For j As Integer = 0 To gCRecipe.Node(i).Keys.Count - 1
                mNodeID = gCRecipe.Node(i).Keys(j)
                Dim Name As String = gCRecipe.Node(i)(mNodeID).PatternName
                Dim NodeBasicX As Decimal = gCRecipe.Node(i)(mNodeID).ConveyorPos(sys.ConveyorNo).BasicPositionX
                Dim NodeBasicY As Decimal = gCRecipe.Node(i)(mNodeID).ConveyorPos(sys.ConveyorNo).BasicPositionY

                With gCRecipe
                    For mRoundNo = 0 To .Pattern(index.PatternName).Round.Count - 1
                        Dim num As Integer = .Pattern(index.PatternName).Round.Count
                        With .Pattern(index.PatternName).Round(mRoundNo)
                            If .StepCount > 0 Then
                                For mStepNo = 0 To .StepCount - 1   '20160907
                                    '20170215
                                    If mStepNo = StepNo And mRoundNo = RoundNo And index.path = mNodeID Then
                                        With .CStep(mStepNo)
                                            Select Case .StepType
                                                Case eStepFunctionType.Dots3D '點
                                                    Select Case gSSystemParameter.CoordType
                                                        Case enmCoordinateRelationType.eGN2
                                                            mGraphicsStartX = (NodeBasicX + .Dots3D.PosX + mShiftX) * mScaleWidth - mPointSize * 0.5
                                                            mGraphicsStartY = (NodeBasicY + .Dots3D.PosY + mShiftY) * mScaleHeight - mPointSize * 0.5
                                                        Case enmCoordinateRelationType.eDTS
                                                            mGraphicsEndX = (NodeBasicX + .Dots3D.PosX + mShiftX) * mScaleWidth - mPointSize * 0.5
                                                            mGraphicsEndY = GraphicsPictureBox.Height - (NodeBasicY + .Dots3D.PosY + mShiftY) * mScaleHeight - mPointSize * 0.5
                                                    End Select

                                                    mDraw.FillEllipse(mBrush, CInt(mGraphicsEndX), CInt(mGraphicsEndY), mPointSize, mPointSize)
                                                Case eStepFunctionType.Move3D
                                                    Select Case gSSystemParameter.CoordType
                                                        Case enmCoordinateRelationType.eGN2
                                                            mGraphicsEndX = (NodeBasicX + .Move3D.EndPosX + mShiftX) * mScaleWidth - mPointSize * 0.5
                                                            mGraphicsEndY = (NodeBasicY + .Move3D.EndPosY + mShiftY) * mScaleHeight - mPointSize * 0.5
                                                        Case enmCoordinateRelationType.eDTS
                                                            mGraphicsEndX = (NodeBasicX + .Move3D.EndPosX + mShiftX) * mScaleWidth - mPointSize * 0.5
                                                            mGraphicsEndY = GraphicsPictureBox.Height - (NodeBasicY + .Move3D.EndPosY + mShiftY) * mScaleHeight - mPointSize * 0.5
                                                    End Select

                                                    mDraw.FillEllipse(mBrush, CInt(mGraphicsEndX), CInt(mGraphicsEndY), mPointSize, mPointSize)

                                                Case eStepFunctionType.Line3D
                                                    Select Case gSSystemParameter.CoordType
                                                        Case enmCoordinateRelationType.eGN2
                                                            mGraphicsStartX = (NodeBasicX + .Line3D.StartPosX + mShiftX) * mScaleWidth
                                                            mGraphicsStartY = (NodeBasicY + .Line3D.StartPosY + mShiftY) * mScaleHeight
                                                            mGraphicsEndX = (NodeBasicX + .Line3D.EndPosX + mShiftX) * mScaleWidth
                                                            mGraphicsEndY = (NodeBasicY + .Line3D.EndPosY + mShiftY) * mScaleHeight
                                                        Case enmCoordinateRelationType.eDTS
                                                            mGraphicsStartX = (NodeBasicX + .Line3D.StartPosX + mShiftX) * mScaleWidth
                                                            mGraphicsStartY = GraphicsPictureBox.Height - (NodeBasicY + .Line3D.StartPosY + mShiftY) * mScaleHeight
                                                            mGraphicsEndX = (NodeBasicX + .Line3D.EndPosX + mShiftX) * mScaleWidth
                                                            mGraphicsEndY = GraphicsPictureBox.Height - (NodeBasicY + .Line3D.EndPosY + mShiftY) * mScaleHeight
                                                    End Select

                                                    If mGraphicsStartY = mGraphicsEndY And mGraphicsStartX = mGraphicsEndX Then '共點
                                                        'Jeffadd
                                                        mDraw.FillEllipse(mBrush, CInt(mGraphicsStartX - mPointSize / 2), CInt(mGraphicsStartY - mPointSize / 2), mPointSize, mPointSize)
                                                    Else
                                                        mDraw.DrawLine(mPen, CInt(mGraphicsStartX), CInt(mGraphicsStartY), CInt(mGraphicsEndX), CInt(mGraphicsEndY))
                                                    End If
                                                    '20160805
                                                Case eStepFunctionType.Circle2D '圓
                                                    Dim EndPos(1) As Decimal
                                                    Dim Center(1) As Decimal
                                                    Center(0) = NodeBasicX + .Circle2D.CenterPosX
                                                    Center(1) = NodeBasicY + .Circle2D.CenterPosY
                                                    EndPos(0) = NodeBasicX + .Circle2D.Middle2PosX
                                                    EndPos(1) = NodeBasicY + .Circle2D.Middle2PosY
                                                    If Center(0) = EndPos(0) And Center(1) = EndPos(1) Then
                                                    Else
                                                        Dim mRadius As Decimal = GetDistance(EndPos(0), EndPos(1), Center(0), Center(1))
                                                        Select Case gSSystemParameter.CoordType
                                                            Case enmCoordinateRelationType.eGN2
                                                                mGraphicsStartX = (Center(0) + mShiftX - mRadius) * mScaleWidth
                                                                mGraphicsStartY = GraphicsPictureBox.Height - (Center(1) + mShiftY + mRadius) * mScaleHeight
                                                            Case enmCoordinateRelationType.eDTS
                                                                mGraphicsStartX = (Center(0) + mShiftX - mRadius) * mScaleWidth
                                                                mGraphicsStartY = GraphicsPictureBox.Height - (Center(1) + mShiftY + mRadius) * mScaleHeight
                                                        End Select
                                                        mGraphicsHeight = mRadius * 2 * mScaleHeight
                                                        mGraphicsWidth = mRadius * 2 * mScaleWidth
                                                        mDraw.DrawArc(mPen, CInt(mGraphicsStartX), CInt(mGraphicsStartY), CInt(mGraphicsWidth), CInt(mGraphicsHeight), 0, 360)
                                                    End If

                                                    'DrawArc
                                                    'Pen()
                                                    'Pen，決定弧形的色彩、寬度和樣式。
                                                    'rect()
                                                    'RectangleF 結構，定義橢圓形的邊界。
                                                    'startAngle()
                                                    '以度為單位，依順時針方向測量之從 X 軸到弧形開始點的角度。
                                                    'sweepAngle()
                                                    '以度為單位，依順時針方向測量之從 startAngle 參數到弧形結束點的角度。
                                                    '20160805
                                                Case eStepFunctionType.Arc2D
                                                    Dim AngleX As Double = .Arc2D.Angle
                                                    Dim StartPos(1) As Decimal
                                                    Dim EndPos(1) As Decimal
                                                    Dim Center(1) As Decimal
                                                    Dim CenterF(1) As Decimal

                                                    StartPos(0) = NodeBasicX + .Arc2D.StartPosX
                                                    StartPos(1) = NodeBasicY + .Arc2D.StartPosY
                                                    EndPos(0) = NodeBasicX + .Arc2D.EndPosX
                                                    EndPos(1) = NodeBasicY + .Arc2D.EndPosY

                                                    Dim Circle As Circle
                                                    Dim x, y, z As CPoint
                                                    'Jeffadd 20160615
                                                    x = New CPoint(Val(NodeBasicX + .Arc2D.StartPosX), Val(NodeBasicY + .Arc2D.StartPosY))
                                                    y = New CPoint(Val(NodeBasicX + .Arc2D.MiddlePosX), Val(NodeBasicY + .Arc2D.MiddlePosY))
                                                    z = New CPoint(Val(NodeBasicX + .Arc2D.EndPosX), Val(NodeBasicY + .Arc2D.EndPosY))

                                                    '[說明]:計算Arc圓心座標
                                                    Circle = CMath.GetCircleby3Point(x, y, z)

                                                    Center(0) = Circle.PointX
                                                    Center(1) = Circle.PointY

                                                    Dim mRadius As Decimal = GetDistance(StartPos(0), StartPos(1), Center(0), Center(1))

                                                    mGraphicsStartX = (Center(0) + mShiftX - mRadius) * mScaleWidth
                                                    mGraphicsStartY = GraphicsPictureBox.Height - (Center(1) + mShiftY + mRadius) * mScaleHeight

                                                    mGraphicsHeight = mRadius * 2 * mScaleHeight
                                                    mGraphicsWidth = mRadius * 2 * mScaleWidth

                                                    '起始值
                                                    '  Dim StartAngle As Integer = CInt(GetAngleJeffTest(StartPos(0), StartPos(1), Center(0), Center(1)))

                                                    Dim StartAngle As Integer = CInt(GetAngleJeffTest(Center(0), Center(1), StartPos(0), StartPos(1)))
                                                    Dim StartAngleTest As Integer
                                                    Dim EndAngleTest As Integer
                                                    StartAngleTest = -StartAngle
                                                    'If StartAngle > 0 Then
                                                    '    'StartAngleTest = 180 - StartAngle
                                                    '    StartAngleTest = -StartAngle
                                                    'Else
                                                    '    StartAngleTest = -(StartAngle) '+ 180
                                                    'End If

                                                    Circle.clockwise = Not Circle.clockwise


                                                    If Circle.clockwise = True Then
                                                        EndAngleTest = -Circle.Angle
                                                    ElseIf Circle.clockwise = False Then
                                                        '    'Dim Middle As Integer
                                                        '    'EndAngleTest = StartAngleTest - Circle.Angle
                                                        '    'Middle = EndAngleTest
                                                        '    'StartAngleTest = Middle

                                                        EndAngleTest = Circle.Angle
                                                    End If


                                                    '結束值
                                                    mDraw.DrawArc(mPen, CInt(mGraphicsStartX), CInt(mGraphicsStartY), CInt(mGraphicsWidth), CInt(mGraphicsHeight), StartAngleTest, EndAngleTest)
                                                    '  mDraw.DrawArc(mPen, CInt(mGraphicsStartX), CInt(mGraphicsStartY), CInt(mGraphicsWidth), CInt(mGraphicsHeight), CInt(StartAngle), CInt(Circle.Angle))
                                                Case eStepFunctionType.Circle3D
                                                    Dim EndPos(1) As Decimal
                                                    Dim Center(1) As Decimal
                                                    Center(0) = NodeBasicX + .Circle3D.CenterPosX
                                                    Center(1) = NodeBasicY + .Circle3D.CenterPosY
                                                    EndPos(0) = NodeBasicX + .Circle3D.EndPosX
                                                    EndPos(1) = NodeBasicY + .Circle3D.EndPosY
                                                    If Center(0) = EndPos(0) And Center(1) = EndPos(1) Then
                                                    Else
                                                        Dim mRadius As Decimal = GetDistance(EndPos(0), EndPos(1), Center(0), Center(1))
                                                        Select Case gSSystemParameter.CoordType
                                                            Case enmCoordinateRelationType.eGN2
                                                                mGraphicsStartX = (Center(0) + mShiftX - mRadius) * mScaleWidth
                                                                mGraphicsStartY = GraphicsPictureBox.Height - (Center(1) + mShiftY - mRadius) * mScaleHeight
                                                            Case enmCoordinateRelationType.eDTS
                                                                mGraphicsStartX = (Center(0) + mShiftX - mRadius) * mScaleWidth
                                                                mGraphicsStartY = GraphicsPictureBox.Height - (Center(1) + mShiftY + mRadius) * mScaleHeight
                                                        End Select
                                                        mGraphicsHeight = mRadius * 2 * mScaleHeight
                                                        mGraphicsWidth = mRadius * 2 * mScaleWidth
                                                        mDraw.DrawArc(mPen, CInt(mGraphicsStartX), CInt(mGraphicsStartY), CInt(mGraphicsWidth), CInt(mGraphicsHeight), 0, 360)
                                                    End If

                                                Case eStepFunctionType.Arc3D

                                                    '[說明]:配合劃膠之角度轉換 實際劃膠起始點為180(-1,0)順時針 
                                                    '描繪的圖形起始點為0(1,0)順時針 起始點為矩形的為左上角之座標
                                                    '(StartX,StartY)定義為圓心之座標
                                                    If .Arc3D.Angle >= 180 Then
                                                        mGraphicsAngle = (.Arc3D.Angle + 180) Mod 360 + 180
                                                    Else
                                                        mGraphicsAngle = (.Arc3D.Angle + 180) Mod 360 - 180
                                                    End If

                                                    Dim StartPos(1) As Decimal
                                                    Dim EndPos(1) As Decimal
                                                    Dim Center(1) As Decimal

                                                    StartPos(0) = NodeBasicX + .Arc3D.StartPosX
                                                    StartPos(1) = NodeBasicY + .Arc3D.StartPosY
                                                    EndPos(0) = NodeBasicX + .Arc3D.EndPosX
                                                    EndPos(1) = NodeBasicY + .Arc3D.EndPosY
                                                    If StartPos(0) = EndPos(0) And StartPos(1) = EndPos(1) Then
                                                    Else
                                                        '計算原點座標(圓心) 正向和反向 利用向量計算
                                                        If gCRecipe.Pattern(index.PatternName).Round(mRoundNo).CStep(mStepNo).Arc3D.Angle >= 0 Then
                                                            CenterCalculate(StartPos, EndPos, Math.Abs(gCRecipe.Pattern(index.PatternName).Round(mRoundNo).CStep(mStepNo).Arc3D.Angle), Center, 0)
                                                        Else
                                                            CenterCalculate(StartPos, EndPos, Math.Abs(gCRecipe.Pattern(index.PatternName).Round(mRoundNo).CStep(mStepNo).Arc3D.Angle), Center, 1)
                                                        End If

                                                        Dim mRadius As Decimal = GetDistance(StartPos(0), StartPos(1), Center(0), Center(1))
                                                        Select Case gSSystemParameter.CoordType
                                                            Case enmCoordinateRelationType.eGN2
                                                                mGraphicsStartX = (Center(0) + mShiftX - mRadius) * mScaleWidth
                                                                mGraphicsStartY = (Center(1) + mShiftY - mRadius) * mScaleHeight
                                                            Case enmCoordinateRelationType.eDTS
                                                                mGraphicsStartX = (Center(0) + mShiftX - mRadius) * mScaleWidth
                                                                mGraphicsStartY = GraphicsPictureBox.Height - (Center(1) + mShiftY + mRadius) * mScaleHeight
                                                        End Select

                                                        mGraphicsEndX = (NodeBasicX + .Arc3D.EndPosX + mShiftX) * mScaleWidth
                                                        mGraphicsEndY = (NodeBasicY + .Arc3D.EndPosY + mShiftY) * mScaleHeight

                                                        mGraphicsHeight = mRadius * 2 * mScaleHeight
                                                        mGraphicsWidth = mRadius * 2 * mScaleWidth
                                                        '起始值
                                                        Dim StartAngle As Integer = CInt(GetAngle(StartPos(0), StartPos(1), Center(0), Center(1)))
                                                        '結束值
                                                        mDraw.DrawArc(mPen, CInt(mGraphicsStartX), CInt(mGraphicsStartY), CInt(mGraphicsHeight), CInt(mGraphicsHeight), StartAngle, CInt(mGraphicsAngle))

                                                        '判斷正反轉
                                                        If gCRecipe.Pattern(index.PatternName).Round(mRoundNo).CStep(mStepNo).Arc3D.Angle > 0 Then
                                                            '正轉
                                                            If mGraphicsAngle > StartAngle Then
                                                                mGraphicsAngle -= StartAngle
                                                            Else
                                                                mGraphicsAngle += (360 - StartAngle)
                                                            End If

                                                        Else
                                                            '反轉
                                                            If (mGraphicsAngle - StartAngle) > 0 Then
                                                                mGraphicsAngle -= (360 + StartAngle)
                                                            Else
                                                                mGraphicsAngle -= StartAngle
                                                            End If


                                                        End If
                                                        mDraw.DrawArc(mPen, CInt(mGraphicsStartX - mGraphicsRadius), CInt(mGraphicsStartY - mGraphicsRadius), CInt(mGraphicsRadius) * 2, CInt(mGraphicsRadius) * 2, 180, CInt(mGraphicsAngle))
                                                    End If

                                            End Select
                                        End With


                                    End If
                                Next
                            End If
                        End With
                    Next
                End With
            Next
        Next


        GraphicsPictureBox.Image = mBitmap

        Return True

    End Function

    'Public Function DrawSingleStepGraphicsTest(ByVal patternID As String, ByVal RoundNo As Integer, ByVal StepNo As Integer, ByVal GraphicsPictureBox As PictureBox, ByVal sys As sSysParam, ByVal index As sLevelIndexCollection) As Boolean
    '    Dim mRoundNo As Integer
    '    Dim mStepNo As Integer
    '    Dim mDraw As Graphics
    '    Dim mPen As New Pen(Color.Black)
    '    Dim mBrush As New Drawing.SolidBrush(Color.Black)
    '    Dim mBitmap As Bitmap
    '    Dim mScaleHeight As Decimal                              '轉換成畫布大小的Scale
    '    Dim mScaleWidth As Decimal                               '轉換成畫布大小的Scale
    '    Dim mGraphicsStartX As Decimal                           '轉換成畫布大小StartX
    '    Dim mGraphicsStartY As Decimal                           '轉換成畫布大小StartY
    '    Dim mGraphicsEndX As Decimal                             '轉換成畫布大小EndX
    '    Dim mGraphicsEndY As Decimal                             '轉換成畫布大小EndY
    '    Dim mGraphicsWidth As Decimal                            '轉換成畫布大小Width
    '    Dim mGraphicsHeight As Decimal                           '轉換成畫布大小Height
    '    Dim mGraphicsRadius As Decimal                           '轉換成畫布大小Radius
    '    Dim mGraphicsAngle As Decimal                            '轉換成畫布大小Angle
    '    Dim mShiftX As Decimal
    '    Dim mShiftY As Decimal
    '    Dim mPointSize As Integer                                 '單點的大小


    '    mBitmap = GraphicsPictureBox.Image

    '    If mBitmap Is Nothing Then
    '        mBitmap = New Bitmap(CInt(GraphicsPictureBox.Width), CInt(GraphicsPictureBox.Height))
    '    End If

    '    mDraw = Graphics.FromImage(mBitmap)

    '    'mShiftX = 0
    '    'mShiftY = 0
    '    'mScaleWidth = GraphicsPictureBox.Width / 16
    '    'mScaleHeight = GraphicsPictureBox.Height / 16
    '    'mPointSize = CInt(GraphicsPictureBox.Width / 100) '繪點大小

    '    '--- Soni + 2014.10.30 圖型過大時自動調整比例 ---
    '    Dim maxPosX As Decimal, maxPosY As Decimal, minPosX As Decimal, minPosY As Decimal
    '    'FindPatternMaxMinOffset(minPosX, minPosY, maxPosX, maxPosY, sys) '找最大最小點
    '    FindPatternMaxMinTest(minPosX, minPosY, maxPosX, maxPosY, sys, index) '找最大最小點   20161102

    '    '--- 增加邊界空白 ---
    '    maxPosX += 3
    '    maxPosY += 3
    '    minPosX -= 3
    '    minPosY -= 3
    '    '--- 增加邊界空白 ---


    '    '[說明]:換算比例大小
    '    GetDrawShiftScale(GraphicsPictureBox, maxPosX, minPosX, maxPosY, minPosY, mShiftX, mShiftY, mScaleWidth, mScaleHeight, mPointSize) 'Soni / 2016.12.07
    '    'mShiftX = 6.5
    '    'mShiftY = 6.5
    '    'mScaleWidth = GraphicsPictureBox.Width / 13
    '    'mScaleHeight = GraphicsPictureBox.Height / 13
    '    'mPointSize = CInt(GraphicsPictureBox.Width / 100) '繪點大小

    '    'If maxPosX * mScaleWidth > GraphicsPictureBox.Width / 4 Then '任一邊過界則調整顯示比例
    '    '    mScaleWidth = 0.25 * GraphicsPictureBox.Width / maxPosX
    '    '    mScaleHeight = mScaleWidth
    '    '    mShiftX = GraphicsPictureBox.Width * 0.5 / mScaleWidth
    '    '    mShiftY = GraphicsPictureBox.Height * 0.5 / mScaleHeight
    '    'End If
    '    'If -minPosX * mScaleWidth > GraphicsPictureBox.Width / 4 Then '任一邊過界則調整顯示比例
    '    '    mScaleWidth = -0.25 * GraphicsPictureBox.Width / minPosX
    '    '    mScaleHeight = mScaleWidth
    '    '    mShiftX = GraphicsPictureBox.Width * 0.5 / mScaleWidth
    '    '    mShiftY = GraphicsPictureBox.Height * 0.5 / mScaleHeight
    '    'End If
    '    'If maxPosY * mScaleHeight > GraphicsPictureBox.Height / 4 Then '任一邊過界則調整顯示比例
    '    '    mScaleHeight = 0.25 * GraphicsPictureBox.Height / maxPosY
    '    '    mScaleWidth = mScaleHeight
    '    '    mShiftX = GraphicsPictureBox.Width * 0.5 / mScaleWidth
    '    '    mShiftY = GraphicsPictureBox.Height * 0.5 / mScaleHeight
    '    'End If
    '    'If -minPosY * mScaleHeight > GraphicsPictureBox.Height / 4 Then '任一邊過界則調整顯示比例
    '    '    mScaleHeight = -0.25 * GraphicsPictureBox.Height / minPosY
    '    '    mScaleWidth = mScaleHeight
    '    '    mShiftX = GraphicsPictureBox.Width * 0.5 / mScaleWidth
    '    '    mShiftY = GraphicsPictureBox.Height * 0.5 / mScaleHeight
    '    'End If
    '    '--- Soni + 2014.10.30 圖型過大時自動調整比例 ---

    '    If index.PatternName = "" Then 'Pattern名稱不存在
    '        DrawCoord(mDraw, GraphicsPictureBox.Width, GraphicsPictureBox.Height)
    '        GraphicsPictureBox.Image = mBitmap
    '        Return True
    '    End If

    '    '=== Soni + 2016.09.09 Copy from DrawSingleGraphics ===
    '    If Not gCRecipe.Pattern.ContainsKey(index.PatternName) Then 'Pattern清單內不存在指定名稱
    '        DrawCoord(mDraw, GraphicsPictureBox.Width, GraphicsPictureBox.Height)
    '        GraphicsPictureBox.Image = mBitmap
    '        Return True
    '    End If
    '    If gCRecipe.Pattern(index.PatternName).Round.Count = 0 Then '數量為零不繪製
    '        DrawCoord(mDraw, GraphicsPictureBox.Width, GraphicsPictureBox.Height)
    '        GraphicsPictureBox.Image = mBitmap
    '        Return True
    '    End If
    '    '=== Soni + 2016.09.09 Copy from DrawSingleGraphics ===

    '    '[說明]:畫Recipe圖形  先轉換成畫布Size再描畫圖形
    '    With mPen
    '        .Width = GraphicsPictureBox.Width / 500
    '        .DashStyle = Drawing2D.DashStyle.Solid
    '        .Color = Color.Red
    '    End With

    '    mBrush.Color = Color.Red
    '    Dim mNodeID As String

    '    For i As Integer = index.StageNo To index.StageNo
    '        For j As Integer = 0 To gCRecipe.Node(i).Keys.Count - 1
    '            mNodeID = gCRecipe.Node(i).Keys(j)
    '            Dim Name As String = gCRecipe.Node(i)(mNodeID).PatternName
    '            Dim NodeBasicX As Decimal = gCRecipe.Node(i)(mNodeID).ConveyorPos(sys.ConveyorNo).BasicPositionX
    '            Dim NodeBasicY As Decimal = gCRecipe.Node(i)(mNodeID).ConveyorPos(sys.ConveyorNo).BasicPositionY

    '            With gCRecipe
    '                For mRoundNo = 0 To .Pattern(index.PatternName).Round.Count - 1
    '                    Dim num As Integer = .Pattern(index.PatternName).Round.Count
    '                    With .Pattern(index.PatternName).Round(mRoundNo)
    '                        If .StepCount > 0 Then
    '                            For mStepNo = 0 To .StepCount - 1   '20160907
    '                                If mStepNo = StepNo Then
    '                                    With .CStep(mStepNo)
    '                                        Select Case .StepType
    '                                            Case eStepFunctionType.Dots3D '點
    '                                                Select Case gSSystemParameter.CoordType
    '                                                    Case enmCoordinateRelationType.eGN2
    '                                                        mGraphicsStartX = (NodeBasicX + .Dots3D.PosX + mShiftX) * mScaleWidth - mPointSize * 0.5
    '                                                        mGraphicsStartY = (NodeBasicY + .Dots3D.PosY + mShiftY) * mScaleHeight - mPointSize * 0.5
    '                                                    Case enmCoordinateRelationType.eDTS
    '                                                        mGraphicsEndX = (NodeBasicX + .Dots3D.PosX + mShiftX) * mScaleWidth - mPointSize * 0.5
    '                                                        mGraphicsEndY = (NodeBasicY + .Dots3D.PosY + mShiftY) * mScaleHeight - mPointSize * 0.5
    '                                                End Select

    '                                                mDraw.FillEllipse(mBrush, CInt(mGraphicsEndX), CInt(mGraphicsEndY), mPointSize, mPointSize)
    '                                            Case eStepFunctionType.Move3D
    '                                                Select Case gSSystemParameter.CoordType
    '                                                    Case enmCoordinateRelationType.eGN2
    '                                                        mGraphicsEndX = (NodeBasicX + .Move3D.EndPosX + mShiftX) * mScaleWidth - mPointSize * 0.5
    '                                                        mGraphicsEndY = (NodeBasicY + .Move3D.EndPosY + mShiftY) * mScaleHeight - mPointSize * 0.5
    '                                                    Case enmCoordinateRelationType.eDTS
    '                                                        mGraphicsEndX = (NodeBasicX + .Move3D.EndPosX + mShiftX) * mScaleWidth - mPointSize * 0.5
    '                                                        mGraphicsEndY = (NodeBasicY + .Move3D.EndPosY + mShiftY) * mScaleHeight - mPointSize * 0.5
    '                                                End Select

    '                                                mDraw.FillEllipse(mBrush, CInt(mGraphicsEndX), CInt(mGraphicsEndY), mPointSize, mPointSize)

    '                                            Case eStepFunctionType.Line3D
    '                                                Select Case gSSystemParameter.CoordType
    '                                                    Case enmCoordinateRelationType.eGN2
    '                                                        mGraphicsStartX = (NodeBasicX + .Line3D.StartPosX + mShiftX) * mScaleWidth
    '                                                        mGraphicsStartY = (NodeBasicY + .Line3D.StartPosY + mShiftY) * mScaleHeight
    '                                                        mGraphicsEndX = (NodeBasicX + .Line3D.EndPosX + mShiftX) * mScaleWidth
    '                                                        mGraphicsEndY = (NodeBasicY + .Line3D.EndPosY + mShiftY) * mScaleHeight
    '                                                    Case enmCoordinateRelationType.eDTS
    '                                                        mGraphicsStartX = (NodeBasicX + .Line3D.StartPosX + mShiftX) * mScaleWidth
    '                                                        mGraphicsStartY = (NodeBasicY + .Line3D.StartPosY + mShiftY) * mScaleHeight
    '                                                        mGraphicsEndX = (NodeBasicX + .Line3D.EndPosX + mShiftX) * mScaleWidth
    '                                                        mGraphicsEndY = (NodeBasicY + .Line3D.EndPosY + mShiftY) * mScaleHeight
    '                                                End Select

    '                                                If mGraphicsStartY = mGraphicsEndY And mGraphicsStartX = mGraphicsEndX Then '共點
    '                                                    'Jeffadd
    '                                                    mDraw.FillEllipse(mBrush, CInt(mGraphicsStartX - mPointSize / 2), CInt(mGraphicsStartY - mPointSize / 2), mPointSize, mPointSize)
    '                                                Else
    '                                                    mDraw.DrawLine(mPen, CInt(mGraphicsStartX), CInt(mGraphicsStartY), CInt(mGraphicsEndX), CInt(mGraphicsEndY))
    '                                                End If
    '                                                '20160805
    '                                            Case eStepFunctionType.Circle2D '圓
    '                                                Dim EndPos(1) As Decimal
    '                                                Dim Center(1) As Decimal
    '                                                Center(0) = NodeBasicX + .Circle2D.CenterPosX
    '                                                Center(1) = NodeBasicY + .Circle2D.CenterPosY
    '                                                EndPos(0) = NodeBasicX + .Circle2D.Middle2PosX
    '                                                EndPos(1) = NodeBasicY + .Circle2D.Middle2PosY
    '                                                If Center(0) = EndPos(0) And Center(1) = EndPos(1) Then
    '                                                Else
    '                                                    Dim mRadius As Decimal = GetDistance(EndPos(0), EndPos(1), Center(0), Center(1))
    '                                                    Select Case gSSystemParameter.CoordType
    '                                                        Case enmCoordinateRelationType.eGN2
    '                                                            mGraphicsStartX = (Center(0) + mShiftX - mRadius) * mScaleWidth
    '                                                            mGraphicsStartY = (Center(1) + mShiftY - mRadius) * mScaleHeight
    '                                                        Case enmCoordinateRelationType.eDTS
    '                                                            mGraphicsStartX = (Center(0) + mShiftX - mRadius) * mScaleWidth
    '                                                            mGraphicsStartY = (Center(1) + mShiftY - mRadius) * mScaleHeight
    '                                                    End Select
    '                                                    mGraphicsHeight = mRadius * 2 * mScaleHeight
    '                                                    mGraphicsWidth = mRadius * 2 * mScaleWidth
    '                                                    mDraw.DrawArc(mPen, CInt(mGraphicsStartX), CInt(mGraphicsStartY), CInt(mGraphicsWidth), CInt(mGraphicsHeight), 0, 360)
    '                                                End If

    '                                                'DrawArc
    '                                                'Pen()
    '                                                'Pen，決定弧形的色彩、寬度和樣式。
    '                                                'rect()
    '                                                'RectangleF 結構，定義橢圓形的邊界。
    '                                                'startAngle()
    '                                                '以度為單位，依順時針方向測量之從 X 軸到弧形開始點的角度。
    '                                                'sweepAngle()
    '                                                '以度為單位，依順時針方向測量之從 startAngle 參數到弧形結束點的角度。
    '                                                '20160805
    '                                            Case eStepFunctionType.Arc2D
    '                                                Dim AngleX As Double = .Arc2D.Angle
    '                                                Dim StartPos(1) As Decimal
    '                                                Dim EndPos(1) As Decimal
    '                                                Dim Center(1) As Decimal
    '                                                Dim CenterF(1) As Decimal

    '                                                StartPos(0) = NodeBasicX + .Arc2D.StartPosX
    '                                                StartPos(1) = NodeBasicY + .Arc2D.StartPosY
    '                                                EndPos(0) = NodeBasicX + .Arc2D.EndPosX
    '                                                EndPos(1) = NodeBasicY + .Arc2D.EndPosY

    '                                                Dim Circle As Circle
    '                                                Dim x, y, z As CPoint
    '                                                'Jeffadd 20160615
    '                                                x = New CPoint(Val(NodeBasicX + .Arc2D.StartPosX), Val(NodeBasicY + .Arc2D.StartPosY))
    '                                                y = New CPoint(Val(NodeBasicX + .Arc2D.MiddlePosX), Val(NodeBasicY + .Arc2D.MiddlePosY))
    '                                                z = New CPoint(Val(NodeBasicX + .Arc2D.EndPosX), Val(NodeBasicY + .Arc2D.EndPosY))

    '                                                '[說明]:計算Arc圓心座標
    '                                                Circle = CMath.GetCircleby3Point(x, y, z)

    '                                                Center(0) = Circle.PointX
    '                                                Center(1) = Circle.PointY

    '                                                Dim mRadius As Decimal = GetDistance(StartPos(0), StartPos(1), Center(0), Center(1))

    '                                                mGraphicsStartX = (Center(0) + mShiftX - mRadius) * mScaleWidth
    '                                                mGraphicsStartY = (Center(1) + mShiftY - mRadius) * mScaleHeight

    '                                                mGraphicsHeight = mRadius * 2 * mScaleHeight
    '                                                mGraphicsWidth = mRadius * 2 * mScaleWidth

    '                                                '起始值
    '                                                '  Dim StartAngle As Integer = CInt(GetAngleJeffTest(StartPos(0), StartPos(1), Center(0), Center(1)))

    '                                                Dim StartAngle As Integer = CInt(GetAngleJeffTest(Center(0), Center(1), StartPos(0), StartPos(1)))
    '                                                Dim StartAngleTest As Integer
    '                                                Dim EndAngleTest As Integer
    '                                                If StartAngle > 0 Then
    '                                                    StartAngleTest = 180 - StartAngle
    '                                                Else
    '                                                    StartAngleTest = -(StartAngle) + 180
    '                                                End If

    '                                                Circle.clockwise = Not Circle.clockwise
    '                                                If Circle.clockwise = True Then
    '                                                    EndAngleTest = Circle.Angle
    '                                                ElseIf Circle.clockwise = False Then
    '                                                    Dim Middle As Integer
    '                                                    EndAngleTest = StartAngleTest - Circle.Angle
    '                                                    Middle = EndAngleTest
    '                                                    StartAngleTest = Middle

    '                                                    EndAngleTest = Circle.Angle
    '                                                End If


    '                                                '結束值
    '                                                mDraw.DrawArc(mPen, CInt(mGraphicsStartX), CInt(mGraphicsStartY), CInt(mGraphicsWidth), CInt(mGraphicsHeight), StartAngleTest, EndAngleTest)
    '                                                '  mDraw.DrawArc(mPen, CInt(mGraphicsStartX), CInt(mGraphicsStartY), CInt(mGraphicsWidth), CInt(mGraphicsHeight), CInt(StartAngle), CInt(Circle.Angle))
    '                                            Case eStepFunctionType.Circle3D
    '                                                Dim EndPos(1) As Decimal
    '                                                Dim Center(1) As Decimal
    '                                                Center(0) = NodeBasicX + .Circle3D.CenterPosX
    '                                                Center(1) = NodeBasicY + .Circle3D.CenterPosY
    '                                                EndPos(0) = NodeBasicX + .Circle3D.EndPosX
    '                                                EndPos(1) = NodeBasicY + .Circle3D.EndPosY
    '                                                If Center(0) = EndPos(0) And Center(1) = EndPos(1) Then
    '                                                Else
    '                                                    Dim mRadius As Decimal = GetDistance(EndPos(0), EndPos(1), Center(0), Center(1))
    '                                                    Select Case gSSystemParameter.CoordType
    '                                                        Case enmCoordinateRelationType.eGN2
    '                                                            mGraphicsStartX = (Center(0) + mShiftX - mRadius) * mScaleWidth
    '                                                            mGraphicsStartY = (Center(1) + mShiftY - mRadius) * mScaleHeight
    '                                                        Case enmCoordinateRelationType.eDTS
    '                                                            mGraphicsStartX = (Center(0) + mShiftX - mRadius) * mScaleWidth
    '                                                            mGraphicsStartY = (-Center(1) + mShiftY - mRadius) * mScaleHeight
    '                                                    End Select
    '                                                    mGraphicsHeight = mRadius * 2 * mScaleHeight
    '                                                    mGraphicsWidth = mRadius * 2 * mScaleWidth
    '                                                    mDraw.DrawArc(mPen, CInt(mGraphicsStartX), CInt(mGraphicsStartY), CInt(mGraphicsWidth), CInt(mGraphicsHeight), 0, 360)
    '                                                End If

    '                                            Case eStepFunctionType.Arc3D

    '                                                '[說明]:配合劃膠之角度轉換 實際劃膠起始點為180(-1,0)順時針 
    '                                                '描繪的圖形起始點為0(1,0)順時針 起始點為矩形的為左上角之座標
    '                                                '(StartX,StartY)定義為圓心之座標
    '                                                If .Arc3D.Angle >= 180 Then
    '                                                    mGraphicsAngle = (.Arc3D.Angle + 180) Mod 360 + 180
    '                                                Else
    '                                                    mGraphicsAngle = (.Arc3D.Angle + 180) Mod 360 - 180
    '                                                End If

    '                                                Dim StartPos(1) As Decimal
    '                                                Dim EndPos(1) As Decimal
    '                                                Dim Center(1) As Decimal

    '                                                StartPos(0) = NodeBasicX + .Arc3D.StartPosX
    '                                                StartPos(1) = NodeBasicY + .Arc3D.StartPosY
    '                                                EndPos(0) = NodeBasicX + .Arc3D.EndPosX
    '                                                EndPos(1) = NodeBasicY + .Arc3D.EndPosY
    '                                                If StartPos(0) = EndPos(0) And StartPos(1) = EndPos(1) Then
    '                                                Else
    '                                                    '計算原點座標(圓心) 正向和反向 利用向量計算
    '                                                    If gCRecipe.Pattern(index.PatternName).Round(mRoundNo).CStep(mStepNo).Arc3D.Angle >= 0 Then
    '                                                        CenterCalculate(StartPos, EndPos, Math.Abs(gCRecipe.Pattern(index.PatternName).Round(mRoundNo).CStep(mStepNo).Arc3D.Angle), Center, 0)
    '                                                    Else
    '                                                        CenterCalculate(StartPos, EndPos, Math.Abs(gCRecipe.Pattern(index.PatternName).Round(mRoundNo).CStep(mStepNo).Arc3D.Angle), Center, 1)
    '                                                    End If

    '                                                    Dim mRadius As Decimal = GetDistance(StartPos(0), StartPos(1), Center(0), Center(1))
    '                                                    Select Case gSSystemParameter.CoordType
    '                                                        Case enmCoordinateRelationType.eGN2
    '                                                            mGraphicsStartX = (Center(0) + mShiftX - mRadius) * mScaleWidth
    '                                                            mGraphicsStartY = (Center(1) + mShiftY - mRadius) * mScaleHeight
    '                                                        Case enmCoordinateRelationType.eDTS
    '                                                            mGraphicsStartX = (Center(0) + mShiftX - mRadius) * mScaleWidth
    '                                                            mGraphicsStartY = (-Center(1) + mShiftY - mRadius) * mScaleHeight
    '                                                    End Select

    '                                                    mGraphicsEndX = (NodeBasicX + .Arc3D.EndPosX + mShiftX) * mScaleWidth
    '                                                    mGraphicsEndY = (NodeBasicY + .Arc3D.EndPosY + mShiftY) * mScaleHeight

    '                                                    mGraphicsHeight = mRadius * 2 * mScaleHeight
    '                                                    mGraphicsWidth = mRadius * 2 * mScaleWidth
    '                                                    '起始值
    '                                                    Dim StartAngle As Integer = CInt(GetAngle(StartPos(0), StartPos(1), Center(0), Center(1)))
    '                                                    '結束值
    '                                                    mDraw.DrawArc(mPen, CInt(mGraphicsStartX), CInt(mGraphicsStartY), CInt(mGraphicsHeight), CInt(mGraphicsHeight), StartAngle, CInt(mGraphicsAngle))

    '                                                    '判斷正反轉
    '                                                    If gCRecipe.Pattern(index.PatternName).Round(mRoundNo).CStep(mStepNo).Arc3D.Angle > 0 Then
    '                                                        '正轉
    '                                                        If mGraphicsAngle > StartAngle Then
    '                                                            mGraphicsAngle -= StartAngle
    '                                                        Else
    '                                                            mGraphicsAngle += (360 - StartAngle)
    '                                                        End If

    '                                                    Else
    '                                                        '反轉
    '                                                        If (mGraphicsAngle - StartAngle) > 0 Then
    '                                                            mGraphicsAngle -= (360 + StartAngle)
    '                                                        Else
    '                                                            mGraphicsAngle -= StartAngle
    '                                                        End If


    '                                                    End If
    '                                                    mDraw.DrawArc(mPen, CInt(mGraphicsStartX - mGraphicsRadius), CInt(mGraphicsStartY - mGraphicsRadius), CInt(mGraphicsRadius) * 2, CInt(mGraphicsRadius) * 2, 180, CInt(mGraphicsAngle))
    '                                                End If

    '                                        End Select
    '                                    End With


    '                                End If
    '                            Next
    '                        End If
    '                    End With
    '                Next
    '            End With
    '        Next
    '    Next


    '    GraphicsPictureBox.Image = mBitmap

    '    Return True

    'End Function



    'End Function
    '*******************Fenix+ 2016/01/09****************

    ' ''' <summary>
    ' ''' [回傳下一個Laser測高點資訊]
    ' ''' </summary>
    ' ''' <param name="sys"></param>
    ' ''' <param name="LaserIndex"></param>
    ' ''' <returns></returns>
    ' ''' <remarks></remarks>
    'Public Function NextLaser(ByVal sys As sSysParam, ByRef LaserIndex As sLevelIndexCollection, ByRef nodeLevel As Integer) As enmScanStatus
    '    If gNextScan(sys.StageNo).NowIndex >= gNextScan(sys.StageNo).List.Count Then
    '        '[Note]:沒有就直接離開(Count=0)
    '        If gNextScan(sys.StageNo).List.Count > 0 Then
    '            nodeLevel = gNextScan(sys.StageNo).List(gNextScan(sys.StageNo).NowIndex - 1).LevelNo
    '        End If
    '        Return enmScanStatus.Finish
    '    Else
    '        nodeLevel = gNextScan(sys.StageNo).List(gNextScan(sys.StageNo).NowIndex).LevelNo
    '        With gNextScan(sys.StageNo).List(gNextScan(sys.StageNo).NowIndex)
    '            If .IsLevelEnd = False Then
    '                LaserIndex = gNextScan(sys.StageNo).List(gNextScan(sys.StageNo).NowIndex)
    '                gNextScan(sys.StageNo).NowIndex += 1 '指向下一點
    '                Return enmScanStatus.Running
    '            Else
    '                gNextScan(sys.StageNo).NowIndex += 1 '指向下一點
    '                Return enmScanStatus.LevelEnd
    '            End If
    '        End With
    '    End If
    'End Function

    ''' <summary>取得陣列型次層參考位置</summary>
    ''' <param name="refposX"></param>
    ''' <param name="refPosY"></param>
    ''' <param name="refPosT"></param>
    ''' <param name="pitchX"></param>
    ''' <param name="pitchY"></param>
    ''' <param name="iX">索引X</param>
    ''' <param name="iY">索引Y</param>
    ''' <param name="posX">次層參考位置X</param>
    ''' <param name="posY">次層參考位置Y</param>
    ''' <remarks></remarks>
    Public Sub GetLevelArrayPos(ByVal refposX As Decimal,
                              ByVal refPosY As Decimal,
                              ByVal refPosT As Decimal,
                              ByVal pitchX As Decimal,
                              ByVal pitchY As Decimal,
                              ByVal iX As Integer,
                              ByVal iY As Integer,
                              ByRef posX As Decimal,
                              ByRef posY As Decimal,
                              ByVal mMultiArrayAdapter As CMultiArrayAdapter)
        'Dim rad As Decimal = refPosT * Math.PI / 180
        'posX = refposX + pitchX * iX * Convert.ToDecimal(Math.Cos(rad)) - pitchY * iY * Convert.ToDecimal(Math.Sin(rad))
        'posY = refPosY + pitchX * iX * Convert.ToDecimal(Math.Sin(rad)) + pitchY * iY * Convert.ToDecimal(Math.Cos(rad))
        posX = refposX + mMultiArrayAdapter.GetMemoryPosX(iX, iY)
        posY = refPosY + mMultiArrayAdapter.GetMemoryPosY(iX, iY)
    End Sub


    ''' <summary>輸入索引,取得相應拍照位置
    ''' </summary>
    ''' <param name="posX">在索引XY的CCD拍照位置X</param>
    ''' <param name="posY">在索引XY的CCD拍照位置Y</param>
    ''' <returns></returns>
    ''' <remarks></remarks>

    Public Function GetCCDScanPos(ByVal sys As sSysParam,
                                   ByVal index As sLevelIndexCollection,
                                   ByRef posX As Decimal,
                                   ByRef posY As Decimal,
                                   ByVal alignIndex As enmAlignType,
                                   ByVal MultiArrayAdapter As CMultiArrayAdapter) As Boolean
        If sys Is Nothing Then
            Return False
        End If
        If sys.StageNo < 0 Then '編號索引低於上限
            Return False
        End If
        'If sys.StageNo >= gStageMap.Count Then '編號索引超過上限
        '    Return False
        'End If

        'If gStageMap(sys.StageNo).Node.Count = 0 Then '沒有節點
        '    Return False
        'End If

        If index.NodeName Is Nothing Then
            Return False
        End If
        'If Not gStageMap(sys.StageNo).Node.ContainsKey(index.NodeID) Then '節點不含名稱
        '    Return False
        'End If

        'If gStageMap(sys.StageNo).Node(index.NodeID).PatternName = "" Then
        '    Return False
        'End If

        Dim RefPosX As Decimal '參考點
        Dim RefPosY As Decimal '參考點
        With gCRecipe.Node(sys.StageNo)(index.NodeName)
            'With gStageMap(sys.StageNo).Node(index.NodeID)
            Select Case alignIndex
                Case enmAlignType.DevicePos1 '元件第一參考位置
                    RefPosX = .ConveyorPos(sys.ConveyorNo).AlignmentData(0).AlignPosX
                    RefPosY = .ConveyorPos(sys.ConveyorNo).AlignmentData(0).AlignPosY
                Case enmAlignType.DevicePos2 '元件第二參考位置
                    RefPosX = .ConveyorPos(sys.ConveyorNo).AlignmentData(1).AlignPosX
                    RefPosY = .ConveyorPos(sys.ConveyorNo).AlignmentData(1).AlignPosY
            End Select
        End With
        With gCRecipe.Node(sys.StageNo)(index.NodeName) '使用目前所在節點的名稱取得陣列設定資料
            Call GetLevelArrayPos(RefPosX,
                                  RefPosY,
                                  .Array(0).Array.Theta,
                                  .Array(0).Array.PitchX,
                                  .Array(0).Array.PitchY,
                                  index.Xf, index.Yf, posX, posY,
                                  MultiArrayAdapter)
            '取得陣列計算位置 'TODO: Soni 還需要修改
        End With

        Return True

    End Function

    Public Function GetLaserPos(ByVal sys As sSysParam, ByVal index As sLevelIndexCollection, ByRef posX As Decimal, ByRef posY As Decimal,
                                 ByVal mMultiArrayAdapter As CMultiArrayAdapter) As Boolean
        If sys.StageNo < 0 Then
            Return False
        End If
        If sys.StageNo >= gCRecipe.StageNodeID.Count Then
            Return False
        End If
        If index.NodeName = "" Then
            Return False
        End If
        If Not gCRecipe.Node(sys.StageNo).ContainsKey(index.NodeName) Then
            Return False
        End If
        If sys.CCDNo < 0 Then
            Return False
        End If
        'jimmy 20161011
        '不知角度 先塞0度
        ' If sys.CCDNo >= gSSystemParameter.Pos.CCDValveCalibration.Count Then
        If sys.CCDNo >= gSSystemParameter.Pos.CCDTiltVavleCalbration.Count Then
            Return False
        End If

        With gCRecipe.Node(sys.StageNo)(index.NodeName)
            Call GetLevelArrayPos(.ConveyorPos(sys.ConveyorNo).LaserData(0).LaserPositionX,
                                  .ConveyorPos(sys.ConveyorNo).LaserData(0).LaserPositionY,
                                  .Array(0).Array.Theta, .Array(0).Array.PitchX, .Array(0).Array.PitchY, index.Xf, index.Yf, posX, posY, mMultiArrayAdapter) 'TODO: Soni 還需要修改
        End With

        'posX = posX - gSSystemParameter.Pos.gCCDValveCalibration(sys.CCDNo).dblCCDToSnOffsetX
        'posY = posY - gSSystemParameter.Pos.gCCDValveCalibration(sys.CCDNo).dblCCDToSnOffsetY

        'Debug.Print("CCD Snr校正:" & gSSystemParameter.Pos.gCCDValveCalibration(sys.CCDNo).dblCCDToSnOffsetX)
        'Debug.Print("CCD Snr校正:" & gSSystemParameter.Pos.gCCDValveCalibration(sys.CCDNo).dblCCDToSnOffsetY)

        Return True
    End Function


    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="GraphicsPictureBox">繪製用介面控制項</param>
    ''' <param name="maxPosX">最大物理座標X</param>
    ''' <param name="minPosX">最小物理座標X</param>
    ''' <param name="maxPosY">最大物理座標Y</param>
    ''' <param name="minPosY">最小物理座標Y</param>
    ''' <param name="shiftX">特徵中心點物理座標反向修正</param>
    ''' <param name="shiftY">特徵中心點物理座標反向修正</param>
    ''' <param name="scaleWidth">繪製縮放比例</param>
    ''' <param name="scaleHeight">繪製縮放比例</param>
    ''' <param name="pointSize">繪點尺寸</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function GetDrawShiftScale(ByRef GraphicsPictureBox As PictureBox, ByVal maxPosX As Double, ByVal minPosX As Double, ByVal maxPosY As Double, ByVal minPosY As Double, ByRef shiftX As Double, ByRef shiftY As Double, ByRef scaleWidth As Double, ByRef scaleHeight As Double, ByRef pointSize As Integer) As Boolean


        '[說明]:換算比例大小

        '預設值
        shiftX = 6.5
        shiftY = 6.5
        scaleWidth = GraphicsPictureBox.Width / 13
        scaleHeight = GraphicsPictureBox.Height / 13
        pointSize = CInt(GraphicsPictureBox.Width / 100) '繪點大小
        '       Dim lineWidthCoef As Double = 44.8


        Dim RangeX As Double = maxPosX - minPosX '範圍
        Dim RangeY As Double = maxPosY - minPosY
        scaleWidth = GraphicsPictureBox.Width / RangeX
        scaleHeight = GraphicsPictureBox.Height / RangeY
        If scaleWidth < scaleHeight Then scaleHeight = scaleWidth
        If scaleHeight < scaleWidth Then scaleWidth = scaleHeight
        shiftX = GraphicsPictureBox.Width * 0.5 / scaleWidth - (maxPosX + minPosX) / 2
        shiftY = GraphicsPictureBox.Height * 0.5 / scaleHeight - (maxPosY + minPosY) / 2

        Return True
        '20161028
        If maxPosX * scaleWidth > GraphicsPictureBox.Width / 4 Then '任一邊過界則調整顯示比例
            scaleWidth = 0.25 * GraphicsPictureBox.Width / maxPosX
            scaleHeight = scaleWidth
            shiftX = GraphicsPictureBox.Width * 0.5 / scaleWidth
            shiftY = GraphicsPictureBox.Height * 0.5 / scaleHeight
        End If
        If -minPosX * scaleWidth > GraphicsPictureBox.Width / 4 Then '任一邊過界則調整顯示比例
            scaleWidth = -0.25 * GraphicsPictureBox.Width / minPosX
            scaleHeight = scaleWidth
            shiftX = GraphicsPictureBox.Width * 0.5 / scaleWidth
            shiftY = GraphicsPictureBox.Height * 0.5 / scaleHeight
        End If
        If maxPosY * scaleHeight > GraphicsPictureBox.Height / 4 Then '任一邊過界則調整顯示比例
            scaleHeight = 0.25 * GraphicsPictureBox.Height / maxPosY
            scaleWidth = scaleHeight
            shiftX = GraphicsPictureBox.Width * 0.5 / scaleWidth
            shiftY = GraphicsPictureBox.Height * 0.5 / scaleHeight
        End If
        If -minPosY * scaleHeight > GraphicsPictureBox.Height / 4 Then '任一邊過界則調整顯示比例
            scaleHeight = -0.25 * GraphicsPictureBox.Height / minPosY
            scaleWidth = scaleHeight
            shiftX = GraphicsPictureBox.Width * 0.5 / scaleWidth
            shiftY = GraphicsPictureBox.Height * 0.5 / scaleHeight
        End If
        Return True
    End Function

    '20170215
    Public Function DrawSingleGraphicsTest(ByVal GraphicsPictureBox As PictureBox, ByVal sys As sSysParam, ByVal index As sLevelIndexCollection) As Boolean

        Dim mRoundNo As Integer
        Dim mStepNo As Integer
        Dim mDraw As Graphics
        Dim mPen As New Pen(Color.Black)
        Dim mBrush As New Drawing.SolidBrush(Color.Black)
        Dim mBitmap As Bitmap
        Dim mScaleHeight As Decimal                              '轉換成畫布大小的Scale
        Dim mScaleWidth As Decimal                               '轉換成畫布大小的Scale
        Dim mGraphicsStartX As Decimal                           '轉換成畫布大小StartX
        Dim mGraphicsStartY As Decimal                           '轉換成畫布大小StartY
        Dim mGraphicsEndX As Decimal                             '轉換成畫布大小EndX
        Dim mGraphicsEndY As Decimal                             '轉換成畫布大小EndY
        Dim mGraphicsWidth As Decimal                            '轉換成畫布大小Width
        Dim mGraphicsHeight As Decimal                           '轉換成畫布大小Height
        Dim mGraphicsRadius As Decimal                           '轉換成畫布大小Radius
        Dim mGraphicsAngle As Decimal                            '轉換成畫布大小Angle
        Dim mShiftX As Decimal
        Dim mShiftY As Decimal
        Dim mPointSize As Integer                                 '單點的大小


        mBitmap = GraphicsPictureBox.Image

        If mBitmap Is Nothing Then
            mBitmap = New Bitmap(CInt(GraphicsPictureBox.Width), CInt(GraphicsPictureBox.Height))
        End If

        mDraw = Graphics.FromImage(mBitmap)

        '[說明]:畫外框(chuck大小)
        mDraw.FillRectangle(mBrush, 0, 0, CInt(GraphicsPictureBox.Width) - 1, CInt(GraphicsPictureBox.Height) - 1)


        With mPen
            .Width = 3
            .DashStyle = Drawing2D.DashStyle.Solid
            .Color = Color.Black
        End With
        mDraw.DrawRectangle(mPen, 0, 0, CInt(GraphicsPictureBox.Width) - 1, CInt(GraphicsPictureBox.Height) - 1)


        '--- Soni + 2014.10.30 圖型過大時自動調整比例 ---
        Dim maxPosX As Decimal, maxPosY As Decimal, minPosX As Decimal, minPosY As Decimal

        FindPatternMaxMinTest(minPosX, minPosY, maxPosX, maxPosY, sys, index) '找最大最小點

        '--- 增加邊界空白 ---
        maxPosX += 3
        maxPosY += 3
        minPosX -= 3
        minPosY -= 3
        '--- 增加邊界空白 ---


        ''[說明]:換算比例大小
        GetDrawShiftScale(GraphicsPictureBox, maxPosX, minPosX, maxPosY, minPosY, mShiftX, mShiftY, mScaleWidth, mScaleHeight, mPointSize) 'Soni / 2016.12.07
        'mShiftX = 6.5
        'mShiftY = 6.5
        'mScaleWidth = GraphicsPictureBox.Width / 13
        'mScaleHeight = GraphicsPictureBox.Height / 13
        'mPointSize = CInt(GraphicsPictureBox.Width / 100) '繪點大小
        ''       Dim lineWidthCoef As Double = 44.8


        ''20161028
        'If maxPosX * mScaleWidth > GraphicsPictureBox.Width / 4 Then '任一邊過界則調整顯示比例
        '    mScaleWidth = 0.25 * GraphicsPictureBox.Width / maxPosX
        '    mScaleHeight = mScaleWidth
        '    mShiftX = GraphicsPictureBox.Width * 0.5 / mScaleWidth
        '    mShiftY = GraphicsPictureBox.Height * 0.5 / mScaleHeight
        'End If
        'If -minPosX * mScaleWidth > GraphicsPictureBox.Width / 4 Then '任一邊過界則調整顯示比例
        '    mScaleWidth = -0.25 * GraphicsPictureBox.Width / minPosX
        '    mScaleHeight = mScaleWidth
        '    mShiftX = GraphicsPictureBox.Width * 0.5 / mScaleWidth
        '    mShiftY = GraphicsPictureBox.Height * 0.5 / mScaleHeight
        'End If
        'If maxPosY * mScaleHeight > GraphicsPictureBox.Height / 4 Then '任一邊過界則調整顯示比例
        '    mScaleHeight = 0.25 * GraphicsPictureBox.Height / maxPosY
        '    mScaleWidth = mScaleHeight
        '    mShiftX = GraphicsPictureBox.Width * 0.5 / mScaleWidth
        '    mShiftY = GraphicsPictureBox.Height * 0.5 / mScaleHeight
        'End If
        'If -minPosY * mScaleHeight > GraphicsPictureBox.Height / 4 Then '任一邊過界則調整顯示比例
        '    mScaleHeight = -0.25 * GraphicsPictureBox.Height / minPosY
        '    mScaleWidth = mScaleHeight
        '    mShiftX = GraphicsPictureBox.Width * 0.5 / mScaleWidth
        '    mShiftY = GraphicsPictureBox.Height * 0.5 / mScaleHeight
        'End If

        ''--- Soni + 2014.10.30 圖型過大時自動調整比例 ---


        'mScaleHeight = GraphicsPictureBox.Height / (maxPosY - minPosY)
        'mScaleWidth = GraphicsPictureBox.Width / (maxPosX - minPosX)
        'If mScaleHeight > mScaleWidth Then mScaleHeight = mScaleWidth '兩者相比取其小
        'If mScaleWidth > mScaleHeight Then mScaleWidth = mScaleHeight
        'mShiftX = -minPosX / (maxPosX - minPosX) * GraphicsPictureBox.Width / mScaleWidth
        'mShiftY = maxPosY / (maxPosY - minPosY) * GraphicsPictureBox.Height / mScaleHeight



        'mScaleHeight = -mScaleHeight
        'mShiftY = -mShiftY

        ''-----------------------------------------------------------------------
        'lineWidthCoef = Math.Abs(135 / mScaleHeight)
        ''--- #001座標翻轉 ---
        'mScaleHeight = -mScaleHeight
        'mShiftY = -mShiftY
        ''--- #001座標翻轉 ---

        ''[說明]:畫Recipe圖形  先轉換成畫布Size再描畫圖形
        'With mPen
        '    .Width = GraphicsPictureBox.Width / lineWidthCoef
        '    .DashStyle = Drawing2D.DashStyle.Solid
        '    .Color = Color.White
        'End With
        'mPointSize = CInt(GraphicsPictureBox.Width / lineWidthCoef)
        ''-----------------------------------------------------------------------


        If sys Is Nothing Then 'Soni + 2016.09.14 外部未傳入sys!!??
            DrawCoord(mDraw, GraphicsPictureBox.Width, GraphicsPictureBox.Height)
            GraphicsPictureBox.Image = mBitmap
            Return True
        End If
        If sys.SelectValve < 0 Then '閥號不可用
            DrawCoord(mDraw, GraphicsPictureBox.Width, GraphicsPictureBox.Height)
            GraphicsPictureBox.Image = mBitmap
            Return True
        End If
        If sys.StageNo >= gCRecipe.StageNodeID.Count Then '閥號不可用
            DrawCoord(mDraw, GraphicsPictureBox.Width, GraphicsPictureBox.Height)
            GraphicsPictureBox.Image = mBitmap
            Return True
        End If
        If index.PatternName = "" Then 'Pattern名稱不存在
            DrawCoord(mDraw, GraphicsPictureBox.Width, GraphicsPictureBox.Height)
            GraphicsPictureBox.Image = mBitmap
            Return True
        End If
        If Not gCRecipe.Pattern.ContainsKey(index.PatternName) Then 'Pattern清單內不存在指定名稱
            DrawCoord(mDraw, GraphicsPictureBox.Width, GraphicsPictureBox.Height)
            GraphicsPictureBox.Image = mBitmap
            Return True
        End If
        If gCRecipe.Pattern(index.PatternName).Round.Count = 0 Then '數量為零不繪製
            DrawCoord(mDraw, GraphicsPictureBox.Width, GraphicsPictureBox.Height)
            GraphicsPictureBox.Image = mBitmap
            Return True
        End If

        '保護20170703
        If gCRecipe.Node(index.StageNo).Count = 0 Then
            Return True
        End If

        If index.StageNo = -1 Then
            Return True
        End If

        If index.path = "" Then
            Return True
        End If


        Dim mNodeID As String
        '劃中心線_以stage上層Pattern 的 Basix Pos 為主
        With mPen
            .Width = GraphicsPictureBox.Width / 250
            .DashStyle = Drawing2D.DashStyle.Solid
            .Color = Color.LightGreen
        End With
        If gCRecipe.Node(index.StageNo).ContainsKey(index.path) Then
            Dim BasicX As Decimal = (gCRecipe.Node(index.StageNo)(index.path).ConveyorPos(sys.ConveyorNo).BasicPositionX + mShiftX) * mScaleWidth
            Dim BasicY As Decimal = GraphicsPictureBox.Height - ((gCRecipe.Node(index.StageNo)(index.path).ConveyorPos(sys.ConveyorNo).BasicPositionY + mShiftY) * mScaleHeight)
            mDraw.DrawLine(mPen, 0, CInt(BasicY), GraphicsPictureBox.Width, CInt(BasicY))
            mDraw.DrawLine(mPen, CInt(BasicX), 0, CInt(BasicX), GraphicsPictureBox.Height)
        Else

        End If

        '繪製座標系
        DrawCoord(mDraw, GraphicsPictureBox.Width, GraphicsPictureBox.Height)


        '[說明]:畫Recipe圖形  先轉換成畫布Size再描畫圖形
        With mPen
            .Width = GraphicsPictureBox.Width / 500
            .DashStyle = Drawing2D.DashStyle.Solid
            .Color = Color.White
        End With
        mBrush.Color = Color.White

        For i As Integer = index.StageNo To index.StageNo
            For j As Integer = 0 To gCRecipe.Node(i).Keys.Count - 1
                mNodeID = gCRecipe.Node(i).Keys(j)
                Dim Name As String = gCRecipe.Node(i)(mNodeID).PatternName
                Dim NodeBasicX As Decimal = gCRecipe.Node(i)(mNodeID).ConveyorPos(sys.ConveyorNo).BasicPositionX
                Dim NodeBasicY As Decimal = gCRecipe.Node(i)(mNodeID).ConveyorPos(sys.ConveyorNo).BasicPositionY
                With gCRecipe
                    If .Pattern.ContainsKey(Name) Then '2017/11/20 Pattern保護
                        For mRoundNo = 0 To .Pattern(Name).Round.Count - 1
                            Dim num As Integer = .Pattern(Name).Round.Count
                            With .Pattern(Name).Round(mRoundNo)
                                If .StepCount > 0 Then
                                    For mStepNo = 0 To .StepCount - 1 'Soni / 2016.09.22 第0筆沒畫到
                                        With .CStep(mStepNo)
                                            Select Case .StepType
                                                Case eStepFunctionType.Dots3D '點
                                                    Select Case gSSystemParameter.CoordType
                                                        Case enmCoordinateRelationType.eGN2

                                                            mGraphicsStartX = (NodeBasicX + .Dots3D.PosX + mShiftX) * mScaleWidth - mPointSize * 0.5
                                                            mGraphicsStartY = (NodeBasicY + .Dots3D.PosY + mShiftY) * mScaleHeight - mPointSize * 0.5
                                                        Case enmCoordinateRelationType.eDTS
                                                            mGraphicsEndX = (NodeBasicX + .Dots3D.PosX + mShiftX) * mScaleWidth - mPointSize * 0.5
                                                            mGraphicsEndY = GraphicsPictureBox.Height - (NodeBasicY + .Dots3D.PosY + mShiftY) * mScaleHeight - mPointSize * 0.5
                                                    End Select

                                                    mDraw.FillEllipse(mBrush, CInt(mGraphicsEndX), CInt(mGraphicsEndY), mPointSize, mPointSize)
                                                Case eStepFunctionType.Move3D
                                                    Select Case gSSystemParameter.CoordType
                                                        Case enmCoordinateRelationType.eGN2
                                                            mGraphicsEndX = (NodeBasicX + .Move3D.EndPosX + mShiftX) * mScaleWidth - mPointSize * 0.5
                                                            mGraphicsEndY = (NodeBasicY + .Move3D.EndPosY + mShiftY) * mScaleHeight - mPointSize * 0.5
                                                        Case enmCoordinateRelationType.eDTS
                                                            mGraphicsEndX = (NodeBasicX + .Move3D.EndPosX + mShiftX) * mScaleWidth - mPointSize * 0.5
                                                            mGraphicsEndY = GraphicsPictureBox.Height - (NodeBasicY + .Move3D.EndPosY + mShiftY) * mScaleHeight - mPointSize * 0.5
                                                    End Select

                                                    mDraw.FillEllipse(mBrush, CInt(mGraphicsEndX), CInt(mGraphicsEndY), mPointSize, mPointSize)

                                                Case eStepFunctionType.Line3D '線
                                                    Select Case gSSystemParameter.CoordType
                                                        Case enmCoordinateRelationType.eGN2
                                                            mGraphicsStartX = (NodeBasicX + .Line3D.StartPosX + mShiftX) * mScaleWidth
                                                            mGraphicsStartY = (NodeBasicY + .Line3D.StartPosY + mShiftY) * mScaleHeight
                                                            mGraphicsEndX = (NodeBasicX + .Line3D.EndPosX + mShiftX) * mScaleWidth
                                                            mGraphicsEndY = (NodeBasicY + .Line3D.EndPosY + mShiftY) * mScaleHeight
                                                        Case enmCoordinateRelationType.eDTS
                                                            Dim SY As Double = .Line3D.StartPosY
                                                            Dim EY As Double = .Line3D.EndPosY
                                                            mGraphicsStartX = (NodeBasicX + .Line3D.StartPosX + mShiftX) * mScaleWidth
                                                            mGraphicsStartY = GraphicsPictureBox.Height - (NodeBasicY + .Line3D.StartPosY + mShiftY) * mScaleHeight
                                                            mGraphicsEndX = (NodeBasicX + .Line3D.EndPosX + mShiftX) * mScaleWidth
                                                            mGraphicsEndY = GraphicsPictureBox.Height - (NodeBasicY + .Line3D.EndPosY + mShiftY) * mScaleHeight
                                                    End Select

                                                    If mGraphicsStartY = mGraphicsEndY And mGraphicsStartX = mGraphicsEndX Then '共點
                                                        'Jeffadd
                                                        mDraw.FillEllipse(mBrush, CInt(mGraphicsStartX - mPointSize / 2), CInt(mGraphicsStartY - mPointSize / 2), mPointSize, mPointSize)
                                                    Else
                                                        mDraw.DrawLine(mPen, CInt(mGraphicsStartX), CInt(mGraphicsStartY), CInt(mGraphicsEndX), CInt(mGraphicsEndY))
                                                    End If
                                                    '20160805
                                                Case eStepFunctionType.Circle2D '圓
                                                    Dim EndPos(1) As Decimal
                                                    Dim Center(1) As Decimal
                                                    Center(0) = NodeBasicX + .Circle2D.CenterPosX
                                                    Center(1) = NodeBasicY + .Circle2D.CenterPosY
                                                    EndPos(0) = NodeBasicX + .Circle2D.Middle2PosX
                                                    EndPos(1) = NodeBasicY + .Circle2D.Middle2PosY
                                                    If Center(0) = EndPos(0) And Center(1) = EndPos(1) Then
                                                    Else
                                                        Dim mRadius As Decimal = GetDistance(EndPos(0), EndPos(1), Center(0), Center(1))
                                                        Select Case gSSystemParameter.CoordType
                                                            Case enmCoordinateRelationType.eGN2
                                                                mGraphicsStartX = (Center(0) + mShiftX - mRadius) * mScaleWidth
                                                                mGraphicsStartY = (Center(1) + mShiftY - mRadius) * mScaleHeight
                                                            Case enmCoordinateRelationType.eDTS
                                                                mGraphicsStartX = (Center(0) + mShiftX - mRadius) * mScaleWidth
                                                                mGraphicsStartY = GraphicsPictureBox.Height - (Center(1) + mShiftY + mRadius) * mScaleHeight
                                                        End Select
                                                        mGraphicsHeight = mRadius * 2 * mScaleHeight
                                                        mGraphicsWidth = mRadius * 2 * mScaleWidth
                                                        mDraw.DrawArc(mPen, CInt(mGraphicsStartX), CInt(mGraphicsStartY), CInt(mGraphicsWidth), CInt(mGraphicsHeight), 0, 360)
                                                    End If

                                                    '20160808  
                                                Case eStepFunctionType.Arc2D
                                                    Dim AngleX As Double = .Arc2D.Angle
                                                    'Pen()
                                                    'Type:                                   System.Drawing.Pen()
                                                    'Pen that determines the color, width, and style of the arc.
                                                    'x()
                                                    'Type:                                   System.Single()
                                                    'The x-coordinate of the upper-left corner of the rectangle that defines the ellipse.
                                                    'y()
                                                    'Type:                                   System.Single()
                                                    'The y-coordinate of the upper-left corner of the rectangle that defines the ellipse.
                                                    'width()
                                                    'Type:                                   System.Single()
                                                    'Width of the rectangle that defines the ellipse.
                                                    'height()
                                                    'Type:                                   System.Single()
                                                    'Height of the rectangle that defines the ellipse.
                                                    'startAngle()
                                                    'Type:                                   System.Single()
                                                    'Angle in degrees measured clockwise from the x-axis to the starting point of the arc.
                                                    'sweepAngle()
                                                    'Type:                                   System.Single()
                                                    'Angle in degrees measured clockwise from the startAngle parameter to ending point of the arc.
                                                    Dim StartPos(1) As Decimal
                                                    Dim EndPos(1) As Decimal
                                                    Dim Center(1) As Decimal
                                                    Dim CenterF(1) As Decimal
                                                    StartPos(0) = NodeBasicX + .Arc2D.StartPosX
                                                    StartPos(1) = NodeBasicY + .Arc2D.StartPosY
                                                    EndPos(0) = NodeBasicX + .Arc2D.EndPosX
                                                    EndPos(1) = NodeBasicY + .Arc2D.EndPosY

                                                    Dim Circle As Circle
                                                    Dim x, y, z As CPoint
                                                    'Jeffadd 20160615
                                                    x = New CPoint(Val(NodeBasicX + .Arc2D.StartPosX), Val(NodeBasicY + .Arc2D.StartPosY))
                                                    y = New CPoint(Val(NodeBasicX + .Arc2D.MiddlePosX), Val(NodeBasicY + .Arc2D.MiddlePosY))
                                                    z = New CPoint(Val(NodeBasicX + .Arc2D.EndPosX), Val(NodeBasicY + .Arc2D.EndPosY))

                                                    '[說明]:計算Arc圓心座標
                                                    Circle = CMath.GetCircleby3Point(x, y, z)

                                                    Center(0) = Circle.PointX
                                                    Center(1) = Circle.PointY

                                                    Dim mRadius As Decimal = GetDistance(StartPos(0), StartPos(1), Center(0), Center(1))

                                                    mGraphicsStartX = (Center(0) + mShiftX - mRadius) * mScaleWidth
                                                    mGraphicsStartY = GraphicsPictureBox.Height - (Center(1) + mShiftY + mRadius) * mScaleHeight

                                                    mGraphicsHeight = mRadius * 2 * mScaleHeight
                                                    mGraphicsWidth = mRadius * 2 * mScaleWidth

                                                    '起始值
                                                    Dim StartAngle As Integer = CInt(GetAngleJeffTest(Center(0), Center(1), StartPos(0), StartPos(1)))
                                                    Dim StartAngleTest As Integer
                                                    Dim EndAngleTest As Integer
                                                    StartAngleTest = -StartAngle
                                                    'If StartAngle > 0 Then
                                                    '    StartAngleTest = 180 - StartAngle
                                                    'Else
                                                    '    StartAngleTest = -(StartAngle) + 180
                                                    'End If

                                                    Circle.clockwise = Not Circle.clockwise


                                                    If Circle.clockwise = True Then
                                                        EndAngleTest = -Circle.Angle
                                                    ElseIf Circle.clockwise = False Then
                                                        '    'Dim Middle As Integer
                                                        '    'EndAngleTest = StartAngleTest - Circle.Angle
                                                        '    'Middle = EndAngleTest
                                                        '    'StartAngleTest = Middle

                                                        EndAngleTest = Circle.Angle
                                                    End If


                                                    '結束值
                                                    mDraw.DrawArc(mPen, CInt(mGraphicsStartX), CInt(mGraphicsStartY), CInt(mGraphicsWidth), CInt(mGraphicsHeight), StartAngleTest, EndAngleTest)
                                                    '  mDraw.DrawArc(mPen, CInt(mGraphicsStartX), CInt(mGraphicsStartY), CInt(mGraphicsWidth), CInt(mGraphicsHeight), CInt(StartAngle), CInt(Circle.Angle))
                                                Case eStepFunctionType.Circle3D
                                                    Dim EndPos(1) As Decimal
                                                    Dim Center(1) As Decimal
                                                    Center(0) = NodeBasicX + .Circle3D.CenterPosX
                                                    Center(1) = NodeBasicY + .Circle3D.CenterPosY
                                                    EndPos(0) = NodeBasicX + .Circle3D.EndPosX
                                                    EndPos(1) = NodeBasicY + .Circle3D.EndPosY
                                                    If Center(0) = EndPos(0) And Center(1) = EndPos(1) Then
                                                    Else
                                                        Dim mRadius As Decimal = GetDistance(EndPos(0), EndPos(1), Center(0), Center(1))
                                                        Select Case gSSystemParameter.CoordType
                                                            Case enmCoordinateRelationType.eGN2
                                                                mGraphicsStartX = (Center(0) + mShiftX - mRadius) * mScaleWidth
                                                                mGraphicsStartY = (Center(1) + mShiftY - mRadius) * mScaleHeight
                                                            Case enmCoordinateRelationType.eDTS
                                                                mGraphicsStartX = (Center(0) + mShiftX - mRadius) * mScaleWidth
                                                                mGraphicsStartY = GraphicsPictureBox.Height - (Center(1) + mShiftY + mRadius) * mScaleHeight
                                                        End Select
                                                        mGraphicsHeight = mRadius * 2 * mScaleHeight
                                                        mGraphicsWidth = mRadius * 2 * mScaleWidth
                                                        mDraw.DrawArc(mPen, CInt(mGraphicsStartX), CInt(mGraphicsStartY), CInt(mGraphicsWidth), CInt(mGraphicsHeight), 0, 360)
                                                    End If

                                                Case eStepFunctionType.Arc3D

                                                    '[說明]:配合劃膠之角度轉換 實際劃膠起始點為180(-1,0)順時針 
                                                    '描繪的圖形起始點為0(1,0)順時針 起始點為矩形的為左上角之座標
                                                    '(StartX,StartY)定義為圓心之座標
                                                    If .Arc3D.Angle >= 180 Then
                                                        mGraphicsAngle = (.Arc3D.Angle + 180) Mod 360 + 180
                                                    Else
                                                        mGraphicsAngle = (.Arc3D.Angle + 180) Mod 360 - 180
                                                    End If

                                                    Dim StartPos(1) As Decimal
                                                    Dim EndPos(1) As Decimal
                                                    Dim Center(1) As Decimal

                                                    StartPos(0) = NodeBasicX + .Arc3D.StartPosX
                                                    StartPos(1) = NodeBasicY + .Arc3D.StartPosY
                                                    EndPos(0) = NodeBasicX + .Arc3D.EndPosX
                                                    EndPos(1) = NodeBasicY + .Arc3D.EndPosY
                                                    If StartPos(0) = EndPos(0) And StartPos(1) = EndPos(1) Then
                                                    Else
                                                        '計算原點座標(圓心) 正向和反向 利用向量計算
                                                        If gCRecipe.Pattern(index.PatternName).Round(mRoundNo).CStep(mStepNo).Arc3D.Angle >= 0 Then
                                                            CenterCalculate(StartPos, EndPos, Math.Abs(gCRecipe.Pattern(index.PatternName).Round(mRoundNo).CStep(mStepNo).Arc3D.Angle), Center, 0)
                                                        Else
                                                            CenterCalculate(StartPos, EndPos, Math.Abs(gCRecipe.Pattern(index.PatternName).Round(mRoundNo).CStep(mStepNo).Arc3D.Angle), Center, 1)
                                                        End If

                                                        Dim mRadius As Decimal = GetDistance(StartPos(0), StartPos(1), Center(0), Center(1))
                                                        Select Case gSSystemParameter.CoordType
                                                            Case enmCoordinateRelationType.eGN2
                                                                mGraphicsStartX = (Center(0) + mShiftX - mRadius) * mScaleWidth
                                                                mGraphicsStartY = (Center(1) + mShiftY - mRadius) * mScaleHeight
                                                            Case enmCoordinateRelationType.eDTS
                                                                mGraphicsStartX = (Center(0) + mShiftX - mRadius) * mScaleWidth
                                                                mGraphicsStartY = GraphicsPictureBox.Height - (Center(1) + mShiftY + mRadius) * mScaleHeight
                                                        End Select

                                                        mGraphicsEndX = (.Arc3D.EndPosX + mShiftX) * mScaleWidth
                                                        mGraphicsEndY = (.Arc3D.EndPosY + mShiftY) * mScaleHeight

                                                        mGraphicsHeight = mRadius * 2 * mScaleHeight
                                                        mGraphicsWidth = mRadius * 2 * mScaleWidth
                                                        '起始值
                                                        Dim StartAngle As Integer = CInt(GetAngle(StartPos(0), StartPos(1), Center(0), Center(1)))
                                                        '結束值
                                                        mDraw.DrawArc(mPen, CInt(mGraphicsStartX), CInt(mGraphicsStartY), CInt(mGraphicsHeight), CInt(mGraphicsHeight), StartAngle, CInt(mGraphicsAngle))

                                                        '判斷正反轉
                                                        If gCRecipe.Pattern(index.PatternName).Round(mRoundNo).CStep(mStepNo).Arc3D.Angle > 0 Then
                                                            '正轉
                                                            If mGraphicsAngle > StartAngle Then
                                                                mGraphicsAngle -= StartAngle
                                                            Else
                                                                mGraphicsAngle += (360 - StartAngle)
                                                            End If

                                                        Else
                                                            '反轉
                                                            If (mGraphicsAngle - StartAngle) > 0 Then
                                                                mGraphicsAngle -= (360 + StartAngle)
                                                            Else
                                                                mGraphicsAngle -= StartAngle
                                                            End If
                                                        End If

                                                        mDraw.DrawArc(mPen, CInt(mGraphicsStartX - mGraphicsRadius), CInt(mGraphicsStartY - mGraphicsRadius), CInt(mGraphicsRadius) * 2, CInt(mGraphicsRadius) * 2, 180, CInt(mGraphicsAngle))
                                                    End If
                                            End Select
                                        End With
                                    Next
                                End If
                            End With
                        Next
                    End If
                End With
            Next
        Next
        GraphicsPictureBox.Image = mBitmap

        Return True


    End Function

End Module
